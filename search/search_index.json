{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"illumos is a Unix operating system which provides next-generation features for downstream distributions , including advanced system debugging , next generation filesystem , networking, and virtualization options. illumos is freely available from our source repository , and most distributions based on it are also open source. You can see recent changes here . illumos is developed by both volunteers and companies building products on top of the software. illumos is an excellent base for both traditional and cloud-native deployments. We believe in cross-pollination and collaboration with other open source projects. Please see the about page to learn more!","title":"Home"},{"location":"about/","text":"what is illumos? To quote the illumos Developer's Guide : illumos is a consolidation of software that forms the core of an Operating System. It includes the kernel, device drivers, core system libraries, and utilities. It is the home of many technologies including ZFS, DTrace, Zones, CTF, FMA, and more. We pride ourselves on having a stable, highly observable, and technologically different system. In addition, illumos traces it roots back through Sun Microsystems to the original releases of UNIX and BSD. illumos itself does not offer an OS distribution -- it is the core from which distributions can be created. In this sense, illumos is similar to a BSD source tree, or Linux's kernel.org. Please see the history page for more information about the origins of illumos. Licensing illumos is licensed under the CDDL . Community Values Empathy as a core engineering tenet Code quality and correctness Technology Features The following are shared development tenets and features for distributions utilizing illumos: Stability SMP support for many CPUs Security multi-user facilities like Roles and Privileges Multi-tenancy with Zones Unparalleled system introspection with DTrace A single pipeline for system issues with the Fault Management Architecture (FMA) Network virtualization with Crossbow Hardware virtualization with KVM Excellent online documentation Source code for the entire system For more in-depth descriptions, please see the features page . Uses for illumos While it can be and is used in nearly any situation where a UNIX-type server is needed, illumos excels at storage applications, large multi-tenant systems, and other cloud-centric uses. Have a look at who is using illumos to see what illumos technologies are being used for! Supported hardware platforms illumos currently supports: i86pc (x86, x86_64) architectures AMD64 (except KVM support) There are also several SPARC distributions of illumos; if you are interested in running illumos on SPARC, please refer directly to those distributions' docs. To determine if a specific piece of hardware will work with illumos, please refer to the Hardware Compatability List . For pre-defined builds of server-grade hardware, you may also refer to Joyent Engineering Manufactory database . illumos Development Model Please refer to the illumos Developer's Guide and the development section . Contributing to illumos Please see the contribution if you'd like to participate in the project. Third Party Software illumos does not itself ship third party software, or contain software like webservers and so forth. Distributions include their own package management.","title":"What is illumos?"},{"location":"about/#what-is-illumos","text":"To quote the illumos Developer's Guide : illumos is a consolidation of software that forms the core of an Operating System. It includes the kernel, device drivers, core system libraries, and utilities. It is the home of many technologies including ZFS, DTrace, Zones, CTF, FMA, and more. We pride ourselves on having a stable, highly observable, and technologically different system. In addition, illumos traces it roots back through Sun Microsystems to the original releases of UNIX and BSD. illumos itself does not offer an OS distribution -- it is the core from which distributions can be created. In this sense, illumos is similar to a BSD source tree, or Linux's kernel.org. Please see the history page for more information about the origins of illumos.","title":"what is illumos?"},{"location":"about/#licensing","text":"illumos is licensed under the CDDL .","title":"Licensing"},{"location":"about/#community-values","text":"Empathy as a core engineering tenet Code quality and correctness","title":"Community Values"},{"location":"about/#technology-features","text":"The following are shared development tenets and features for distributions utilizing illumos: Stability SMP support for many CPUs Security multi-user facilities like Roles and Privileges Multi-tenancy with Zones Unparalleled system introspection with DTrace A single pipeline for system issues with the Fault Management Architecture (FMA) Network virtualization with Crossbow Hardware virtualization with KVM Excellent online documentation Source code for the entire system For more in-depth descriptions, please see the features page .","title":"Technology Features"},{"location":"about/#uses-for-illumos","text":"While it can be and is used in nearly any situation where a UNIX-type server is needed, illumos excels at storage applications, large multi-tenant systems, and other cloud-centric uses. Have a look at who is using illumos to see what illumos technologies are being used for!","title":"Uses for illumos"},{"location":"about/#supported-hardware-platforms","text":"illumos currently supports: i86pc (x86, x86_64) architectures AMD64 (except KVM support) There are also several SPARC distributions of illumos; if you are interested in running illumos on SPARC, please refer directly to those distributions' docs. To determine if a specific piece of hardware will work with illumos, please refer to the Hardware Compatability List . For pre-defined builds of server-grade hardware, you may also refer to Joyent Engineering Manufactory database .","title":"Supported hardware platforms"},{"location":"about/#illumos-development-model","text":"Please refer to the illumos Developer's Guide and the development section .","title":"illumos Development Model"},{"location":"about/#contributing-to-illumos","text":"Please see the contribution if you'd like to participate in the project.","title":"Contributing to illumos"},{"location":"about/#third-party-software","text":"illumos does not itself ship third party software, or contain software like webservers and so forth. Distributions include their own package management.","title":"Third Party Software"},{"location":"about/announcement/","text":"Project Announcement Introduction On August 3, 2010, Garrett D'Amore announced the illumos project, \"a community effort of some core Solaris engineers to create a truly open source Solaris by swapping closed source bits of OpenSolaris with open implementations.\" In January, 2012, he reflected on Experiences Starting an Open Source Operating System in a talk at SCALE 10x. Garrett's original slides Transcript OK, everybody. Thank you for joining us. My name is Garrett D Amore. Hopefully everyone is hearing this. We had some technology challenges such as, such as it goes in our industry, and I apologise for the late start but here we are anyway. So Illumos. First off I do want to point out before we get started, that there is a Q A window in the Go2 webinar screen and Anil who is helping me out here, is monitoring that. You can ask questions there and he will forward them to me. We also have a backchannel on IRC if you go to irc.freenode.net and the back channel is #illumos. I-L-L-U-M-O-S, and Anil s monitoring that as well, and he ll let me know if there s pertinent questions I should address. I will try to address those questions at the end, however. [Slide 1, 1:06] So, without further adieu, let s go ahead and continue. So, thanks for joining us. I think that the topic there on the first page slide, hopefully everybody sees it. By the way if you aren t able to see the slides now, we will be posting them up, excuse me Anil have you already posted those? Ok, so Anil with post them momentarily. So, hopefully you can get them, and they ll be on the website at www.illumos.org. Just looking at that font on the slide, and realize the I really doesn t stand out vary differently from the L. I apologize for that, it s I-L-L. And our topic is Hope and Light Springs Anew. So, the name... well first off I hope everyone understands that this presentation is targeted towards the OpenSolaris audience so I didn t really go into a lot of background there. It will become clear as we go on. If you are here asking about Windows or something else you re probably in the wrong conference call. [Slide 2, 2:19] So what s in a name? First Illum from Latin for Light and OS for Operating System. However even though I printed it out this way on the slide, now we ve been spelling it all one word with any unusual spellings, so I-L-L-U-M-O-S, with only the I capitalized. [Slide 3, 2:41] So, actually what is this project about? Well the first thing is that the project is designed here to solve a key problem, and that is that not all of OpenSolaris is really open source. And there s a lot of other potential concerns in the community, but this one is really kind of a core one, and from solving this, I think a lot of other issues can be solved. So the critical components of OpenSolaris. Well, first off I guess I should say that most of the important parts of OpenSolaris are, for booting at least and for building a foundation block for the OS/Net consolidation, out of that consolidation it s nearly completely open source, except for a few pieces. One of the most striking pieces is this part called libc-i18n, which is a component you need to build a working C library. It s a substantial percentage of libc is tied up in that libc-i18n, in some cases because it s i18n code, in other cases because of dependencies and well dependencies is probably the best way to put it. The NFS lock manager, of course, there s the crypto framework, a number of really important drivers. mpt I listed here is a pretty famous one its for a pretty popular series of HBAs from LSI. But there s a lot of other drivers that are closed source, and in fact even some key platform code, although that s for the most port an issue for the SPARC port. Most of the critical platform code for x86 is open, in fact I can t think of anything critical that s closed. This list is by no means exhaustive, but it s a good start. So the problem with the fact that not all of this source is open is that it really does present some big challenges to anyone downstream or who depends on OS/Net or consequently OpenSolaris and of course this involves Nexenta, Belinux, Schillix these are all derivative distributions from the original source from Oracle. And this problem is not new to the industry; some years ago Apple had done the community a great favor by opening a bunch of their code in the form of Darwin. However I think you can Google around for MacOS X and Darwin and see the end result of that. And that is, the end result, I think, that we would all like to avoid. [Slide 4, 5:32] So there s a lot of good stuff, with all the other issues going on with the community that s built up around the code. First off there s technology in the code, zfs, dtrace, crossbow, zones, I think everyone who s familiar with OpenSolaris will recognize this stuff, and if you don t, Google will readily fill you in with lots and lots of detail on all of these technologies, and this is just a brief list of some of the big names. There s a lot of others beyond this. And of course the community behind these technologies is made up of a number of just incredible engineers, I ve been fortunate to work with some of the brightest people on the planet, I believe, on Solaris and SunOS code. And we are also backed by an outstanding set of enthusiasts, and our eco-system really is quite vibrant, particularly in light of some of the other challenges it continues to be so vibrant. This I think says a lot. And of course the other thing is that it s not all closed. In fact, the vast majority of the code is indeed open. So the problem of, the problem faced to resolve this is actually quite tractable. [Slide 5, 7:06] Technology issues, there it goes, alright. I apologise. OK. So around this effort. I talked a little about the issue of the code. To elaborate a little bit further, what we ve done is taken OS/Net, this consolidation which really makes up the kernel and a bunch of critical system utilities and made a child of it, and this is really a source code management type term but what it means is that it has an ancestry relationship with the upstream which in this case is the code from Oracle, and we track the upstream very closely, and we also have the goal of being 100% compatible with the code from Oracle. I say ABI compatible, what that means is that the idea is that you can take an application that is compiled and runs well on Solaris, and the same exact application compiles and runs on Illumos, so that is an important point. We also, the idea is no closed code. There s a fully open libc, I would want to have a fully open kernel, and fully open drivers. As you ll see we are not all the way there yet but we made really good progress, and continue to work on this. The other idea is that this project then becomes a repository where we can take changes from contributors that for a variety of reasons might be unacceptable to Oracle, and I can detail all those later, maybe in Q A or maybe separately. There s a lot of potential possibilities here, and as long as we don t really break the idea of ABI compatibility with Solaris and we don t diverge needlessly from the upstream ON consolidation, there s a lot of room for innovation. [Slide 6, 9:19] So the focus of Illumos is really ON right now, OS/Net, that s that core consolidation that I talked about. But one of the ideas is that this also can then ultimately build a community that can act as an umbrella for these other projects, and other pieces, that become interesting, once you solve this critical problem of that core foundation. X11, which is basically the graphical windowing system. The desktop components. The C runtime. Some of the distributions. And there is potentially a lot of ways which people can innovate, and contribute. Which unfortunately, in the current community is quite difficult to do. We hope that we can become a lot more of a facilitator in that kind of development and collaboration. [Slide 7, 10:16] So, around this, we hope to build a community. And, I think we actually have really started one pretty strongly, from the people who have already either agreed to participate or are participating. And this community stands independently from the OpenSolaris community. What that means is that we own our own identity, and we can t be shut down, and we re not slaves to any corporate master. And even though Nexenta is a major sponsor, and I m very grateful that Nexenta is. They re my employer, and they are funding my time on this. But the identity and the project, is owned by the community. And that means we re governed and run by the community. On that topic, I have a few bullet points there about our resources being distributed, the fact that we re going to basically run this as a Meritocracy, with a light hand on governance, which is one of the areas we think we can improve upon from the previous attempts. [Slide 8, 11:28] So there s a large number of people. I started the project, so I guess I m the de facto leader . But you know, there s actually quite a - it was a dozen when I wrote this, it s probably grown since then. This project started out with just a few developers, that I wanted have real focus on just getting the code done. Without engaging in a lot of conversation. Even with that small, focused group, it s already still growing. And now, today, as of right this minute, we hope to engage a much much broader audience. A we hope to invite, all of you - actually we do invite all of you. So come join us. In this presentation you ll see there s a website you can join, there s mailing lists you can join. A number of the community leaders, a lot of whom you will be familiar with, if you re already a part of this group. In fact, hang on just a minute. Some of them are on this call. And actually we have a couple who have agreed to speak. I d like to tie in one. Anil s checking on it for me. Just a minute. [12:48] Simon, we re going to go ahead and un-mute your mic. Are you available to talk? Ok, great. So Simon Phipps is one of the - he didn t start out as an existing core member. But he s agreed to help us out, and as you ll see later, he s agreed to take a role in this, and I m hoping that Simon has some good things to say. * Simon Phipps, SP * Hi Garrett. * GDA * Simon Phipps, maybe not the best introduction. * SP * I m very pleased that you re doing this, Garrett. You know I ve seen a project like this before, when we started OpenJDK there was some concern, that Sun wasn t going to get around to opening all of the Java code, so some community members got together and formed a project called IcedTea , which was downstream of OpenJDK, but to which people could innovate and could fix the non-free parts of OpenJDK. It was the existence of that project, that made OpenJDK a fully free project, and led to it having the existence beyond the sponsorship that Sun put into it. I m looking at Illumos at the moment, and I think it s exactly the right step to take. It s good that it s downstream of Oracle. If they choose to use it, it could do a great deal of good to their Solaris products. If they choose not to use it, then it s a great place for the community to assemble, and give a future to Solaris. * GDA * Ok. Great. And thanks for your support. That was Simon Phipps. Simon currently sits on the board for the Open Source Initiative. I think that s correct, is that correct, Simon? * SP * That s correct. I m on the board of directors of OSI, the Open Source Initiative. At the moment, while we still have one, I m a member of the OpenSolaris Governing Board, as well. * GDA * Ok. And he also writes for Computer World UK. I m sure you can find his blog pretty easily. Thank you very much Simon. Let s go ahead and move along. One of the points that s on there, before I switch to the next slide, is that I believe that we actually do already have critical mass to drive this project forward. That s one of the real challenges for a project like this. The codebase, when you look at the size of OS/Net, is quite enormous, but the number of people, and people who are actual do-ers rather than talk-ers, who are involved and interested and engaged, already, is - I m actually astounded, and thrilled to have such a - frankly an illustrious group of contributors involved. I have great hope. Moving forward. [Slide 9, 15:50] We have quite a few community partners. Of course, Nexenta is one of these, and there s a number of these names that you will recognise, if you re familiar with the OpenSolaris community. Google is great at filling each one of these out. I m not going to present all of them to you. But I m really pleased that a former colleague of mine at Oracle, is with us, and he has taken a position as Vice President of Engineering at Joyent. Hopefully he s on the line. His name is Brian Cantrill. He s one of the co-creators of DTrace as I understand it. Can we un-mute his mic? We re having some technical issues here, hopefully we ll get Brian in, in a few minutes. In the meantime, I m going to go ahead and move on. [Slide 10, 16:52] The 800 pound gorilla. This is the question that is probably on a lot of people s minds. The 800 pound gorilla being that company that bought former owner of the Intellectual Property behind most of OpenSolaris, Oracle. The interactions here, it s really important that we understand what these interactions are, and what they re intended to be. The first of these is that Illumos is not a competitor to Solaris. Neither to OpenSolaris. In fact, I have personally invited Oracle to participate as a peer, although they don t get to own it, we would love to have their participation. To the extent that they are allowed to, per whatever arrangements they have with Oracle, welcome the individual employees of Oracle, to participate here as well. We d love to have a collaborative and cooperative relationship with Oracle. Just as with any of our other corporate partners. From that slide I just had, you can see a few. That slide, by the way, is by no means complete. I hope that it will not be the end statement, either. But we re not going to depend on them. I m being told now that Brian is available, so I m going to go ahead and switch back to Brian. [18:12] * Bryan Cantrill, BC * Hey Garrett. This is terrific news. A great development for the OpenSolaris community. Looking back, historically, I think we at Sun (I should say they now I guess) - I think that Sun understood the importance of the right to fork the operating system, but I think we ve underestimated the importance of the power to fork the operating system. As you know, as we all know, we never quite made it to 100% of the source. And what that, effectively, forbid - not explicitly, I mean we didn t do it by design - but because there were these encumbrances that didn t allow us to open source elements of the operating system, it effectively did not allow for a fork. A fork is a really important check against an open source project. A fork is what allows people to innovate. A fork is what allows people to not get hung up on governance models. It allows them to express their independence from a project. Whilst people had the right, strictly speaking, they didn t have the power, because it was not all open source. Today is a really critical development. It is giving all of us, in the community, the power to fork the system. Not that we want to actually exercise that power in a way that is divisive, but we need to be able to exercise that power in a way that is innovative. I think that is going to allow many of us - now speaking as Joyent - many of us in the community who depend on the innovations in this system for the value that we bring to our customers, it is going to allow all of us to begin to differentiate ourselves in the marketplace, it s going to allow all of us to be able to really innovate to the operating system, and allows us all to collaborate. I think that, speaking for Joyent, we have modifications to the system that we have not been able to integrate for a variety of reasons. We believe with Illumos - with the Illumos project - that we will be able to begin to integrate some of these modifications. Many of them, of course, are small - bugfixes and so on. But things that for a variety of reasons couldn t be taken further upstream. I, personally, and we, Joyent, are thrilled. This is a tremendous, tremendous development. Garrett, you and your team, are to be commended for some very difficult technical work. To be clear, we are not completely out of the woods yet. We boot. That s good. But we got work ahead of us. Collectively. As a community. To get to a vibrant base, that will allow for innovation. I m much more confident now, than I have been at any time in the last five years, that we re going to get there as a community. So, very exciting development, and I think you see the number of people that are on Freenode. A lot of folks are interested in this. I think for us as a community it s a real reboot. We owe our debt of gratitude to Garrett and the Illumos project. [21:44] * GDA * Thank you very much, Brian. I m very, very pleased that you and the rest of the crew at Joyent are going to be able to join us, and collaborate to expand upon the great work that is already part of SunOS base. With that, I m going to go ahead and switch back, because I want to keep moving ahead. On this one slide, the 800 pound gorilla. So I think that this idea that Brian really hit on, is that we have the power to fork. We are not a fork, but what we do is we represent the ability of the community to do that. That s key. [Slide 11, 22:30] In fact, here s my top slide on that. What if the tap is turned off? What if, the upstream, ceases to be cooperative, or just goes away. For a lot of reasons, I don t think that s going to happen. Even if the community around that code-base were to be abandoned, or shut down - or even change it s character in a way that it might be hard to recognise it, the code-base, I expect personally, for that to remain available. That code that is already available, and for it to continue to be updated, on some level of frequency. But in the event, that it were to go away, we believe that with the developers we have, and especially, the growing ecosystem that already just on day one here, seems to be exploding. I think we have critical mass to continue to sustain it. As I said, I m thrilled that Joyent, and there is a bunch of other people, are a part of that. Of course, if this happens, then we - by definition - become a fork. We are not a fork today, because of the way we track OS/Net. In my mind, in a classical sense, a fork starts from the starting point, and moves away, and becomes something else. So we re more like a project that - we re going to continue to try to work closely with Oracle. As I think that Brian talked about, really the idea is that Illumos is the insurance that the entire community needs, against this sort of scenario of what happens if the tap is turned off. [Slide 12, 24:14] What are some of the major goals of this project. I think we ve already talked about some of these. We want to be a self-hosting SunOS derivative. We re not quite there yet, but we re getting there. We ve made good strides. Fully open source, of course. That s kind of, I think, a key thing. I already touched on the 100% ABI compatibility with Solaris. So, for those who are listening in, and aren t familiar with the acronym ABI, that s Application Binary Interface, and really what it means, is that your existing applications work without being recompiled. This next, fourth bullet point, I haven t touched on it today, and it s really key. Probably it deserves a little bit of discussion. That is, that we want the things that we put into Illumos to be usable by Oracle. To be able to be taken back into the upstream code from Oracle. This is part of the - we re not a fork today. Working and collaborate in a collaborative relationship with Oracle. So there s a bunch of other consequences that fall out of this. But the key thing is that the code that integrates into Illumos really should be - it should be reasonable for somebody to integrate that back into the Oracle code base. If whatever political or business goals, that were preventing that, were removed. Of course, we don t want to have any corporate dependencies on the Illumos project. I think I ve already talked about this. This last bullet point, the basis for other distributions. For people not familiar with the way OpenSolaris distributions are built today, there is typically this bottom piece, called ON. And there is a bunch of other pieces, that are put together, and then these are all constructed together, to create a full operating system. And there s a number of distributions besides the one that Oracle creates, called OpenSolaris. There s Schillix, there s Belenix, and of course, my favourite, Nexenta. This is just a few of them. There s quite a few others. MilaX, EON, and we haven t talked to all of the people producing these distributions, but at least the ones that we have talked to are already engaged in looking at Illumos as their future base line. So they re participating. I m going to make a brief note here, there is another individual who is a part of the Illumos developer community, who s also working on a completely open, community driven, version of the distribution, formerly known as Indiana. I m not going to say anything more about that, because that would be stealing his thunder. Hopefully, you ll hear more from him in the coming days or weeks. [Slide 13, 27:10] A little bit here about how the project is organised. Basically, we re going to have two groups, one group is this notion of administrative council, that basically handles non-technical matters. So resource management. We do have servers, we have mailing lists. There is probably matters of evangelism and marketing and all these others things that happen. We wanted to separate the technical from the non-technical. So the people focused on the code, and getting things done, didn t have to be bothered by the day-to-day running of the details. Likewise, the people running the day-to-day details don t have to be all-star developers. Initially, I m the chairman. It s a benevolent dictatorship until we come up with some other form of rule that works. The idea is to make this as much as possible, reasonable consensus driven, although there will be a smaller group, that actually runs the administrative council. I have already appointed a few members, that may change. Hopefully they will select some additional members, to fill out their own ranks. The idea is a meritocracy, the people who are actually helping to do things, rather than just people who want to stand up and claim credit. [Slide 14, 28:35] The other half of this is the developer council. I had a little tie-in from a joke here. A community member actually, had a nice tagline here, his name is Matthew, you ll see him on IRC as lewellyn. His line was if you have a polarising issue, the first thing you have to work out if it s AC or DC . Thanks to lewellyn for that little tid-bit. It s, again a benevolent dictatorship, and I m going to take the role as tech lead on the project. I ll probably keep that lead, longer than I will the leadership in the other side, because I really do view myself as a technical individual. Again, the initial members will be appointed. The idea is that this really made up of the developers who have the ability and - not just the ability - but the right to commit, and a consensus driven meritocracy. My hope is that as tech lead, I help define direction, but I only get involved in arbitration if no other alternative, solution can be arrived at via consensus. [29:55] I m seeing something on my UI here that says that we may be having network trouble. Can somebody indicate on the IRC channel, am I coming across clearly? Ok. Anil s giving the thumbs up. So I m going to keep going. Maybe it s not too bad. [Slide 15, 30:10] Rules for integration. This is getting down to the nuts and bolts of how we expect to operate. As I think I already mentioned, again ON here is OS/Net. That s that consolidation from the upstream. We have the same kind of guidelines. You still gotta pass your cstyle, lint, you know, test your code, have it reviewed, so forth. We do have some license restrictions, and really these have a lot to do with this goal of making it easy for Oracle to take our code and re-integrate it back into the upstream. Credits Brian Bienvenu (taemun) A. Hettinger (oninoshiko)","title":"Announcement"},{"location":"about/announcement/#project-announcement","text":"","title":"Project Announcement"},{"location":"about/announcement/#introduction","text":"On August 3, 2010, Garrett D'Amore announced the illumos project, \"a community effort of some core Solaris engineers to create a truly open source Solaris by swapping closed source bits of OpenSolaris with open implementations.\" In January, 2012, he reflected on Experiences Starting an Open Source Operating System in a talk at SCALE 10x. Garrett's original slides","title":"Introduction"},{"location":"about/announcement/#transcript","text":"OK, everybody. Thank you for joining us. My name is Garrett D Amore. Hopefully everyone is hearing this. We had some technology challenges such as, such as it goes in our industry, and I apologise for the late start but here we are anyway. So Illumos. First off I do want to point out before we get started, that there is a Q A window in the Go2 webinar screen and Anil who is helping me out here, is monitoring that. You can ask questions there and he will forward them to me. We also have a backchannel on IRC if you go to irc.freenode.net and the back channel is #illumos. I-L-L-U-M-O-S, and Anil s monitoring that as well, and he ll let me know if there s pertinent questions I should address. I will try to address those questions at the end, however. [Slide 1, 1:06] So, without further adieu, let s go ahead and continue. So, thanks for joining us. I think that the topic there on the first page slide, hopefully everybody sees it. By the way if you aren t able to see the slides now, we will be posting them up, excuse me Anil have you already posted those? Ok, so Anil with post them momentarily. So, hopefully you can get them, and they ll be on the website at www.illumos.org. Just looking at that font on the slide, and realize the I really doesn t stand out vary differently from the L. I apologize for that, it s I-L-L. And our topic is Hope and Light Springs Anew. So, the name... well first off I hope everyone understands that this presentation is targeted towards the OpenSolaris audience so I didn t really go into a lot of background there. It will become clear as we go on. If you are here asking about Windows or something else you re probably in the wrong conference call. [Slide 2, 2:19] So what s in a name? First Illum from Latin for Light and OS for Operating System. However even though I printed it out this way on the slide, now we ve been spelling it all one word with any unusual spellings, so I-L-L-U-M-O-S, with only the I capitalized. [Slide 3, 2:41] So, actually what is this project about? Well the first thing is that the project is designed here to solve a key problem, and that is that not all of OpenSolaris is really open source. And there s a lot of other potential concerns in the community, but this one is really kind of a core one, and from solving this, I think a lot of other issues can be solved. So the critical components of OpenSolaris. Well, first off I guess I should say that most of the important parts of OpenSolaris are, for booting at least and for building a foundation block for the OS/Net consolidation, out of that consolidation it s nearly completely open source, except for a few pieces. One of the most striking pieces is this part called libc-i18n, which is a component you need to build a working C library. It s a substantial percentage of libc is tied up in that libc-i18n, in some cases because it s i18n code, in other cases because of dependencies and well dependencies is probably the best way to put it. The NFS lock manager, of course, there s the crypto framework, a number of really important drivers. mpt I listed here is a pretty famous one its for a pretty popular series of HBAs from LSI. But there s a lot of other drivers that are closed source, and in fact even some key platform code, although that s for the most port an issue for the SPARC port. Most of the critical platform code for x86 is open, in fact I can t think of anything critical that s closed. This list is by no means exhaustive, but it s a good start. So the problem with the fact that not all of this source is open is that it really does present some big challenges to anyone downstream or who depends on OS/Net or consequently OpenSolaris and of course this involves Nexenta, Belinux, Schillix these are all derivative distributions from the original source from Oracle. And this problem is not new to the industry; some years ago Apple had done the community a great favor by opening a bunch of their code in the form of Darwin. However I think you can Google around for MacOS X and Darwin and see the end result of that. And that is, the end result, I think, that we would all like to avoid. [Slide 4, 5:32] So there s a lot of good stuff, with all the other issues going on with the community that s built up around the code. First off there s technology in the code, zfs, dtrace, crossbow, zones, I think everyone who s familiar with OpenSolaris will recognize this stuff, and if you don t, Google will readily fill you in with lots and lots of detail on all of these technologies, and this is just a brief list of some of the big names. There s a lot of others beyond this. And of course the community behind these technologies is made up of a number of just incredible engineers, I ve been fortunate to work with some of the brightest people on the planet, I believe, on Solaris and SunOS code. And we are also backed by an outstanding set of enthusiasts, and our eco-system really is quite vibrant, particularly in light of some of the other challenges it continues to be so vibrant. This I think says a lot. And of course the other thing is that it s not all closed. In fact, the vast majority of the code is indeed open. So the problem of, the problem faced to resolve this is actually quite tractable. [Slide 5, 7:06] Technology issues, there it goes, alright. I apologise. OK. So around this effort. I talked a little about the issue of the code. To elaborate a little bit further, what we ve done is taken OS/Net, this consolidation which really makes up the kernel and a bunch of critical system utilities and made a child of it, and this is really a source code management type term but what it means is that it has an ancestry relationship with the upstream which in this case is the code from Oracle, and we track the upstream very closely, and we also have the goal of being 100% compatible with the code from Oracle. I say ABI compatible, what that means is that the idea is that you can take an application that is compiled and runs well on Solaris, and the same exact application compiles and runs on Illumos, so that is an important point. We also, the idea is no closed code. There s a fully open libc, I would want to have a fully open kernel, and fully open drivers. As you ll see we are not all the way there yet but we made really good progress, and continue to work on this. The other idea is that this project then becomes a repository where we can take changes from contributors that for a variety of reasons might be unacceptable to Oracle, and I can detail all those later, maybe in Q A or maybe separately. There s a lot of potential possibilities here, and as long as we don t really break the idea of ABI compatibility with Solaris and we don t diverge needlessly from the upstream ON consolidation, there s a lot of room for innovation. [Slide 6, 9:19] So the focus of Illumos is really ON right now, OS/Net, that s that core consolidation that I talked about. But one of the ideas is that this also can then ultimately build a community that can act as an umbrella for these other projects, and other pieces, that become interesting, once you solve this critical problem of that core foundation. X11, which is basically the graphical windowing system. The desktop components. The C runtime. Some of the distributions. And there is potentially a lot of ways which people can innovate, and contribute. Which unfortunately, in the current community is quite difficult to do. We hope that we can become a lot more of a facilitator in that kind of development and collaboration. [Slide 7, 10:16] So, around this, we hope to build a community. And, I think we actually have really started one pretty strongly, from the people who have already either agreed to participate or are participating. And this community stands independently from the OpenSolaris community. What that means is that we own our own identity, and we can t be shut down, and we re not slaves to any corporate master. And even though Nexenta is a major sponsor, and I m very grateful that Nexenta is. They re my employer, and they are funding my time on this. But the identity and the project, is owned by the community. And that means we re governed and run by the community. On that topic, I have a few bullet points there about our resources being distributed, the fact that we re going to basically run this as a Meritocracy, with a light hand on governance, which is one of the areas we think we can improve upon from the previous attempts. [Slide 8, 11:28] So there s a large number of people. I started the project, so I guess I m the de facto leader . But you know, there s actually quite a - it was a dozen when I wrote this, it s probably grown since then. This project started out with just a few developers, that I wanted have real focus on just getting the code done. Without engaging in a lot of conversation. Even with that small, focused group, it s already still growing. And now, today, as of right this minute, we hope to engage a much much broader audience. A we hope to invite, all of you - actually we do invite all of you. So come join us. In this presentation you ll see there s a website you can join, there s mailing lists you can join. A number of the community leaders, a lot of whom you will be familiar with, if you re already a part of this group. In fact, hang on just a minute. Some of them are on this call. And actually we have a couple who have agreed to speak. I d like to tie in one. Anil s checking on it for me. Just a minute. [12:48] Simon, we re going to go ahead and un-mute your mic. Are you available to talk? Ok, great. So Simon Phipps is one of the - he didn t start out as an existing core member. But he s agreed to help us out, and as you ll see later, he s agreed to take a role in this, and I m hoping that Simon has some good things to say. * Simon Phipps, SP * Hi Garrett. * GDA * Simon Phipps, maybe not the best introduction. * SP * I m very pleased that you re doing this, Garrett. You know I ve seen a project like this before, when we started OpenJDK there was some concern, that Sun wasn t going to get around to opening all of the Java code, so some community members got together and formed a project called IcedTea , which was downstream of OpenJDK, but to which people could innovate and could fix the non-free parts of OpenJDK. It was the existence of that project, that made OpenJDK a fully free project, and led to it having the existence beyond the sponsorship that Sun put into it. I m looking at Illumos at the moment, and I think it s exactly the right step to take. It s good that it s downstream of Oracle. If they choose to use it, it could do a great deal of good to their Solaris products. If they choose not to use it, then it s a great place for the community to assemble, and give a future to Solaris. * GDA * Ok. Great. And thanks for your support. That was Simon Phipps. Simon currently sits on the board for the Open Source Initiative. I think that s correct, is that correct, Simon? * SP * That s correct. I m on the board of directors of OSI, the Open Source Initiative. At the moment, while we still have one, I m a member of the OpenSolaris Governing Board, as well. * GDA * Ok. And he also writes for Computer World UK. I m sure you can find his blog pretty easily. Thank you very much Simon. Let s go ahead and move along. One of the points that s on there, before I switch to the next slide, is that I believe that we actually do already have critical mass to drive this project forward. That s one of the real challenges for a project like this. The codebase, when you look at the size of OS/Net, is quite enormous, but the number of people, and people who are actual do-ers rather than talk-ers, who are involved and interested and engaged, already, is - I m actually astounded, and thrilled to have such a - frankly an illustrious group of contributors involved. I have great hope. Moving forward. [Slide 9, 15:50] We have quite a few community partners. Of course, Nexenta is one of these, and there s a number of these names that you will recognise, if you re familiar with the OpenSolaris community. Google is great at filling each one of these out. I m not going to present all of them to you. But I m really pleased that a former colleague of mine at Oracle, is with us, and he has taken a position as Vice President of Engineering at Joyent. Hopefully he s on the line. His name is Brian Cantrill. He s one of the co-creators of DTrace as I understand it. Can we un-mute his mic? We re having some technical issues here, hopefully we ll get Brian in, in a few minutes. In the meantime, I m going to go ahead and move on. [Slide 10, 16:52] The 800 pound gorilla. This is the question that is probably on a lot of people s minds. The 800 pound gorilla being that company that bought former owner of the Intellectual Property behind most of OpenSolaris, Oracle. The interactions here, it s really important that we understand what these interactions are, and what they re intended to be. The first of these is that Illumos is not a competitor to Solaris. Neither to OpenSolaris. In fact, I have personally invited Oracle to participate as a peer, although they don t get to own it, we would love to have their participation. To the extent that they are allowed to, per whatever arrangements they have with Oracle, welcome the individual employees of Oracle, to participate here as well. We d love to have a collaborative and cooperative relationship with Oracle. Just as with any of our other corporate partners. From that slide I just had, you can see a few. That slide, by the way, is by no means complete. I hope that it will not be the end statement, either. But we re not going to depend on them. I m being told now that Brian is available, so I m going to go ahead and switch back to Brian. [18:12] * Bryan Cantrill, BC * Hey Garrett. This is terrific news. A great development for the OpenSolaris community. Looking back, historically, I think we at Sun (I should say they now I guess) - I think that Sun understood the importance of the right to fork the operating system, but I think we ve underestimated the importance of the power to fork the operating system. As you know, as we all know, we never quite made it to 100% of the source. And what that, effectively, forbid - not explicitly, I mean we didn t do it by design - but because there were these encumbrances that didn t allow us to open source elements of the operating system, it effectively did not allow for a fork. A fork is a really important check against an open source project. A fork is what allows people to innovate. A fork is what allows people to not get hung up on governance models. It allows them to express their independence from a project. Whilst people had the right, strictly speaking, they didn t have the power, because it was not all open source. Today is a really critical development. It is giving all of us, in the community, the power to fork the system. Not that we want to actually exercise that power in a way that is divisive, but we need to be able to exercise that power in a way that is innovative. I think that is going to allow many of us - now speaking as Joyent - many of us in the community who depend on the innovations in this system for the value that we bring to our customers, it is going to allow all of us to begin to differentiate ourselves in the marketplace, it s going to allow all of us to be able to really innovate to the operating system, and allows us all to collaborate. I think that, speaking for Joyent, we have modifications to the system that we have not been able to integrate for a variety of reasons. We believe with Illumos - with the Illumos project - that we will be able to begin to integrate some of these modifications. Many of them, of course, are small - bugfixes and so on. But things that for a variety of reasons couldn t be taken further upstream. I, personally, and we, Joyent, are thrilled. This is a tremendous, tremendous development. Garrett, you and your team, are to be commended for some very difficult technical work. To be clear, we are not completely out of the woods yet. We boot. That s good. But we got work ahead of us. Collectively. As a community. To get to a vibrant base, that will allow for innovation. I m much more confident now, than I have been at any time in the last five years, that we re going to get there as a community. So, very exciting development, and I think you see the number of people that are on Freenode. A lot of folks are interested in this. I think for us as a community it s a real reboot. We owe our debt of gratitude to Garrett and the Illumos project. [21:44] * GDA * Thank you very much, Brian. I m very, very pleased that you and the rest of the crew at Joyent are going to be able to join us, and collaborate to expand upon the great work that is already part of SunOS base. With that, I m going to go ahead and switch back, because I want to keep moving ahead. On this one slide, the 800 pound gorilla. So I think that this idea that Brian really hit on, is that we have the power to fork. We are not a fork, but what we do is we represent the ability of the community to do that. That s key. [Slide 11, 22:30] In fact, here s my top slide on that. What if the tap is turned off? What if, the upstream, ceases to be cooperative, or just goes away. For a lot of reasons, I don t think that s going to happen. Even if the community around that code-base were to be abandoned, or shut down - or even change it s character in a way that it might be hard to recognise it, the code-base, I expect personally, for that to remain available. That code that is already available, and for it to continue to be updated, on some level of frequency. But in the event, that it were to go away, we believe that with the developers we have, and especially, the growing ecosystem that already just on day one here, seems to be exploding. I think we have critical mass to continue to sustain it. As I said, I m thrilled that Joyent, and there is a bunch of other people, are a part of that. Of course, if this happens, then we - by definition - become a fork. We are not a fork today, because of the way we track OS/Net. In my mind, in a classical sense, a fork starts from the starting point, and moves away, and becomes something else. So we re more like a project that - we re going to continue to try to work closely with Oracle. As I think that Brian talked about, really the idea is that Illumos is the insurance that the entire community needs, against this sort of scenario of what happens if the tap is turned off. [Slide 12, 24:14] What are some of the major goals of this project. I think we ve already talked about some of these. We want to be a self-hosting SunOS derivative. We re not quite there yet, but we re getting there. We ve made good strides. Fully open source, of course. That s kind of, I think, a key thing. I already touched on the 100% ABI compatibility with Solaris. So, for those who are listening in, and aren t familiar with the acronym ABI, that s Application Binary Interface, and really what it means, is that your existing applications work without being recompiled. This next, fourth bullet point, I haven t touched on it today, and it s really key. Probably it deserves a little bit of discussion. That is, that we want the things that we put into Illumos to be usable by Oracle. To be able to be taken back into the upstream code from Oracle. This is part of the - we re not a fork today. Working and collaborate in a collaborative relationship with Oracle. So there s a bunch of other consequences that fall out of this. But the key thing is that the code that integrates into Illumos really should be - it should be reasonable for somebody to integrate that back into the Oracle code base. If whatever political or business goals, that were preventing that, were removed. Of course, we don t want to have any corporate dependencies on the Illumos project. I think I ve already talked about this. This last bullet point, the basis for other distributions. For people not familiar with the way OpenSolaris distributions are built today, there is typically this bottom piece, called ON. And there is a bunch of other pieces, that are put together, and then these are all constructed together, to create a full operating system. And there s a number of distributions besides the one that Oracle creates, called OpenSolaris. There s Schillix, there s Belenix, and of course, my favourite, Nexenta. This is just a few of them. There s quite a few others. MilaX, EON, and we haven t talked to all of the people producing these distributions, but at least the ones that we have talked to are already engaged in looking at Illumos as their future base line. So they re participating. I m going to make a brief note here, there is another individual who is a part of the Illumos developer community, who s also working on a completely open, community driven, version of the distribution, formerly known as Indiana. I m not going to say anything more about that, because that would be stealing his thunder. Hopefully, you ll hear more from him in the coming days or weeks. [Slide 13, 27:10] A little bit here about how the project is organised. Basically, we re going to have two groups, one group is this notion of administrative council, that basically handles non-technical matters. So resource management. We do have servers, we have mailing lists. There is probably matters of evangelism and marketing and all these others things that happen. We wanted to separate the technical from the non-technical. So the people focused on the code, and getting things done, didn t have to be bothered by the day-to-day running of the details. Likewise, the people running the day-to-day details don t have to be all-star developers. Initially, I m the chairman. It s a benevolent dictatorship until we come up with some other form of rule that works. The idea is to make this as much as possible, reasonable consensus driven, although there will be a smaller group, that actually runs the administrative council. I have already appointed a few members, that may change. Hopefully they will select some additional members, to fill out their own ranks. The idea is a meritocracy, the people who are actually helping to do things, rather than just people who want to stand up and claim credit. [Slide 14, 28:35] The other half of this is the developer council. I had a little tie-in from a joke here. A community member actually, had a nice tagline here, his name is Matthew, you ll see him on IRC as lewellyn. His line was if you have a polarising issue, the first thing you have to work out if it s AC or DC . Thanks to lewellyn for that little tid-bit. It s, again a benevolent dictatorship, and I m going to take the role as tech lead on the project. I ll probably keep that lead, longer than I will the leadership in the other side, because I really do view myself as a technical individual. Again, the initial members will be appointed. The idea is that this really made up of the developers who have the ability and - not just the ability - but the right to commit, and a consensus driven meritocracy. My hope is that as tech lead, I help define direction, but I only get involved in arbitration if no other alternative, solution can be arrived at via consensus. [29:55] I m seeing something on my UI here that says that we may be having network trouble. Can somebody indicate on the IRC channel, am I coming across clearly? Ok. Anil s giving the thumbs up. So I m going to keep going. Maybe it s not too bad. [Slide 15, 30:10] Rules for integration. This is getting down to the nuts and bolts of how we expect to operate. As I think I already mentioned, again ON here is OS/Net. That s that consolidation from the upstream. We have the same kind of guidelines. You still gotta pass your cstyle, lint, you know, test your code, have it reviewed, so forth. We do have some license restrictions, and really these have a lot to do with this goal of making it easy for Oracle to take our code and re-integrate it back into the upstream.","title":"Transcript"},{"location":"about/announcement/#credits","text":"Brian Bienvenu (taemun) A. Hettinger (oninoshiko)","title":"Credits"},{"location":"about/distro/","text":"the illumos family Introduction Similar to other operating systems, there are many different OS distributions based on the common illumos ecosystem. Some of them are maintained by enthusiasts, others are primarily developed by commercial companies with their own priorities and focus, and some mainly differ in their packaging systems. Most of these projects contribute back to the common core set of software, which the illumos project is all about. Comparison All illumos-derived systems should include our common technologies . Not all distributions have the latest features or run on both x86 and SPARC. For major feature differences, the following chart may be helpful. Active Spins Project Provider Focus Linux Comparison Open Source Packaging x86 SPARC KVM LX SmartOS Joyent Hypervisor CoreOS check pkgsrc check check check OmniOS CE OmniOS CE Association Servers Debian check IPS check check check OpenIndiana OpenIndiana Workstation, Servers Ubuntu check IPS check check NexenStor Nexenta Storage APT check Tribblix Peter Tribble Workstation, Servers Slackware check SVR4 check check check DilOS igork Workstation, Servers check APT check check check check Unmaintained Spins Project Provider Focus Open Source Packaging x86 SPARC v9os MilaX Server check IPS check XStreamOS Sonicle Server check","title":"Distributions"},{"location":"about/distro/#the-illumos-family","text":"","title":"the illumos family"},{"location":"about/distro/#introduction","text":"Similar to other operating systems, there are many different OS distributions based on the common illumos ecosystem. Some of them are maintained by enthusiasts, others are primarily developed by commercial companies with their own priorities and focus, and some mainly differ in their packaging systems. Most of these projects contribute back to the common core set of software, which the illumos project is all about.","title":"Introduction"},{"location":"about/distro/#comparison","text":"All illumos-derived systems should include our common technologies . Not all distributions have the latest features or run on both x86 and SPARC. For major feature differences, the following chart may be helpful.","title":"Comparison"},{"location":"about/distro/#active-spins","text":"Project Provider Focus Linux Comparison Open Source Packaging x86 SPARC KVM LX SmartOS Joyent Hypervisor CoreOS check pkgsrc check check check OmniOS CE OmniOS CE Association Servers Debian check IPS check check check OpenIndiana OpenIndiana Workstation, Servers Ubuntu check IPS check check NexenStor Nexenta Storage APT check Tribblix Peter Tribble Workstation, Servers Slackware check SVR4 check check check DilOS igork Workstation, Servers check APT check check check check","title":"Active Spins"},{"location":"about/distro/#unmaintained-spins","text":"Project Provider Focus Open Source Packaging x86 SPARC v9os MilaX Server check IPS check XStreamOS Sonicle Server check","title":"Unmaintained Spins"},{"location":"about/faq/","text":"Quick Links Security Information Manual pages Mailing lists Bug reporting What is the objective of the illumos project? illumos is a fully open community project to develop a reliable and scalable operating system. It began as a fork of the former OpenSolaris operating system. Our goal is to foster open development of technologies for the 21 st century while building on a twenty-year heritage, but free from the oversight of a single corporate entity and the resulting challenges thereof. While our code base has a long history and many engineering traditions attached to it, our development processes are being reinvented in an attempt to remove barriers while maintaining consistently high code quality. How do I download the software? The source code developed by the project is a fork of the Sun/Oracle code base referred to as \"OS/Net\" or \"ON\" (short for Operating System/Networking). It is the home of the technologies that previously defined OpenSolaris and Solaris, such as the kernel, network stack, filesystems, and device drivers, and all of the basic userland libraries and applications. The illumos code base forms the foundation of distributions . To use the operating system, just download and install one of the distributions. To download the source code, review How To Build illumos . You can also browse and search . Is illumos free software (open source)? The bulk of the illumos source code is available under the Common Development and Distribution License (CDDL), an OSI-approved free software license based on the Mozilla Public License (MPL). There are some components with other licenses including BSD and MIT. We also include some software with the GNU General Public License (GPL) or the Lesser/Library General Public License (LGPL). There still remain some binary-only, closed source components that we inherited from Oracle which we are working to replace. Unlike OpenSolaris, we do not require a closed source compiler. Is illumos a community project? Yes! Multiple community groups and interests (including people like you!) are stakeholders in the project, and anyone and everyone is welcome to contribute . illumos was initiated by then-employees of Nexenta in collaboration with former OpenSolaris community members and volunteers. While companies including Nexenta, Joyent, and Delphix sponsor some of the work in illumos, the project is independent of their business decisions. illumos exists as a common base for multiple commercial and community distributions. How do I start contributing? illumos thrives on the efforts of its contributors. Have a look at the guide on How To Contribute if you want to submit code. If you want to help in other ways then have a look at the Mailing Lists . Most of the developers can be found on IRC and you're invited to drop in and say \"hi!\" How do I build illumos? See How To Build illumos . How do I build a distribution based on illumos? OpenSolaris was historically difficult to build as a distribution because it was assembled by many separate teams at Sun. The illumos community distributions are working to make this easier. Some distributions have documented their build processes. Is illumos compatible with Solaris/OpenSolaris? illumos is very likely to be compatible with Solaris/OpenSolaris binaries and drivers before Oracle closed the gate in 2010. After that, all bets are off. Solaris 10 update 11, and Solaris 11, and beyond, may contain incompatible changes. What changes does illumos maintain? Open internationalization libraries and data files. Open replacements for closed binaries. Code that Oracle may choose to no longer maintain. Community enhancements to critical technologies like DTrace and ZFS. New open technologies. Patches/bug-fixes we have independently developed, including security fixes. Changes to ease community development. ...and more! Do you track Oracle changes? We originally intended to closely follow upstream changes, but became a fork by necessity because Oracle's software is no longer open source. We now represent the open future of the code base after Sun. Will you work on sending illumos changes upstream? We would like Oracle to use changes from illumos, as long as they are willing to abide by the open source license for our code. Where we use code from other free software projects, we also respect their licenses and keep the source open. Why did you announce the project after it was set up and much of the code written? This decision was made for multiple reasons. The signal to noise ratio in the OpenSolaris community had grown low, and announcing the project would have distracted the developers from actual code and contribution. Most vocal members talked about opening the code rather than writing it. illumos chose the opposite. Before the formal announcement, we reached out to developers in the community and solicited their help and participation. And the name illumos? We started off with the codename \"FreeON\", and later realized it is used by an existing project. We finally settled on illumos, after many hours of suggestions and counter-suggestions. illumos (pronounced i-llu-MOS and written in lowercase) ties in with Sun and light. It's the closest to ON we could get!","title":"FAQ"},{"location":"about/faq/#quick-links","text":"Security Information Manual pages Mailing lists Bug reporting","title":"Quick Links"},{"location":"about/faq/#what-is-the-objective-of-the-illumos-project","text":"illumos is a fully open community project to develop a reliable and scalable operating system. It began as a fork of the former OpenSolaris operating system. Our goal is to foster open development of technologies for the 21 st century while building on a twenty-year heritage, but free from the oversight of a single corporate entity and the resulting challenges thereof. While our code base has a long history and many engineering traditions attached to it, our development processes are being reinvented in an attempt to remove barriers while maintaining consistently high code quality.","title":"What is the objective of the illumos project?"},{"location":"about/faq/#how-do-i-download-the-software","text":"The source code developed by the project is a fork of the Sun/Oracle code base referred to as \"OS/Net\" or \"ON\" (short for Operating System/Networking). It is the home of the technologies that previously defined OpenSolaris and Solaris, such as the kernel, network stack, filesystems, and device drivers, and all of the basic userland libraries and applications. The illumos code base forms the foundation of distributions . To use the operating system, just download and install one of the distributions. To download the source code, review How To Build illumos . You can also browse and search .","title":"How do I download the software?"},{"location":"about/faq/#is-illumos-free-software-open-source","text":"The bulk of the illumos source code is available under the Common Development and Distribution License (CDDL), an OSI-approved free software license based on the Mozilla Public License (MPL). There are some components with other licenses including BSD and MIT. We also include some software with the GNU General Public License (GPL) or the Lesser/Library General Public License (LGPL). There still remain some binary-only, closed source components that we inherited from Oracle which we are working to replace. Unlike OpenSolaris, we do not require a closed source compiler.","title":"Is illumos free software (open source)?"},{"location":"about/faq/#is-illumos-a-community-project","text":"Yes! Multiple community groups and interests (including people like you!) are stakeholders in the project, and anyone and everyone is welcome to contribute . illumos was initiated by then-employees of Nexenta in collaboration with former OpenSolaris community members and volunteers. While companies including Nexenta, Joyent, and Delphix sponsor some of the work in illumos, the project is independent of their business decisions. illumos exists as a common base for multiple commercial and community distributions.","title":"Is illumos a community project?"},{"location":"about/faq/#how-do-i-start-contributing","text":"illumos thrives on the efforts of its contributors. Have a look at the guide on How To Contribute if you want to submit code. If you want to help in other ways then have a look at the Mailing Lists . Most of the developers can be found on IRC and you're invited to drop in and say \"hi!\"","title":"How do I start contributing?"},{"location":"about/faq/#how-do-i-build-illumos","text":"See How To Build illumos .","title":"How do I build illumos?"},{"location":"about/faq/#how-do-i-build-a-distribution-based-on-illumos","text":"OpenSolaris was historically difficult to build as a distribution because it was assembled by many separate teams at Sun. The illumos community distributions are working to make this easier. Some distributions have documented their build processes.","title":"How do I build a distribution based on illumos?"},{"location":"about/faq/#is-illumos-compatible-with-solarisopensolaris","text":"illumos is very likely to be compatible with Solaris/OpenSolaris binaries and drivers before Oracle closed the gate in 2010. After that, all bets are off. Solaris 10 update 11, and Solaris 11, and beyond, may contain incompatible changes.","title":"Is illumos compatible with Solaris/OpenSolaris?"},{"location":"about/faq/#what-changes-does-illumos-maintain","text":"Open internationalization libraries and data files. Open replacements for closed binaries. Code that Oracle may choose to no longer maintain. Community enhancements to critical technologies like DTrace and ZFS. New open technologies. Patches/bug-fixes we have independently developed, including security fixes. Changes to ease community development. ...and more!","title":"What changes does illumos maintain?"},{"location":"about/faq/#do-you-track-oracle-changes","text":"We originally intended to closely follow upstream changes, but became a fork by necessity because Oracle's software is no longer open source. We now represent the open future of the code base after Sun.","title":"Do you track Oracle changes?"},{"location":"about/faq/#will-you-work-on-sending-illumos-changes-upstream","text":"We would like Oracle to use changes from illumos, as long as they are willing to abide by the open source license for our code. Where we use code from other free software projects, we also respect their licenses and keep the source open.","title":"Will you work on sending illumos changes upstream?"},{"location":"about/faq/#why-did-you-announce-the-project-after-it-was-set-up-and-much-of-the-code-written","text":"This decision was made for multiple reasons. The signal to noise ratio in the OpenSolaris community had grown low, and announcing the project would have distracted the developers from actual code and contribution. Most vocal members talked about opening the code rather than writing it. illumos chose the opposite. Before the formal announcement, we reached out to developers in the community and solicited their help and participation.","title":"Why did you announce the project after it was set up and much of the code written?"},{"location":"about/faq/#and-the-name-illumos","text":"We started off with the codename \"FreeON\", and later realized it is used by an existing project. We finally settled on illumos, after many hours of suggestions and counter-suggestions. illumos (pronounced i-llu-MOS and written in lowercase) ties in with Sun and light. It's the closest to ON we could get!","title":"And the name illumos?"},{"location":"about/features/","text":"Introduction illumos provides a number of advanced features for downstream distributions and users to utilize. Filesystems OpenZFS We are the canonical upstream for the OpenZFS Project . ZFS provides excellent data integrity, performance, flexibility and ease-of-use you simply can't find in other filesystems. ZFS combines traditional concepts like volume management and filesystems with a pooled storage that does for disks what virtual memory did for RAM. ZFS was developed at Sun Microsystems in the early 2000s and released as open source in 2005 as part of the OpenSolaris project. OpenZFS was announced in 2013. For a more detailed history, please see OpenZFS History . ZFS allows you to: Group devices into a single storage pool with various redundancy characteristics Create tiered storage with log and cache devices Create read-only atomic filesystem snapshots Create writable clones of snapshots Send snapshots as a byte stream -- which you can redirect to a file, or send across the network! Dynamically modify dataset (filesystem) attributes Delegate dataset management to non-root users or groups ZFS includes online checksumming of every block, on-demand scrubbing of disks, and -- in redundant configurations -- self-healing of bad data with good. ZFS has been ported to Linux , FreeBSD , OS X -- and a Windows port is in progress as of late 2017! Others illumos provides a number of other filesystems , including: Loopback Temporary UFS HSFS NFS FAT CIFS UDFS Virtualization illumos offers a number of virtualization options, including lightweight \"operating system zones\", Linux emulated zones, and KVM. Terminology In illumos, the global context is referred to as the global zone , or GZ . Other zone \"brands\" are non-global zones , NGZ , or simply zones . Native OS Native OS zones provide an isolated illumos environment to run your applications in. LX (Linux Emulation) LX-branded zones provide the Linux syscall interface allowing you to run most Linux applications. While not yet upstreamed, several illumos distributions support it. KVM KVM (and QEMU) was ported to illumos in 2011, and can be used on Intel CPUs with VMX and EPT support. bhyve (Under development!) Joyent is in the process of porting FreeBSD's bhyve to illumos. It should be available for testing soon! Introspection and Debugging DTrace DTrace allows for system-wide tracing of a kernel for debugging applications and the operating system, as well as gathering profiling data. DTrace along with MDB allows you to leverage CTF data to inspect userland and kernel structures. Modular Debugger MDB, the illumos modular debugger, allows you to inspect running processes, core files, kernel state, and kernel crash dumps. KMDB also allows controlling the execution of a running kernel. Fault Management Service Management SMF helps administrators manage services running on the system. SMF can take care of tracking service dependencies, restart policies, disabling perpetually crashing applications, and more. Firewall illumos uses ipfilter for firewalling. Using ipfilter you can create firewalls not just for the host system, but also for zones and hardware virtualized systems. Virtual Networking dladm(1M) allows users to create Virtual NICs, bridges, and in some distributions overlay networks . Security","title":"Features"},{"location":"about/features/#introduction","text":"illumos provides a number of advanced features for downstream distributions and users to utilize.","title":"Introduction"},{"location":"about/features/#filesystems","text":"","title":"Filesystems"},{"location":"about/features/#openzfs","text":"We are the canonical upstream for the OpenZFS Project . ZFS provides excellent data integrity, performance, flexibility and ease-of-use you simply can't find in other filesystems. ZFS combines traditional concepts like volume management and filesystems with a pooled storage that does for disks what virtual memory did for RAM. ZFS was developed at Sun Microsystems in the early 2000s and released as open source in 2005 as part of the OpenSolaris project. OpenZFS was announced in 2013. For a more detailed history, please see OpenZFS History . ZFS allows you to: Group devices into a single storage pool with various redundancy characteristics Create tiered storage with log and cache devices Create read-only atomic filesystem snapshots Create writable clones of snapshots Send snapshots as a byte stream -- which you can redirect to a file, or send across the network! Dynamically modify dataset (filesystem) attributes Delegate dataset management to non-root users or groups ZFS includes online checksumming of every block, on-demand scrubbing of disks, and -- in redundant configurations -- self-healing of bad data with good. ZFS has been ported to Linux , FreeBSD , OS X -- and a Windows port is in progress as of late 2017!","title":"OpenZFS"},{"location":"about/features/#others","text":"illumos provides a number of other filesystems , including: Loopback Temporary UFS HSFS NFS FAT CIFS UDFS","title":"Others"},{"location":"about/features/#virtualization","text":"illumos offers a number of virtualization options, including lightweight \"operating system zones\", Linux emulated zones, and KVM. Terminology In illumos, the global context is referred to as the global zone , or GZ . Other zone \"brands\" are non-global zones , NGZ , or simply zones .","title":"Virtualization"},{"location":"about/features/#native-os","text":"Native OS zones provide an isolated illumos environment to run your applications in.","title":"Native OS"},{"location":"about/features/#lx-linux-emulation","text":"LX-branded zones provide the Linux syscall interface allowing you to run most Linux applications. While not yet upstreamed, several illumos distributions support it.","title":"LX (Linux Emulation)"},{"location":"about/features/#kvm","text":"KVM (and QEMU) was ported to illumos in 2011, and can be used on Intel CPUs with VMX and EPT support.","title":"KVM"},{"location":"about/features/#bhyve-under-development","text":"Joyent is in the process of porting FreeBSD's bhyve to illumos. It should be available for testing soon!","title":"bhyve (Under development!)"},{"location":"about/features/#introspection-and-debugging","text":"","title":"Introspection and Debugging"},{"location":"about/features/#dtrace","text":"DTrace allows for system-wide tracing of a kernel for debugging applications and the operating system, as well as gathering profiling data. DTrace along with MDB allows you to leverage CTF data to inspect userland and kernel structures.","title":"DTrace"},{"location":"about/features/#modular-debugger","text":"MDB, the illumos modular debugger, allows you to inspect running processes, core files, kernel state, and kernel crash dumps. KMDB also allows controlling the execution of a running kernel.","title":"Modular Debugger"},{"location":"about/features/#fault-management","text":"","title":"Fault Management"},{"location":"about/features/#service-management","text":"SMF helps administrators manage services running on the system. SMF can take care of tracking service dependencies, restart policies, disabling perpetually crashing applications, and more.","title":"Service Management"},{"location":"about/features/#firewall","text":"illumos uses ipfilter for firewalling. Using ipfilter you can create firewalls not just for the host system, but also for zones and hardware virtualized systems.","title":"Firewall"},{"location":"about/features/#virtual-networking","text":"dladm(1M) allows users to create Virtual NICs, bridges, and in some distributions overlay networks .","title":"Virtual Networking"},{"location":"about/features/#security","text":"","title":"Security"},{"location":"about/history/","text":"A Brief History of Everything^WUNIX In the Second Age of Computing, the UNIX operating system emerged, in pieces, from the minds of Ken Thompson, Dennis Ritchie, Doug McIllroy and bright sparks from AT Ts Bell Labs. From there, the river diverges almost as much as our metaphors. However, the forks we care about start with BSD and System V UNIX R4, which begat SunOS and Solaris. Other documents detail this history in greater depth (and to a large degree they do not necessarily concern us.) In 2005 Sun Microsystems released Solaris 10 which contains several truly innovative features we continue to rely on to this day. Just as importantly, however, Sun also open-sourced the operating system as OpenSolaris. While there were a few governance missteps along the way, it was a bold move. If you're interested in the history of OpenSolaris, Jim Grisanzio has written an in-depth piece on it . In 2010 Oracle acquired Sun, and silently closed the gate . The source code was no longer updated, communications to the open source community stopped. OpenSolaris was effectively dead. From this, however, project founder Garrett D'Amore took the last drop of the gate and announced illumos in mid-2010. For a longer, more flavorful description of Solaris and illumos history, Bryan Cantrill's Fork Yeah! The Rise and Development of illumos talk from USENIX LISA 2011 should be considered required viewing. (Note: Potentially not suitable for minors.) Since 2010, a number of companies have built their businesses around illumos, or are running on one of the distributions built from it. For a very incomplete list, please see who is using illumos .","title":"Overview"},{"location":"about/history/#a-brief-history-of-everythingwunix","text":"In the Second Age of Computing, the UNIX operating system emerged, in pieces, from the minds of Ken Thompson, Dennis Ritchie, Doug McIllroy and bright sparks from AT Ts Bell Labs. From there, the river diverges almost as much as our metaphors. However, the forks we care about start with BSD and System V UNIX R4, which begat SunOS and Solaris. Other documents detail this history in greater depth (and to a large degree they do not necessarily concern us.) In 2005 Sun Microsystems released Solaris 10 which contains several truly innovative features we continue to rely on to this day. Just as importantly, however, Sun also open-sourced the operating system as OpenSolaris. While there were a few governance missteps along the way, it was a bold move. If you're interested in the history of OpenSolaris, Jim Grisanzio has written an in-depth piece on it . In 2010 Oracle acquired Sun, and silently closed the gate . The source code was no longer updated, communications to the open source community stopped. OpenSolaris was effectively dead. From this, however, project founder Garrett D'Amore took the last drop of the gate and announced illumos in mid-2010. For a longer, more flavorful description of Solaris and illumos history, Bryan Cantrill's Fork Yeah! The Rise and Development of illumos talk from USENIX LISA 2011 should be considered required viewing. (Note: Potentially not suitable for minors.) Since 2010, a number of companies have built their businesses around illumos, or are running on one of the distributions built from it. For a very incomplete list, please see who is using illumos .","title":"A Brief History of Everything^WUNIX"},{"location":"about/leadership/","text":"Leadership There are two levels of leadership in the illumos project: Members of the Dev Council, and Request To Integrate (RTI) Advocates. Developer Council The Dev Council is a technical steering committee drawn from well-known developers of Solaris, whose role is to make high-level architecture decisions. Member Organization Adam Leventhal Delphix Bryan Cantrill Joyent Garrett D'Amore unaffiliated Gordon Ross Nexenta Rich Lowe unaffiliated Advocates Advocates are the gatekeepers to the illumos core: they have the ultimate say in what code is accepted, and their primary job is to ensure quality and stability for all illumos users. Advocates are appointed by the illumos Developer Council. Member Handle Organization Expertise Albert Lee trisk SoftNAS Storage, drivers, userland. Chris Siden csiden Delphix ZFS Dan McDonald danmcd Joyent Cryptography, Networking Garrett D'Amore gdamore unaffiliated Drivers, etc. Gordon Ross gwr Nexenta CIFS/SMB, VFS layer, ZFS ACLs, etc. Hans Rosenfeld Woodstock Joyent Misc. Joshua M. Clulow LeftWing Joyent Misc. Matt Ahrens mahrens Delphix ZFS Rich Lowe richlowe unaffiliated Misc. Robert Mustacchi rmustacc Joyent Virtualization, SMF, PCI, MDB, DTrace, x86 platform, etc. Life as an Advocate Contributors send you patches, build results, test results, check results, review results. If you're happy with all of this, you integrate the change on their behalf. You should have received a diff in hg export or similar format, including a full set of metadata (Reviewed by: lines, authorship, etc.). If you didn't, feel free to ask whoever submitted the patch to submit it in this format, you shouldn't have to go search the list archives for reviewers. Using your judgment The whole reason we have RTI advocates or, if you're not steeped in Sun-ish history, follow a \"pull\" model, is that it provides us with a step in the process where in theory experienced people can exercise their (in theory) better judgment, and everyone can benefit from less breakage. This is 95% of the work involved. Things Advocates Focus On Do you know the areas of the system affected well enough to even have an opinion? If not, you should probably leave this for someone else who might (note that we don't have perfect coverage, so you can't just punt on everything). Is the commit well-formed? The author line should include both a name and a well formed email address, and should match the actual author. The format here is very important for SCM export. Don't just assume it's fine! Is the pbchk output as clean as you want it to be? In general, there should be no noise from any check, however some areas are not clean for the various style checks, you should check this is actually the case (in general, areas that are innately dirty are very dirty, and stand out). Is the users build clean? They'll be giving you a mail_msg file, it will ideally be absolutely free of any noise. In practice, there are times when there will be noise for other reasons, not related to their integration. You should check! One thing to double check is that lint was actually run. It's surprisingly easy to glance at an incremental build, and not notice that the source was never linted. Did the submitter test their changes to your satisfaction? Can you think of anything else that should be tested? Ask for it! Did the testing actually test the area changed by the patch? Check! Read the diff. Check that nothing stands out that reviewers may have missed Feel free to run a build yourself, if you're paranoid, but don't feel compelled to.","title":"Leadership"},{"location":"about/leadership/#leadership","text":"There are two levels of leadership in the illumos project: Members of the Dev Council, and Request To Integrate (RTI) Advocates.","title":"Leadership"},{"location":"about/leadership/#developer-council","text":"The Dev Council is a technical steering committee drawn from well-known developers of Solaris, whose role is to make high-level architecture decisions. Member Organization Adam Leventhal Delphix Bryan Cantrill Joyent Garrett D'Amore unaffiliated Gordon Ross Nexenta Rich Lowe unaffiliated","title":"Developer Council"},{"location":"about/leadership/#advocates","text":"Advocates are the gatekeepers to the illumos core: they have the ultimate say in what code is accepted, and their primary job is to ensure quality and stability for all illumos users. Advocates are appointed by the illumos Developer Council. Member Handle Organization Expertise Albert Lee trisk SoftNAS Storage, drivers, userland. Chris Siden csiden Delphix ZFS Dan McDonald danmcd Joyent Cryptography, Networking Garrett D'Amore gdamore unaffiliated Drivers, etc. Gordon Ross gwr Nexenta CIFS/SMB, VFS layer, ZFS ACLs, etc. Hans Rosenfeld Woodstock Joyent Misc. Joshua M. Clulow LeftWing Joyent Misc. Matt Ahrens mahrens Delphix ZFS Rich Lowe richlowe unaffiliated Misc. Robert Mustacchi rmustacc Joyent Virtualization, SMF, PCI, MDB, DTrace, x86 platform, etc.","title":"Advocates"},{"location":"about/leadership/#life-as-an-advocate","text":"Contributors send you patches, build results, test results, check results, review results. If you're happy with all of this, you integrate the change on their behalf. You should have received a diff in hg export or similar format, including a full set of metadata (Reviewed by: lines, authorship, etc.). If you didn't, feel free to ask whoever submitted the patch to submit it in this format, you shouldn't have to go search the list archives for reviewers.","title":"Life as an Advocate"},{"location":"about/leadership/#using-your-judgment","text":"The whole reason we have RTI advocates or, if you're not steeped in Sun-ish history, follow a \"pull\" model, is that it provides us with a step in the process where in theory experienced people can exercise their (in theory) better judgment, and everyone can benefit from less breakage. This is 95% of the work involved.","title":"Using your judgment"},{"location":"about/leadership/#things-advocates-focus-on","text":"Do you know the areas of the system affected well enough to even have an opinion? If not, you should probably leave this for someone else who might (note that we don't have perfect coverage, so you can't just punt on everything). Is the commit well-formed? The author line should include both a name and a well formed email address, and should match the actual author. The format here is very important for SCM export. Don't just assume it's fine! Is the pbchk output as clean as you want it to be? In general, there should be no noise from any check, however some areas are not clean for the various style checks, you should check this is actually the case (in general, areas that are innately dirty are very dirty, and stand out). Is the users build clean? They'll be giving you a mail_msg file, it will ideally be absolutely free of any noise. In practice, there are times when there will be noise for other reasons, not related to their integration. You should check! One thing to double check is that lint was actually run. It's surprisingly easy to glance at an incremental build, and not notice that the source was never linted. Did the submitter test their changes to your satisfaction? Can you think of anything else that should be tested? Ask for it! Did the testing actually test the area changed by the patch? Check! Read the diff. Check that nothing stands out that reviewers may have missed Feel free to run a build yourself, if you're paranoid, but don't feel compelled to.","title":"Things Advocates Focus On"},{"location":"about/logo-1/","text":"svg scalable eps scalable png 64px png 166px png 2057px","title":"Logo 1"},{"location":"about/logo-2/","text":"svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90px wide png 139px wide png 267px wide png 3320px wide","title":"Logo 2"},{"location":"about/logo-3/","text":"svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90 px wide png 139 px wide png 267 px wide png 3320 px wide","title":"Logo 3"},{"location":"about/logo-4/","text":"png 32 px png 63 px png 26 px","title":"Logo 4"},{"location":"about/logo-5/","text":"png 32 px png 63 px png 126 px","title":"Logo 5"},{"location":"about/logo/","text":"The illumos logo The illumos mark is a trademark, and it is important to note that there are some restrictions on its use. The logo itself was created by Rowan for illumos. Download Zip of all logos. Usage The \"Powered by\" versions may be used on websites, login banners, distribution media, or other situations to indicate that either a service is running on the illumos operating system, or that a distribution is based upon it. Other uses are unacceptable. The other icons may be used for personal use (for example to print a T-shirt). All other use must be approved by Garrett D'Amore. For most uses, the full-color phoenix with the illumos name next to it is preferred. Use the \"large phoenix\" or \"small phoenix\" version according to how much space is available. The phoenix without the illumos name may be used where the name would be inappropriate. Do not change the size or position of any parts of the logo relative to each other. Only use the whole logo as a unit, exactly as it is provided. You may scale the vector formats up or down as required. The PNG format should only be scaled down. In all cases, the proportions must be constrained so the logo is not squeezed or stretched. Do not make the logo so small that it becomes unreadable. Do not alter the colors in the logo. Do not use the logo at an angle, and do not distort or warp it. Generally, maintain a clear space on all four sides of the logo. This space should be equal to approximately 25% of the height of the phoenix. The font used in the logo is Museo Sans. Some versions use Museo Slab, but Museo Sans is preferred. There are two versions of the text, one which is optimized for smaller sizes (where the ratio of the word \"illumos\" to the logo is larger), and one for larger displays (where the text is a bit smaller in proportion). Examples Logo Formats svg scalable eps scalable png 64px png 166px png 2057px svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90px wide png 139px wide png 267px wide png 3320px wide svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90 px wide png 139 px wide png 267 px wide png 3320 px wide png 32 px png 63 px png 26 px png 32 px png 63 px png 126 px These versions are optimized for screen display. If you need an alternate color space (CMYK, or single or two color only), please send an email to Garrett D'Amore .","title":"Logo"},{"location":"about/logo/#the-illumos-logo","text":"The illumos mark is a trademark, and it is important to note that there are some restrictions on its use. The logo itself was created by Rowan for illumos.","title":"The illumos logo"},{"location":"about/logo/#download","text":"Zip of all logos.","title":"Download"},{"location":"about/logo/#usage","text":"The \"Powered by\" versions may be used on websites, login banners, distribution media, or other situations to indicate that either a service is running on the illumos operating system, or that a distribution is based upon it. Other uses are unacceptable. The other icons may be used for personal use (for example to print a T-shirt). All other use must be approved by Garrett D'Amore. For most uses, the full-color phoenix with the illumos name next to it is preferred. Use the \"large phoenix\" or \"small phoenix\" version according to how much space is available. The phoenix without the illumos name may be used where the name would be inappropriate. Do not change the size or position of any parts of the logo relative to each other. Only use the whole logo as a unit, exactly as it is provided. You may scale the vector formats up or down as required. The PNG format should only be scaled down. In all cases, the proportions must be constrained so the logo is not squeezed or stretched. Do not make the logo so small that it becomes unreadable. Do not alter the colors in the logo. Do not use the logo at an angle, and do not distort or warp it. Generally, maintain a clear space on all four sides of the logo. This space should be equal to approximately 25% of the height of the phoenix. The font used in the logo is Museo Sans. Some versions use Museo Slab, but Museo Sans is preferred. There are two versions of the text, one which is optimized for smaller sizes (where the ratio of the word \"illumos\" to the logo is larger), and one for larger displays (where the text is a bit smaller in proportion).","title":"Usage"},{"location":"about/logo/#examples","text":"Logo Formats svg scalable eps scalable png 64px png 166px png 2057px svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90px wide png 139px wide png 267px wide png 3320px wide svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90 px wide png 139 px wide png 267 px wide png 3320 px wide png 32 px png 63 px png 26 px png 32 px png 63 px png 126 px These versions are optimized for screen display. If you need an alternate color space (CMYK, or single or two color only), please send an email to Garrett D'Amore .","title":"Examples"},{"location":"about/who/","text":"Who uses illumos? Many communities and businesses base their products and services on illumos. In addition to providing the core for projects and products, components of illumos have been ported to other operating systems. Organizations Organization Description FreeBSD Incorporates ZFS, DTrace, mdb Apple Incorporates DTrace Joyent Public and on-prem cloud, object storage Lucera Finanial infrastructure services Delphix Database virtualization Nexenta Storage appliance EveryCity Managed cloud services Project FIFO On-prem cloud Circonus Monitoring services Pobox Email services Topicbox Mailing list services DanubeCloud On-prem cloud Collaboration Cross-pollination and collaboration history. 2018 Joyent and OpenBSD collaborate in Meltdown design mitigations 2016 Ubuntu incorporates ZFS 2013 OpenZFS on OS X 2010 NetBSD began porting DTrace in 2010 2009 FreeBSD integrated DTrace in 7.1 2008 FreeBSD integrated ZFS in 7.0 LLNL created the ZFS On Linux project 2007 Apple integrated DTrace in Mac OS X 10.5 (2007)","title":"Who uses illumos?"},{"location":"about/who/#who-uses-illumos","text":"Many communities and businesses base their products and services on illumos. In addition to providing the core for projects and products, components of illumos have been ported to other operating systems.","title":"Who uses illumos?"},{"location":"about/who/#organizations","text":"Organization Description FreeBSD Incorporates ZFS, DTrace, mdb Apple Incorporates DTrace Joyent Public and on-prem cloud, object storage Lucera Finanial infrastructure services Delphix Database virtualization Nexenta Storage appliance EveryCity Managed cloud services Project FIFO On-prem cloud Circonus Monitoring services Pobox Email services Topicbox Mailing list services DanubeCloud On-prem cloud","title":"Organizations"},{"location":"about/who/#collaboration","text":"Cross-pollination and collaboration history.","title":"Collaboration"},{"location":"about/who/#2018","text":"Joyent and OpenBSD collaborate in Meltdown design mitigations","title":"2018"},{"location":"about/who/#2016","text":"Ubuntu incorporates ZFS","title":"2016"},{"location":"about/who/#2013","text":"OpenZFS on OS X","title":"2013"},{"location":"about/who/#2010","text":"NetBSD began porting DTrace in 2010","title":"2010"},{"location":"about/who/#2009","text":"FreeBSD integrated DTrace in 7.1","title":"2009"},{"location":"about/who/#2008","text":"FreeBSD integrated ZFS in 7.0 LLNL created the ZFS On Linux project","title":"2008"},{"location":"about/who/#2007","text":"Apple integrated DTrace in Mac OS X 10.5 (2007)","title":"2007"},{"location":"community/","text":"Community Introduction The illumos community is small but active. From hobbyists to businesses pushing massive cloud deployments, we welcome all comers. We try to be very helpful and inclusive! It's not uncommon to see folks answering questions ranging from newbie to helping debug complicated deep-kernel black magic. The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators. Mailing Lists Please refer to this page for both illumos project and related community mailing list information. IRC Channels Project Network Channel illumos freenode #illumos SmartOS freenode #smartos OmniOS freenode #omnios OpenIndiana freenode #openindiana OpenZFS freenode #openzfs","title":"Overview"},{"location":"community/#community","text":"","title":"Community"},{"location":"community/#introduction","text":"The illumos community is small but active. From hobbyists to businesses pushing massive cloud deployments, we welcome all comers. We try to be very helpful and inclusive! It's not uncommon to see folks answering questions ranging from newbie to helping debug complicated deep-kernel black magic. The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators.","title":"Introduction"},{"location":"community/#mailing-lists","text":"Please refer to this page for both illumos project and related community mailing list information.","title":"Mailing Lists"},{"location":"community/#irc-channels","text":"Project Network Channel illumos freenode #illumos SmartOS freenode #smartos OmniOS freenode #omnios OpenIndiana freenode #openindiana OpenZFS freenode #openzfs","title":"IRC Channels"},{"location":"community/events/","text":"Events Upcoming FrOSCon 2018 Where: Sankt Augustin, Germany When: 25 + 26 August 2018 Details: https://www.froscon.de/en/ Who: Thomas Merkel Sebastian Wiedenroth Add yourself! Past 2018 CLT 2018 Where: Chemnitz, Germany When: 10 + 11 March 2018 Details: https://chemnitzer.linux-tage.de/2018/en/ Who: Hans Rosenfeld Thomas Merkel Sebastian Wiedenroth FOSDEM 2018 Where: Brussels, Belgium When: 3 + 4 February 2018 Details: https://fosdem.org/2018/ Who: Hans Rosenfeld Thomas Merkel (SmartOS, pkgsrc) Sebastian Wiedenroth (SmartOS, pkgsrc) Jorge Schrauwen (SaltStack SmartOS/illumos support) Thomas Wagner (SFE Project, SpecFiles Extra) Peter Tribble Andy Fiddaman (OmniOS Community Edition) Dominik Hassler (OmniOS Community Edition) 2017 FOSDEM 2017 Where: Brussels, Belgium When: 4 + 5 February 2017 Details: https://archive.fosdem.org/2017/ Who: Hans Rosenfeld Olaf Bohlen (OI/sparc, AI) Jorge Schrauwen (SaltStack SmartOS/illumos support) Sebastian Wiedenroth (pkgsrc, SmartOS) Till Wegm\u00fcller (PXEBoot, NFSRoot, AI, Distro Constructor, pkg5, illumos/OpenPower) Peter Tribble Thomas Merkel Adam \u0160tevko (OI/infrastructure, OI/CI, ansible illumos modules) Alexander Pyhalov Thomas Wagner (SFE, SpecFiles Extra) Our booth is in building K, Level 1, Group A Table 8 2016 FOSDEM 2016 Where: Brussels, Belgium When: 30 + 31 January 2016 Details: https://archive.fosdem.org/2016/ Who: Hans Rosenfeld Jorge Schrauwen Olaf Bohlen (sysidcfg toolset and oi-hipster for sparc) Sebastian Wiedenroth Thomas Merkel Peter Tribble Dan McDonald ( illumos at 5, 12 noon Sunday, Janson ) Thomas Wagner ( http://sfe.opencsw.org/ ) We have our table in building K, Level 1, Group A, Table 7.","title":"Events"},{"location":"community/events/#events","text":"","title":"Events"},{"location":"community/events/#upcoming","text":"","title":"Upcoming"},{"location":"community/events/#froscon-2018","text":"Where: Sankt Augustin, Germany When: 25 + 26 August 2018 Details: https://www.froscon.de/en/ Who: Thomas Merkel Sebastian Wiedenroth Add yourself!","title":"FrOSCon 2018"},{"location":"community/events/#past","text":"","title":"Past"},{"location":"community/events/#2018","text":"","title":"2018"},{"location":"community/events/#clt-2018","text":"Where: Chemnitz, Germany When: 10 + 11 March 2018 Details: https://chemnitzer.linux-tage.de/2018/en/ Who: Hans Rosenfeld Thomas Merkel Sebastian Wiedenroth","title":"CLT 2018"},{"location":"community/events/#fosdem-2018","text":"Where: Brussels, Belgium When: 3 + 4 February 2018 Details: https://fosdem.org/2018/ Who: Hans Rosenfeld Thomas Merkel (SmartOS, pkgsrc) Sebastian Wiedenroth (SmartOS, pkgsrc) Jorge Schrauwen (SaltStack SmartOS/illumos support) Thomas Wagner (SFE Project, SpecFiles Extra) Peter Tribble Andy Fiddaman (OmniOS Community Edition) Dominik Hassler (OmniOS Community Edition)","title":"FOSDEM 2018"},{"location":"community/events/#2017","text":"","title":"2017"},{"location":"community/events/#fosdem-2017","text":"Where: Brussels, Belgium When: 4 + 5 February 2017 Details: https://archive.fosdem.org/2017/ Who: Hans Rosenfeld Olaf Bohlen (OI/sparc, AI) Jorge Schrauwen (SaltStack SmartOS/illumos support) Sebastian Wiedenroth (pkgsrc, SmartOS) Till Wegm\u00fcller (PXEBoot, NFSRoot, AI, Distro Constructor, pkg5, illumos/OpenPower) Peter Tribble Thomas Merkel Adam \u0160tevko (OI/infrastructure, OI/CI, ansible illumos modules) Alexander Pyhalov Thomas Wagner (SFE, SpecFiles Extra) Our booth is in building K, Level 1, Group A Table 8","title":"FOSDEM 2017"},{"location":"community/events/#2016","text":"","title":"2016"},{"location":"community/events/#fosdem-2016","text":"Where: Brussels, Belgium When: 30 + 31 January 2016 Details: https://archive.fosdem.org/2016/ Who: Hans Rosenfeld Jorge Schrauwen Olaf Bohlen (sysidcfg toolset and oi-hipster for sparc) Sebastian Wiedenroth Thomas Merkel Peter Tribble Dan McDonald ( illumos at 5, 12 noon Sunday, Janson ) Thomas Wagner ( http://sfe.opencsw.org/ ) We have our table in building K, Level 1, Group A, Table 7.","title":"FOSDEM 2016"},{"location":"community/gsoc-application/","text":"Welcome to the Google Summer of Code! Let's start with some background about you. Name: Email address: IRC nickname on FreeNode: Field of study (and concentration, if any): Have you participated in an open source project before? If you have, which aspects did you enjoy most (or least)? If you have contributed code, can you describe the tools and languages you used, and link to commits? Have you been involved with illumos or a related community project (OpenIndiana, OmniOS, SmartOS, etc.)? Have you fixed any bite-sized bugs or contributed code to illumos? If so, please provide the issue IDs or the e-mail address used in the commit. Do you have an illumos distribution (OpenIndiana, OmniOS, SmartOS) currently running on your system? If so, describe your setup. Have you built illumos-gate from source and successfully upgraded your system to those bits? What piece of source code have you read and found most interesting? Why? What makes illumos interesting to you? Do you plan to stay involved after GSoC, and if so, in which areas? Is there anything else you'd like us to know about you? Will you have other obligations or time constraints during the GSoC period? Next, please describe your project. The goals you wish to achieve, in a nutshell: Quantifiable deliverables in terms of software, tests, and/or documentation: Your plan for implementing the features, and testing them: Rough outline of your development schedule, including milestones: What prior experience (coursework, internship, work experience) or expertise do you have relevant to your project? How does your proposal align with your goals after completing your current degree? Will you need us to provide access to hardware, specifications, or other resources? Do you have a particular person in mind as a mentor? With whom have you discussed your project previously on a public e-mail list or IRC channel?","title":"Student Application"},{"location":"community/gsoc-application/#welcome-to-the-google-summer-of-code","text":"","title":"Welcome to the Google Summer of Code!"},{"location":"community/gsoc-application/#lets-start-with-some-background-about-you","text":"Name: Email address: IRC nickname on FreeNode: Field of study (and concentration, if any): Have you participated in an open source project before? If you have, which aspects did you enjoy most (or least)? If you have contributed code, can you describe the tools and languages you used, and link to commits? Have you been involved with illumos or a related community project (OpenIndiana, OmniOS, SmartOS, etc.)? Have you fixed any bite-sized bugs or contributed code to illumos? If so, please provide the issue IDs or the e-mail address used in the commit. Do you have an illumos distribution (OpenIndiana, OmniOS, SmartOS) currently running on your system? If so, describe your setup. Have you built illumos-gate from source and successfully upgraded your system to those bits? What piece of source code have you read and found most interesting? Why? What makes illumos interesting to you? Do you plan to stay involved after GSoC, and if so, in which areas? Is there anything else you'd like us to know about you? Will you have other obligations or time constraints during the GSoC period?","title":"Let's start with some background about you."},{"location":"community/gsoc-application/#next-please-describe-your-project","text":"The goals you wish to achieve, in a nutshell: Quantifiable deliverables in terms of software, tests, and/or documentation: Your plan for implementing the features, and testing them: Rough outline of your development schedule, including milestones: What prior experience (coursework, internship, work experience) or expertise do you have relevant to your project? How does your proposal align with your goals after completing your current degree? Will you need us to provide access to hardware, specifications, or other resources? Do you have a particular person in mind as a mentor? With whom have you discussed your project previously on a public e-mail list or IRC channel?","title":"Next, please describe your project."},{"location":"community/gsoc-expectations/","text":"GSoC Student Expectations Your proposal is your contract Don't get lost Blog weekly to report progress Push on a regular schedule every few days Write design notes for review Get weekly review on code and design Identify blockers immediately Bond Get your contribution through to RTI Keep working on bite-sized bugs With feedback from your mentor, identify background reading assignments for the bonding period Spend time on #illumos We don't want students to disappear and end up at risk of failure. We're therefore setting up a number of protocols to help us keep track of progress on a day-to-day basis without too much overhead. There are a number of further things you can do to help yourself out. Get on the #illumos IRC channel and get to know the developers who are active there. Our developer community is an essential part of the larger mentor community supporting your project, so please consider the mailing list and IRC first-instance resource for general requests. Proposals should be considered a contract: they can be renegotiated, but you can't fail to deliver. If you need to make changes, indicate that promptly and make sure that the changes have been notified to and approved by your primary mentor and the org admins (Bayard and Albert). An illumos-gsoc organization has been created on GitHub, and WIP repos are being created for each project. Updates to the WIP are your basic keepalive: you should be pushing every day or two whenever you are coding. If you are going to miss a push or have one, please send notification to your primary mentor and the org admins, preferably in advance, explaining the circumstances. The repos should also include documentation for your project, such as design notes. Because they are WIPs, the repos are private. Reviews should be done using webrevs. You will be given accounts on dev1.illumos.org to allow you to publish code for review using webrevs. Every week you should provide a blog post describing progress and a webrev of any code done that week, sending URLs to developer@. The first post, which should be made during the bonding period, should be the project schedule and deliverables so that the developer community is aware of what you will be doing. You cannot miss these weekly progress reports except by prior arrangement or in case of legitimate emergency. If there are any slips against the project schedule, you should identify them in these posts the week they happen. If you encounter blockers, mail the developer list and ask on #illumos to request assistance ASAP. First-instance support for blockers should be from the developer community and not tied to any individual unless there is a clear reason for this and preferably prior agreement. If you haven't already, create accounts for yourself on GitHub and the illumos bug tracker .","title":"Student Expectations"},{"location":"community/gsoc-expectations/#gsoc-student-expectations","text":"Your proposal is your contract Don't get lost Blog weekly to report progress Push on a regular schedule every few days Write design notes for review Get weekly review on code and design Identify blockers immediately Bond Get your contribution through to RTI Keep working on bite-sized bugs With feedback from your mentor, identify background reading assignments for the bonding period Spend time on #illumos We don't want students to disappear and end up at risk of failure. We're therefore setting up a number of protocols to help us keep track of progress on a day-to-day basis without too much overhead. There are a number of further things you can do to help yourself out. Get on the #illumos IRC channel and get to know the developers who are active there. Our developer community is an essential part of the larger mentor community supporting your project, so please consider the mailing list and IRC first-instance resource for general requests. Proposals should be considered a contract: they can be renegotiated, but you can't fail to deliver. If you need to make changes, indicate that promptly and make sure that the changes have been notified to and approved by your primary mentor and the org admins (Bayard and Albert). An illumos-gsoc organization has been created on GitHub, and WIP repos are being created for each project. Updates to the WIP are your basic keepalive: you should be pushing every day or two whenever you are coding. If you are going to miss a push or have one, please send notification to your primary mentor and the org admins, preferably in advance, explaining the circumstances. The repos should also include documentation for your project, such as design notes. Because they are WIPs, the repos are private. Reviews should be done using webrevs. You will be given accounts on dev1.illumos.org to allow you to publish code for review using webrevs. Every week you should provide a blog post describing progress and a webrev of any code done that week, sending URLs to developer@. The first post, which should be made during the bonding period, should be the project schedule and deliverables so that the developer community is aware of what you will be doing. You cannot miss these weekly progress reports except by prior arrangement or in case of legitimate emergency. If there are any slips against the project schedule, you should identify them in these posts the week they happen. If you encounter blockers, mail the developer list and ask on #illumos to request assistance ASAP. First-instance support for blockers should be from the developer community and not tied to any individual unless there is a clear reason for this and preferably prior agreement. If you haven't already, create accounts for yourself on GitHub and the illumos bug tracker .","title":"GSoC Student Expectations"},{"location":"community/gsoc-mentor-application/","text":"GSoC Mentoring Organization Application Profile Organization name illumos Description illumos is a fully open-source effort to produce a reliable, performant, and scalable operating system with leading-edge technologies and tools. We bring together a passionate community of developers and a growing base of commercial participants (Delphix, Joyent, Nexenta, OmniTI, Pluribus, and more). illumos is the successor to Sun Microsystems' OpenSolaris project. Our culture draws heavily on the qualities that distinguished Sun engineering culture: systems engineering (component, interaction, and interface design with a strong commitment to minimalism), architectural coherence (design cooperation across subsystems), measurement-driven development (strong visibility tools, mature methodologies for their use, embedding both thoroughly in the development process). We have adapted it to work beyond the framework of a single corporate entity via federated efforts of individuals and companies with distinct interests in the technology (cloud infrastructure, storage systems, application servers, and others), sharing an interest in commodity hardware and production-driven innovation. illumos features an unparalleled combination of technologies, including the resilient ZFS storage system, production-safe dynamic tracing (DTrace), FMA predictive self-healing, the Service Management Framework for persistent process and boot management, zones for lightweight isolation and virtualization, the KVM hypervisor for full system virtualization, Crossbow for virtualized networks, a high-performance kernel CIFS/SMB client and server, boot environments for safe upgrades, and the MDB kernel and application debugger. All of these subsystems are actively developed by the illumos project. Both ZFS and DTrace have been ported beyond illumos (notably to FreeBSD, OS X, and Linux), where our community and sister OpenZFS community have taken a leading role in coordinating new feature development across platforms, serving as a reference platform and repository. Tags illumos, operating system, unix, kernel, dtrace, zfs, openzfs, virtualization, device driver, c, python, c++, solaris Main license CDDL Logo URL http://wiki.illumos.org/download/attachments/327686/Phoenix64x64-RGB.png Ideas list Project Ideas Mailing list illumos Mailing Lists Organization website http://www.illumos.org/ IRC channel illumos on chat.freenode.net Feed URL http://blog.illumos.org/feed/ Google+ URL Twitter URL https://twitter.com/illumosnews Blog page http://blog.illumos.org/ Facebook URL https://www.facebook.com/groups/illumos/ Veteran organization Veteran Questionnaire Why is your organization applying to participate in Google Summer of Code 2014? What do you hope to gain by participating? Our previous GSoC efforts have greatly helped bring in talented long-term contributors, even in addition to the applicants, and break ground in new areas. GSoC allows us to work with an excellent talent pool from a much wider range of institutions and geographies than we could hope to engage otherwise. Also, GSoC has proven an extremely valuable link to the larger open source community and a forum to engage on issues like community building and development process. We hope to recruit new contributors and encourage fresh ideas, mature our processes, and deepen our ties to similarly minded open source communities. How many potential mentors do you have for this year's program? What criteria did you use to select them? We have confirmed the availability of three mentors so far, with more selected from established contributors and reviewers, drawing heavily on \"advocates\", senior community members who ensure that changes are well-defined, tested, and reviewed before they are integrated. Without explicitly requiring it, we have also drawn more or less exclusively on community members with professional experience of development for our project. What is your plan for dealing with disappearing students? We require students to report progress weekly via our developer list and to provide prompt updates to their mentors whenever they experience setbacks. Students are told that their proposal schedules and deliverables are considered contracts: renegotiation is acceptable if it happens as unforeseen issues arise, but waiting for evaluations to raise significant issues is considered a breach and grounds for a failing evaluation. We've found a reasonable compromise with less frequent but regular check-ins with their mentors still allows students some flexibility in using their time while remaining accountable to the proposed schedule. We've considered publicly visible repositories during the program as an option, though not a requirement for all students. What is your plan for dealing with disappearing mentors? Org admins monitor for mentor responses to student updates to the developer list and regularly poll mentors to make sure that they have reasonably current status from students, are seeing working product to back that up, and are either satisfied with progress or have conversations promptly about issues. We also make sure that all mentors have back-ups who are kept in the loop on the above, as professional and personal obligations may require mentors to \"tag out\". We also encourage students to conduct most discussion in one of our open forums, so that others in the community can help them in addition to their mentor. What steps will you take to encourage students to interact with your project's community before and during the program? We have basic policies that require students to interact with mentors via developer IRC channels and mailing lists. Students are expected to take the initiative to familiarise themselves with the community, participate in discussions, and eventually become regular members through the program: not everything has to happen in the open, but students have to show that they are comfortable and proficient identifying themselves and talking about their work via community channels. Mentors are expected to guide students through community processes for peer review and integration. What will you do to encourage your accepted students to stick with the project after Google Summer of Code concludes? We treat students like regular community members, and our hope and expectation is that students who function well in that context and produce work they can be proud of will continue doing so. Many of our participants in previous years were students who had previous exposure to our community or were working with our code base in their coursework, and these students have unsurprisingly shown much greater ongoing affinity for and ongoing commitment to our project than students without, who tend to be active only for one summer. Are you a new organization who has a Googler or other organization to vouch for you? If so, please list their name(s) here. Are you an established or larger organization who would like to vouch for a new organization applying this year? If so, please list their name(s) here. If you chose \"veteran\" in the dropdown above, please summarize your involvement and the successes and challenges of your participation. Please also list your pass/fail rate for each year. In our first year we passed all of our students but had a nevertheless mixed experience: students were in India and mentors in California, and students were undergraduates with less previous experience in our field of development. We had a more structured and satisfying experience for students, mentors, and the community generally in 2012, recruiting students with stronger backgrounds, who were able to function independently and delivered superior results (accepted proposals demonstrated far greater expertise and preparation, projects deliverables stayed on track or were more clearly renegotiated as issues arose, outcomes were more consistent with proposals). Last year, we a selected three from a healthy number of strong proposals (though we probably received proportionally more \"spammy\" submissions as well!) from qualified students. The work was definitely of excellent quality and definitely consistent with the proposals, but we were overly ambitious about scope. Our mentors encountered more difficulty getting students to stay on schedule towards the conclusion of the development phase, primarily not due to the fault of the students themselves but our own difficulty in estimating the increase in time involved in testing and reviewing substantial changes with inherently higher risk. As a result, we will be sizing projects less ambitiously and providing feedback to applicants for pre-integration testing plans in their applications. We are happy to say that despite occasional setbacks, all of our students selected so far have passed. If you are a new organization, have you applied in the past? If so, for what year(s)?","title":"Mentoring Application"},{"location":"community/gsoc-mentor-application/#gsoc-mentoring-organization-application","text":"","title":"GSoC Mentoring Organization Application"},{"location":"community/gsoc-mentor-application/#profile","text":"","title":"Profile"},{"location":"community/gsoc-mentor-application/#organization-name","text":"illumos","title":"Organization name"},{"location":"community/gsoc-mentor-application/#description","text":"illumos is a fully open-source effort to produce a reliable, performant, and scalable operating system with leading-edge technologies and tools. We bring together a passionate community of developers and a growing base of commercial participants (Delphix, Joyent, Nexenta, OmniTI, Pluribus, and more). illumos is the successor to Sun Microsystems' OpenSolaris project. Our culture draws heavily on the qualities that distinguished Sun engineering culture: systems engineering (component, interaction, and interface design with a strong commitment to minimalism), architectural coherence (design cooperation across subsystems), measurement-driven development (strong visibility tools, mature methodologies for their use, embedding both thoroughly in the development process). We have adapted it to work beyond the framework of a single corporate entity via federated efforts of individuals and companies with distinct interests in the technology (cloud infrastructure, storage systems, application servers, and others), sharing an interest in commodity hardware and production-driven innovation. illumos features an unparalleled combination of technologies, including the resilient ZFS storage system, production-safe dynamic tracing (DTrace), FMA predictive self-healing, the Service Management Framework for persistent process and boot management, zones for lightweight isolation and virtualization, the KVM hypervisor for full system virtualization, Crossbow for virtualized networks, a high-performance kernel CIFS/SMB client and server, boot environments for safe upgrades, and the MDB kernel and application debugger. All of these subsystems are actively developed by the illumos project. Both ZFS and DTrace have been ported beyond illumos (notably to FreeBSD, OS X, and Linux), where our community and sister OpenZFS community have taken a leading role in coordinating new feature development across platforms, serving as a reference platform and repository.","title":"Description"},{"location":"community/gsoc-mentor-application/#tags","text":"illumos, operating system, unix, kernel, dtrace, zfs, openzfs, virtualization, device driver, c, python, c++, solaris","title":"Tags"},{"location":"community/gsoc-mentor-application/#main-license","text":"CDDL","title":"Main license"},{"location":"community/gsoc-mentor-application/#logo-url","text":"http://wiki.illumos.org/download/attachments/327686/Phoenix64x64-RGB.png","title":"Logo URL"},{"location":"community/gsoc-mentor-application/#ideas-list","text":"Project Ideas","title":"Ideas list"},{"location":"community/gsoc-mentor-application/#mailing-list","text":"illumos Mailing Lists","title":"Mailing list"},{"location":"community/gsoc-mentor-application/#organization-website","text":"http://www.illumos.org/","title":"Organization website"},{"location":"community/gsoc-mentor-application/#irc-channel","text":"","title":"IRC channel"},{"location":"community/gsoc-mentor-application/#illumos-on-chatfreenodenet","text":"","title":"illumos on chat.freenode.net"},{"location":"community/gsoc-mentor-application/#feed-url","text":"http://blog.illumos.org/feed/","title":"Feed URL"},{"location":"community/gsoc-mentor-application/#google-url","text":"","title":"Google+ URL"},{"location":"community/gsoc-mentor-application/#twitter-url","text":"https://twitter.com/illumosnews","title":"Twitter URL"},{"location":"community/gsoc-mentor-application/#blog-page","text":"http://blog.illumos.org/","title":"Blog page"},{"location":"community/gsoc-mentor-application/#facebook-url","text":"https://www.facebook.com/groups/illumos/","title":"Facebook URL"},{"location":"community/gsoc-mentor-application/#veteran-organization","text":"Veteran","title":"Veteran organization"},{"location":"community/gsoc-mentor-application/#questionnaire","text":"","title":"Questionnaire"},{"location":"community/gsoc-mentor-application/#why-is-your-organization-applying-to-participate-in-google-summer-of-code-2014-what-do-you-hope-to-gain-by-participating","text":"Our previous GSoC efforts have greatly helped bring in talented long-term contributors, even in addition to the applicants, and break ground in new areas. GSoC allows us to work with an excellent talent pool from a much wider range of institutions and geographies than we could hope to engage otherwise. Also, GSoC has proven an extremely valuable link to the larger open source community and a forum to engage on issues like community building and development process. We hope to recruit new contributors and encourage fresh ideas, mature our processes, and deepen our ties to similarly minded open source communities.","title":"Why is your organization applying to participate in Google Summer of Code 2014? What do you hope to gain by participating?"},{"location":"community/gsoc-mentor-application/#how-many-potential-mentors-do-you-have-for-this-years-program-what-criteria-did-you-use-to-select-them","text":"We have confirmed the availability of three mentors so far, with more selected from established contributors and reviewers, drawing heavily on \"advocates\", senior community members who ensure that changes are well-defined, tested, and reviewed before they are integrated. Without explicitly requiring it, we have also drawn more or less exclusively on community members with professional experience of development for our project.","title":"How many potential mentors do you have for this year's program? What criteria did you use to select them?"},{"location":"community/gsoc-mentor-application/#what-is-your-plan-for-dealing-with-disappearing-students","text":"We require students to report progress weekly via our developer list and to provide prompt updates to their mentors whenever they experience setbacks. Students are told that their proposal schedules and deliverables are considered contracts: renegotiation is acceptable if it happens as unforeseen issues arise, but waiting for evaluations to raise significant issues is considered a breach and grounds for a failing evaluation. We've found a reasonable compromise with less frequent but regular check-ins with their mentors still allows students some flexibility in using their time while remaining accountable to the proposed schedule. We've considered publicly visible repositories during the program as an option, though not a requirement for all students.","title":"What is your plan for dealing with disappearing students?"},{"location":"community/gsoc-mentor-application/#what-is-your-plan-for-dealing-with-disappearing-mentors","text":"Org admins monitor for mentor responses to student updates to the developer list and regularly poll mentors to make sure that they have reasonably current status from students, are seeing working product to back that up, and are either satisfied with progress or have conversations promptly about issues. We also make sure that all mentors have back-ups who are kept in the loop on the above, as professional and personal obligations may require mentors to \"tag out\". We also encourage students to conduct most discussion in one of our open forums, so that others in the community can help them in addition to their mentor.","title":"What is your plan for dealing with disappearing mentors?"},{"location":"community/gsoc-mentor-application/#what-steps-will-you-take-to-encourage-students-to-interact-with-your-projects-community-before-and-during-the-program","text":"We have basic policies that require students to interact with mentors via developer IRC channels and mailing lists. Students are expected to take the initiative to familiarise themselves with the community, participate in discussions, and eventually become regular members through the program: not everything has to happen in the open, but students have to show that they are comfortable and proficient identifying themselves and talking about their work via community channels. Mentors are expected to guide students through community processes for peer review and integration.","title":"What steps will you take to encourage students to interact with your project's community before and during the program?"},{"location":"community/gsoc-mentor-application/#what-will-you-do-to-encourage-your-accepted-students-to-stick-with-the-project-after-google-summer-of-code-concludes","text":"We treat students like regular community members, and our hope and expectation is that students who function well in that context and produce work they can be proud of will continue doing so. Many of our participants in previous years were students who had previous exposure to our community or were working with our code base in their coursework, and these students have unsurprisingly shown much greater ongoing affinity for and ongoing commitment to our project than students without, who tend to be active only for one summer.","title":"What will you do to encourage your accepted students to stick with the project after Google Summer of Code concludes?"},{"location":"community/gsoc-mentor-application/#are-you-a-new-organization-who-has-a-googler-or-other-organization-to-vouch-for-you-if-so-please-list-their-names-here","text":"","title":"Are you a new organization who has a Googler or other organization to vouch for you? If so, please list their name(s) here."},{"location":"community/gsoc-mentor-application/#are-you-an-established-or-larger-organization-who-would-like-to-vouch-for-a-new-organization-applying-this-year-if-so-please-list-their-names-here","text":"","title":"Are you an established or larger organization who would like to vouch for a new organization applying this year? If so, please list their name(s) here."},{"location":"community/gsoc-mentor-application/#if-you-chose-veteran-in-the-dropdown-above-please-summarize-your-involvement-and-the-successes-and-challenges-of-your-participation-please-also-list-your-passfail-rate-for-each-year","text":"In our first year we passed all of our students but had a nevertheless mixed experience: students were in India and mentors in California, and students were undergraduates with less previous experience in our field of development. We had a more structured and satisfying experience for students, mentors, and the community generally in 2012, recruiting students with stronger backgrounds, who were able to function independently and delivered superior results (accepted proposals demonstrated far greater expertise and preparation, projects deliverables stayed on track or were more clearly renegotiated as issues arose, outcomes were more consistent with proposals). Last year, we a selected three from a healthy number of strong proposals (though we probably received proportionally more \"spammy\" submissions as well!) from qualified students. The work was definitely of excellent quality and definitely consistent with the proposals, but we were overly ambitious about scope. Our mentors encountered more difficulty getting students to stay on schedule towards the conclusion of the development phase, primarily not due to the fault of the students themselves but our own difficulty in estimating the increase in time involved in testing and reviewing substantial changes with inherently higher risk. As a result, we will be sizing projects less ambitiously and providing feedback to applicants for pre-integration testing plans in their applications. We are happy to say that despite occasional setbacks, all of our students selected so far have passed.","title":"If you chose \"veteran\" in the dropdown above, please summarize your involvement and the successes and challenges of your participation. Please also list your pass/fail rate for each year."},{"location":"community/gsoc-mentor-application/#if-you-are-a-new-organization-have-you-applied-in-the-past-if-so-for-what-years","text":"","title":"If you are a new organization, have you applied in the past? If so, for what year(s)?"},{"location":"community/gsoc-mentor/","text":"Why Be a Google Summer of Code Mentor? By Bayard G. Bell I've had some questions about what's involved, so let me provide some feedback on issues. I've already hit this in terms of the long-term, but let me try to provide a bottom line for this summer: 1) Mentors can go to the GSoC mentor summit in the fall at Google HQ. Google provides a reasonable amount of reimbursement for travel (it was $2500 per attendee last year) plus two nights in a hotel ad transportation to Mountain View. The mentor summit is a weekend-long unconference that lets mentors talk about whatever interests them: recruiting contributors, minority open-source operating systems (we're trying to make that more of a track this year than a single session, as we turned out to have a lot to talk about), contribution process, testing, toolchain refreshes, or why the music industry's business model needs to be rebooted. Maybe I've been underconferenced lately, but a conference consisting almost exclusively of dedicated contributors is better than most. 2) Google pays a pro forma stipend (I believe it's still $500 per mentor) that will be donated as seed money to the foundation (many organizations do this, in part to avoid all the tax paperwork to receive compensation). 3) To put it very simply: GSoC is our system of reproduction. (I'd cite the lyrics to \u201cThe Greatest Love of All\u201d ironically if the timing weren't a bit off.) We've done a great job of putting together a community of mature contributors. We need to make a concerted and sustained effort at recruiting and shaping a next generation. Much like parenting, this requires a basic 2:1 ratio of mentors to students. More solid mentors means more students with a solid experience who are thus more likely to stick with us. 4) Even if you're not an expert in the subject matter for any particular idea from the list, students need generalist support. Students show WIPs to mentors weekly, but they need small touches throughout the week. Backup mentors means they have committed support from the community rather than an individual, who usually has to mind a day job. Back-up mentors help us prevent under-mentoring, which almost invariably results in students not passing and thus not committing because they didn't have assistance when they needed it or went over the side without being noticed and pulled back in the boat. Having backup mentors is crucial to giving students a positive experience. 5) For similar reasons, the size of our mentor bench is a factor in deciding how many student slots we are allocated. Mentoring is coverage-intensive. We don't want more slots than we have qualified students, but with all of our commercial supporters digging in, we may have a lot of primary mentor capacity that needs rounding out from backups. If you work for one of our commercial supporters, your boss and/or community manager is probably already telling to sign up. If you're from elsewhere in the community, we need you, too. We are recruiting and shaping potential long-term contributors, and those people should be exposed to both professional and volunteer supporters to demonstrate that both paths are open and viable. 6) If not enough people sign up, there will be more mails like this over the next two weeks.","title":"Becoming a Mentor"},{"location":"community/gsoc-mentor/#why-be-a-google-summer-of-code-mentor","text":"By Bayard G. Bell I've had some questions about what's involved, so let me provide some feedback on issues. I've already hit this in terms of the long-term, but let me try to provide a bottom line for this summer: 1) Mentors can go to the GSoC mentor summit in the fall at Google HQ. Google provides a reasonable amount of reimbursement for travel (it was $2500 per attendee last year) plus two nights in a hotel ad transportation to Mountain View. The mentor summit is a weekend-long unconference that lets mentors talk about whatever interests them: recruiting contributors, minority open-source operating systems (we're trying to make that more of a track this year than a single session, as we turned out to have a lot to talk about), contribution process, testing, toolchain refreshes, or why the music industry's business model needs to be rebooted. Maybe I've been underconferenced lately, but a conference consisting almost exclusively of dedicated contributors is better than most. 2) Google pays a pro forma stipend (I believe it's still $500 per mentor) that will be donated as seed money to the foundation (many organizations do this, in part to avoid all the tax paperwork to receive compensation). 3) To put it very simply: GSoC is our system of reproduction. (I'd cite the lyrics to \u201cThe Greatest Love of All\u201d ironically if the timing weren't a bit off.) We've done a great job of putting together a community of mature contributors. We need to make a concerted and sustained effort at recruiting and shaping a next generation. Much like parenting, this requires a basic 2:1 ratio of mentors to students. More solid mentors means more students with a solid experience who are thus more likely to stick with us. 4) Even if you're not an expert in the subject matter for any particular idea from the list, students need generalist support. Students show WIPs to mentors weekly, but they need small touches throughout the week. Backup mentors means they have committed support from the community rather than an individual, who usually has to mind a day job. Back-up mentors help us prevent under-mentoring, which almost invariably results in students not passing and thus not committing because they didn't have assistance when they needed it or went over the side without being noticed and pulled back in the boat. Having backup mentors is crucial to giving students a positive experience. 5) For similar reasons, the size of our mentor bench is a factor in deciding how many student slots we are allocated. Mentoring is coverage-intensive. We don't want more slots than we have qualified students, but with all of our commercial supporters digging in, we may have a lot of primary mentor capacity that needs rounding out from backups. If you work for one of our commercial supporters, your boss and/or community manager is probably already telling to sign up. If you're from elsewhere in the community, we need you, too. We are recruiting and shaping potential long-term contributors, and those people should be exposed to both professional and volunteer supporters to demonstrate that both paths are open and viable. 6) If not enough people sign up, there will be more mails like this over the next two weeks.","title":"Why Be a Google Summer of Code Mentor?"},{"location":"community/gsoc-proposal/","text":"How to write an excellent GSoC proposal We assume you've already found our Project Ideas, GSoC Application Template, and Google Summer of Code pages. Design 1 st , Code 2 nd As part of your application, you should prepare a detailed design document covering what you propose to do. Be as detailed as you can about any interfaces that will change as part of your work, i.e. reference any existing interface document(s) in your design, and provide a new version (or diffs against the existing document) to show how those interfaces will change. Reference any standards or specifications that affect the design. Consider including in your proposal one or more test programs to exercise any affected interfaces. We care about well-designed interfaces, that allow changing implementations with minimal or no impact consumers of an interface. Realistic Project Plan With your reasonably complete design document in hand, break down the work in to a list of modestly sized tasks. Estimate the time required for each task. If any are estimated to take more than a week, it's likely that you should further divide those into smaller tasks. Write a tentative schedule laying out all your tasks. That schedule will (of course) change as you work on your tasks. Research first, ask questions later If you don't understand what the project really is, particularly if there's linked code or explicit references that you don't understand, you need to show that you've tried to work this out for yourself rather than asking right off. You are joining our community for mentorship, but our objective is to develop your over the course of the summer into someone who can participate over the long term as a peer. Nothing threatens that premise like asking a question that a Google search could answer for you, particularly if it's how you introduce yourself or if you do so persistently. Be especially sure to sure to search our mail and IRC archives to see if we've had previous discussions about the idea that interests you. Survey the project Assumptions are the hardest thing to refactor A good time to ask questions is when you start getting clear ideas about how to structure the project. Baking in mistaken assumptions can kill code, but assumptions can also cause lost time well before that or show your project to be untutored if they contradict a mentor's understanding. If you reckon you've got a basic conceptual grasp of the project (you've followed explicit references from the ideas page, you've checked how issues were framed if the project was previously discussed on the developer mailing list), asking questions is a good way to confirm and clarify that before you start building a proposal around it. Don't be surprised if there is disagreement on fundamentals The further you go in forming assumptions, the more important it is to expose those assumptions to feedback from potential mentors. We encourage you to do this via the developer mailing list and IRC channel. Assumptions may not be agreed within the community, even between leading contributors to a particular area. One of the most important skills to develop in an open-source project is the ability to summarize and evaluate competing perspectives. Look at the whole on your first pass If a project mentions a list of items, diving into the first item may not be the best approach. Make a general survey to understand how the pieces do or do not relate so that you understand what leverage resolving one item gets you for others and what dependencies might exist between items. Spend time with existing code Look for existing code that bears some relation to the project. For example: if you're looking at a project to implement instrumentation tools with DTrace, analyse different pieces to get a broader perspective: get a conceptual grasp of what the tools you mean to reimplement do, see what's already in the DTrace toolkit that instruments the same subsystems, and see what's implemented in illumos-gate using kstats and C that overlaps so that you can get a grasp of how DTrace differs in approach from traditional Unix instrumentation. Look for references A number of people involved in our project write technical blogs, and there are blogs dedicated to major subsystems, as well as related work in the continuing commercial fork. The Solaris Internals book document a good deal of our predecessor project. One book and one series by W. Richard Stevens, Advanced Programming in the Unix Environment and TCP/IP Illustrated are considered canonical texts on systems and fundamental networking programming. Tannenbaum's Modern Operating Systems offers a comparative approach. Online docs for our predecessor projects can be found here: http://www.filibeto.org/~aduritz/ . An online source for OS development can be found here: http://www.osdever.net/ . Assertions are only for debugging Demonstration is best This is a practical project. A lot of references to your academic record will be hard for us to verify, thus making it hard to evaluate parts of your application. Contributing fixes to bite-sized bugs, working through demo code for a first step on your project (preferably allowing time for feedback after sharing it with the community), and referencing contributions to other open source projects all go a long way to demonstrating that you can do the work. Analysis is good, too Code's always best, but showing that you can find and grok relevant code and put it into a clear conceptual context is still better than resorting to rhetoric. Show a long-term perspective Focus your enthusiasm illumos and GSoC both want to support students with a long-term commitment to open-source development. If you have no prior experience with open source development, you're at something of a disadvantage. Do not try to overcome this with non-specific expressions of enthusiasm. The race you're running has already begun You are offering to make a serious commitment of time and energy to our project, and completing a project successfully, meaning that we are able to commit it before the summer is over, is a serious challenge. Particularly if you don't have a record of open-source contribution generally and to our project in particular, you should expect to put in much of your free time between reading this and the deadline researching and preparing your application and supporting materials (bite-sized contributions, demo code directly relevant to the project). We're long-term people looking for long-term people Many of the people working on this project have made career decisions to stick with it and have been doing this for quite a long time, many for a living. We come from a wide variety of backgrounds. We've had a lot of experience in the workplace, as well as in the open-source world. We have a decent eye for measuring capability, interest, and fortitude. Focus on the work as concretely as possibly, and you are most like to exhibit those things. Let them speak for themselves and leave other things out or in the background.","title":"Writing a Proposal"},{"location":"community/gsoc-proposal/#how-to-write-an-excellent-gsoc-proposal","text":"We assume you've already found our Project Ideas, GSoC Application Template, and Google Summer of Code pages.","title":"How to write an excellent GSoC proposal"},{"location":"community/gsoc-proposal/#design-1st-code-2nd","text":"As part of your application, you should prepare a detailed design document covering what you propose to do. Be as detailed as you can about any interfaces that will change as part of your work, i.e. reference any existing interface document(s) in your design, and provide a new version (or diffs against the existing document) to show how those interfaces will change. Reference any standards or specifications that affect the design. Consider including in your proposal one or more test programs to exercise any affected interfaces. We care about well-designed interfaces, that allow changing implementations with minimal or no impact consumers of an interface.","title":"Design 1st, Code 2nd"},{"location":"community/gsoc-proposal/#realistic-project-plan","text":"With your reasonably complete design document in hand, break down the work in to a list of modestly sized tasks. Estimate the time required for each task. If any are estimated to take more than a week, it's likely that you should further divide those into smaller tasks. Write a tentative schedule laying out all your tasks. That schedule will (of course) change as you work on your tasks.","title":"Realistic Project Plan"},{"location":"community/gsoc-proposal/#research-first-ask-questions-later","text":"If you don't understand what the project really is, particularly if there's linked code or explicit references that you don't understand, you need to show that you've tried to work this out for yourself rather than asking right off. You are joining our community for mentorship, but our objective is to develop your over the course of the summer into someone who can participate over the long term as a peer. Nothing threatens that premise like asking a question that a Google search could answer for you, particularly if it's how you introduce yourself or if you do so persistently. Be especially sure to sure to search our mail and IRC archives to see if we've had previous discussions about the idea that interests you.","title":"Research first, ask questions later"},{"location":"community/gsoc-proposal/#survey-the-project","text":"","title":"Survey the project"},{"location":"community/gsoc-proposal/#assumptions-are-the-hardest-thing-to-refactor","text":"A good time to ask questions is when you start getting clear ideas about how to structure the project. Baking in mistaken assumptions can kill code, but assumptions can also cause lost time well before that or show your project to be untutored if they contradict a mentor's understanding. If you reckon you've got a basic conceptual grasp of the project (you've followed explicit references from the ideas page, you've checked how issues were framed if the project was previously discussed on the developer mailing list), asking questions is a good way to confirm and clarify that before you start building a proposal around it.","title":"Assumptions are the hardest thing to refactor"},{"location":"community/gsoc-proposal/#dont-be-surprised-if-there-is-disagreement-on-fundamentals","text":"The further you go in forming assumptions, the more important it is to expose those assumptions to feedback from potential mentors. We encourage you to do this via the developer mailing list and IRC channel. Assumptions may not be agreed within the community, even between leading contributors to a particular area. One of the most important skills to develop in an open-source project is the ability to summarize and evaluate competing perspectives.","title":"Don't be surprised if there is disagreement on fundamentals"},{"location":"community/gsoc-proposal/#look-at-the-whole-on-your-first-pass","text":"If a project mentions a list of items, diving into the first item may not be the best approach. Make a general survey to understand how the pieces do or do not relate so that you understand what leverage resolving one item gets you for others and what dependencies might exist between items.","title":"Look at the whole on your first pass"},{"location":"community/gsoc-proposal/#spend-time-with-existing-code","text":"Look for existing code that bears some relation to the project. For example: if you're looking at a project to implement instrumentation tools with DTrace, analyse different pieces to get a broader perspective: get a conceptual grasp of what the tools you mean to reimplement do, see what's already in the DTrace toolkit that instruments the same subsystems, and see what's implemented in illumos-gate using kstats and C that overlaps so that you can get a grasp of how DTrace differs in approach from traditional Unix instrumentation.","title":"Spend time with existing code"},{"location":"community/gsoc-proposal/#look-for-references","text":"A number of people involved in our project write technical blogs, and there are blogs dedicated to major subsystems, as well as related work in the continuing commercial fork. The Solaris Internals book document a good deal of our predecessor project. One book and one series by W. Richard Stevens, Advanced Programming in the Unix Environment and TCP/IP Illustrated are considered canonical texts on systems and fundamental networking programming. Tannenbaum's Modern Operating Systems offers a comparative approach. Online docs for our predecessor projects can be found here: http://www.filibeto.org/~aduritz/ . An online source for OS development can be found here: http://www.osdever.net/ .","title":"Look for references"},{"location":"community/gsoc-proposal/#assertions-are-only-for-debugging","text":"","title":"Assertions are only for debugging"},{"location":"community/gsoc-proposal/#demonstration-is-best","text":"This is a practical project. A lot of references to your academic record will be hard for us to verify, thus making it hard to evaluate parts of your application. Contributing fixes to bite-sized bugs, working through demo code for a first step on your project (preferably allowing time for feedback after sharing it with the community), and referencing contributions to other open source projects all go a long way to demonstrating that you can do the work.","title":"Demonstration is best"},{"location":"community/gsoc-proposal/#analysis-is-good-too","text":"Code's always best, but showing that you can find and grok relevant code and put it into a clear conceptual context is still better than resorting to rhetoric.","title":"Analysis is good, too"},{"location":"community/gsoc-proposal/#show-a-long-term-perspective","text":"","title":"Show a long-term perspective"},{"location":"community/gsoc-proposal/#focus-your-enthusiasm","text":"illumos and GSoC both want to support students with a long-term commitment to open-source development. If you have no prior experience with open source development, you're at something of a disadvantage. Do not try to overcome this with non-specific expressions of enthusiasm.","title":"Focus your enthusiasm"},{"location":"community/gsoc-proposal/#the-race-youre-running-has-already-begun","text":"You are offering to make a serious commitment of time and energy to our project, and completing a project successfully, meaning that we are able to commit it before the summer is over, is a serious challenge. Particularly if you don't have a record of open-source contribution generally and to our project in particular, you should expect to put in much of your free time between reading this and the deadline researching and preparing your application and supporting materials (bite-sized contributions, demo code directly relevant to the project).","title":"The race you're running has already begun"},{"location":"community/gsoc-proposal/#were-long-term-people-looking-for-long-term-people","text":"Many of the people working on this project have made career decisions to stick with it and have been doing this for quite a long time, many for a living. We come from a wide variety of backgrounds. We've had a lot of experience in the workplace, as well as in the open-source world. We have a decent eye for measuring capability, interest, and fortitude. Focus on the work as concretely as possibly, and you are most like to exhibit those things. Let them speak for themselves and leave other things out or in the background.","title":"We're long-term people looking for long-term people"},{"location":"community/gsoc/","text":"Google Summer of Code We\u2019re happy to announce that the illumos project has been accepted as a mentoring organization for the 2017 Google Summer of Code (this marks our third year of participation in GSoC). The illumos project is a community-driven open source operating system development project derived from the former OpenSolaris project. Google's Summer of Code program promotes student involvement in open source communities by sponsoring summer internships for students to work on projects like illumos. Members of the illumos community (including Joyent, Nexenta, OmniTI and others) support this program by offering experienced staff members willing to mentor student projects. If you might like to apply for one of these internships, or just want to learn more about our involvement in this program, please see the illumos GSoC page. OpenIndiana is also participating, under the illumos umbrella. For Students New to illumos? Start with How To Build illumos and How To Contribute . If you're interested in helping illumos or OpenIndiana in this year's Summer of Code, we require you to sign up on our developer list . Students are expected to interact as normal contributors through existing community channels, including mail and IRC , so dive on in! We encourage you to drop by #illumos on freenode to ask questions or get to know us. Students can officially begin discussing project ideas with us at any time, and submit applications between Mar 20 and Apr. 3 (see other important dates in the full timeline for GSoC 2017 ). Nothing prohibits motivated students from spending time before the application period getting to know the community and the code, installing a distribution, building from source, and fixing some bite-sized bugs . Starting from March 20, you can apply at illumos Google Summer of Code page . If you're not sure what your proposal should include we will be happy to help if you ask the mailing list or IRC for feedback. Think Long-Term illumos is an open-source, community-based project, but it also has commercial supporters who employ contributors to our project. If operating systems development is really what interests you, consider this a first step toward a possible career with us. Our development community includes people who came to work at the commercial organization that supported our predecessor project as summer interns. They were excited enough by what they saw that they started work right out of college and followed us into our current incarnation. For a (colorful) history of the project from one of those interns, visit Bryan Cantrill's LISA presentation . Project ideas Our Project Ideas are a launch pad for student proposals, not a fixed menu of options. Put time in with the community, learn how what we're doing fits your interests and skills and write a proposal that reflects that. We welcome original project proposals, particularly those that demonstration familiarity with the project and alignment with career interests, previous course of study, and practical experience. When writing your proposal, make use of our suggestions for how to write an excellent GSoC proposal . Application template Please use our GSoC Application Template in preparing your application. Mentoring resources If you need help finding or contacting a possible mentor, please contact the org admins: Gordon Ross Hans Rosenfeld","title":"Overview"},{"location":"community/gsoc/#google-summer-of-code","text":"We\u2019re happy to announce that the illumos project has been accepted as a mentoring organization for the 2017 Google Summer of Code (this marks our third year of participation in GSoC). The illumos project is a community-driven open source operating system development project derived from the former OpenSolaris project. Google's Summer of Code program promotes student involvement in open source communities by sponsoring summer internships for students to work on projects like illumos. Members of the illumos community (including Joyent, Nexenta, OmniTI and others) support this program by offering experienced staff members willing to mentor student projects. If you might like to apply for one of these internships, or just want to learn more about our involvement in this program, please see the illumos GSoC page. OpenIndiana is also participating, under the illumos umbrella.","title":"Google Summer of Code"},{"location":"community/gsoc/#for-students","text":"New to illumos? Start with How To Build illumos and How To Contribute . If you're interested in helping illumos or OpenIndiana in this year's Summer of Code, we require you to sign up on our developer list . Students are expected to interact as normal contributors through existing community channels, including mail and IRC , so dive on in! We encourage you to drop by #illumos on freenode to ask questions or get to know us. Students can officially begin discussing project ideas with us at any time, and submit applications between Mar 20 and Apr. 3 (see other important dates in the full timeline for GSoC 2017 ). Nothing prohibits motivated students from spending time before the application period getting to know the community and the code, installing a distribution, building from source, and fixing some bite-sized bugs . Starting from March 20, you can apply at illumos Google Summer of Code page . If you're not sure what your proposal should include we will be happy to help if you ask the mailing list or IRC for feedback.","title":"For Students"},{"location":"community/gsoc/#think-long-term","text":"illumos is an open-source, community-based project, but it also has commercial supporters who employ contributors to our project. If operating systems development is really what interests you, consider this a first step toward a possible career with us. Our development community includes people who came to work at the commercial organization that supported our predecessor project as summer interns. They were excited enough by what they saw that they started work right out of college and followed us into our current incarnation. For a (colorful) history of the project from one of those interns, visit Bryan Cantrill's LISA presentation .","title":"Think Long-Term"},{"location":"community/gsoc/#project-ideas","text":"Our Project Ideas are a launch pad for student proposals, not a fixed menu of options. Put time in with the community, learn how what we're doing fits your interests and skills and write a proposal that reflects that. We welcome original project proposals, particularly those that demonstration familiarity with the project and alignment with career interests, previous course of study, and practical experience. When writing your proposal, make use of our suggestions for how to write an excellent GSoC proposal .","title":"Project ideas"},{"location":"community/gsoc/#application-template","text":"Please use our GSoC Application Template in preparing your application.","title":"Application template"},{"location":"community/gsoc/#mentoring-resources","text":"If you need help finding or contacting a possible mentor, please contact the org admins: Gordon Ross Hans Rosenfeld","title":"Mentoring resources"},{"location":"community/lists/","text":"Mailing Lists The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators. General Lists Name Description announce Announcements including new releases, significant milestones, administrative and policy decisions and other news-worthy items. ( Old archives ) developer Developers working on illumos code and those looking to become actively involved. ( Old archives ) discuss General discussion ( Old archives Code Commits, Integration, Bug Tracking Name Description advocates Moderated list for illumos Advocates and submitting RTIs only. ( Old archives ) commits Notifications about each commit made to the illumos source code repository. ( Old archives ) Related Communities Name Description dtrace-discuss All things DTrace openzfs-developer Platform-independent mailing list for ZFS developers to review ZFS code and architecture changes from all platforms. oi-dev OpenIndiana distro developer list openindiana-discuss OpenIndiana distro users list omnios-discuss OmniOS distro users list smartos-discuss SmartOS distro","title":"Mailing Lists"},{"location":"community/lists/#mailing-lists","text":"The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators.","title":"Mailing Lists"},{"location":"community/lists/#general-lists","text":"Name Description announce Announcements including new releases, significant milestones, administrative and policy decisions and other news-worthy items. ( Old archives ) developer Developers working on illumos code and those looking to become actively involved. ( Old archives ) discuss General discussion ( Old archives","title":"General Lists"},{"location":"community/lists/#code-commits-integration-bug-tracking","text":"Name Description advocates Moderated list for illumos Advocates and submitting RTIs only. ( Old archives ) commits Notifications about each commit made to the illumos source code repository. ( Old archives )","title":"Code Commits, Integration, Bug Tracking"},{"location":"community/lists/#related-communities","text":"Name Description dtrace-discuss All things DTrace openzfs-developer Platform-independent mailing list for ZFS developers to review ZFS code and architecture changes from all platforms. oi-dev OpenIndiana distro developer list openindiana-discuss OpenIndiana distro users list omnios-discuss OmniOS distro users list smartos-discuss SmartOS distro","title":"Related Communities"},{"location":"community/videos/","text":"Year Presenter Venue Link 2018 Stephen's Machine Room Thoughts on illumos distributions 2017 Peter Tribble flossUK illumos at 6 2017 Various OpenZFS Dev Summit 2016 Bryan Cantrill PapersWeLove Jails and Solaris Zones 2016 Various OpenZFS Dev Summit 2016 Dan McDonald FOSDEM An overview of illumos five years later 2015 Various Surge illumos Day 2015 Various OpenZFS Dev Summit 2014 Matt Ahrens AsiaBSDCon OpenZFS 2014 Various OpenZFS Dev Summit 2014 Various Surge illumos Day 2014 Peter Tribble Tribblix: adventures with illumos 2013 Various OpenZFS Developer Summit 2012 Garrett D'Amore SCALE 10x Developing for illumos 2012 Robert Mustacchi SCALE 10x Using SmartOS as a Hypervisor 2012 Various dtrace.conf 2012 Brendan Gregg DTracing the cloud 2011 Bryan Cantrill LISA 25 Fork Yeah! The Rise and Development of illumos 2011 Various illumos meetup 2011 Bryan Cantrill KVM Forum Porting KVM to illumos 2009 Brendan Gregg KCA DTrace Crash Course 2008 Various dtrace.conf 2008 Jeff Bonwick, Bill Moore SNIA ZFS: The Last Word in Filesystems Many thanks to Deirdr\u00e9 Straughan for recording many of the early OpenSolaris and illumos videos!","title":"Videos"},{"location":"contributing/","text":"Requires Review This page contains incomplete content and needs to be reviewed. Contributing to illumos Overview Committing code to illumos can seem very daunting. To get started, you might consider watching Ryan Zezeski going through fixing a bug in ZFS in this \"illumos Day\" talk, which includes going over integration. video slides RTI Process The Request To Integrate process is also documented in the illumos Developer's Guide . Finding An Area To Contribute To If you're not sure what you want to work on, you can start by looking at our list of bite-site bugs which should be easy for newcomers to pick up. You can also look at the entire list of issues and see if any with status \"New\" fit your skill set. If you're looking for a longer-term project, we have a list of ideas for new projects for different levels skill and expertise. Alternatively you may look through the mailing lists for suggestions for improvements. If you are adding a new feature or addressing a problem not currently on our list of issues , please create a new issue describing it. You need to be signed in to use the issue tracker. Before you start working on the code, it is advisable to first ask on either the developer mailing list or the IRC channel for advice on the particular area you're interested in. Writing The Code Our guide to building illumos covers setting up a build environment and getting the source. You should try a build once or twice to get accustomed to the build system and source tree layout. An unparalleled resource for understanding the operating system is the the book, Solaris Internals: Solaris 10 and OpenSolaris Kernel Architecture . We have an OpenGrok source browser and search engine which is very useful for development. Feel free to ask the developer mailing list or the IRC channel for help. We encourage you to \"commit early, commit often\" as you work, using your personal clone of illumos-gate. Testing The illumos gate is a core technology leveraged by several commercial vendors that rely on it to be a stable, well-tested platform. As such, integration into the core illumos-gate requires both code review by relevant parties and reasonable testing to ensure that the changes are stable enough for others to rely upon. Your RTI advocate is the ultimate arbiter of whether your testing is sufficient. The scope of required testing depends on the nature of the change and a discussion with your advocate, but in general advocates adopt a \"shrink to fit\" mentality. Here are some examples of reasonable testing based on the collective experience of the current RTI advocates. Your advocate may always ask for more testing depending on the nature of the change. All changes Make sure you test the results of the illumos-gate build with only your changesets applied. To do this, you will need to build the illumos code . It is generally insufficient to test the build results of a downstream fork that contains other non-trivial changes as there may be implicit dependencies that break other consumers of the core illumos gate. If your code has been running in production in another distro or has gone through other testing downstream, please include that information, though by itself may be insufficient to constitute sufficient testing. Changing a single program If your change affects only a single binary, it is likely sufficient to copy this binary to a downstream distro of reasonable similarity and running your tests there. These tests should cover enough functionality to demonstrate the correctness of your changes, and could involve stress tests in addition to functional tests depending on the nature of the change. This assumes that the binary has a trivial set of library dependencies that are reasonably standard across distros. Changing the implementation of a library If your change affects the implementation of a library without changing external interfaces, you should run tests against a reasonable subset of programs that exercise the code in question. As with a single binary, it is likely sufficient to copy this library to a distro which has identical interfaces, though for some core libraries (most notably libc), you will probably need to bootstrap a complete distro given the challenges with swapping such libraries on a running system, though this depends on the distro in question. Changing the implementation of a driver or adding a new driver If your change affects a single driver, you may or may not be able to get away with copying over that driver to an alternate distro. On one hand, the kernel interfaces are likely identical, but if the core implementation of that distro has diverged significantly from illumos-gate, you may be asked to bootstrap a complete environment from your illumos build. Driver tests should demonstrate a reasonable amount of functional and stress testing on appropriate hardware. Changing the core kernel or multiple interconnected binaries If you are making a change to the core kernel, or have a series of changes across a number of libraries, commands, or kernel components that need to be tested as a cohesive whole, you should bootstrap a usable environment from your illumos-gate build that is sufficient to demonstrate the correctness of your changes. Exactly what \"bootstrapping\" means is dependent on the distro, but the goal is to run the entirety of the your illumos-gate build (not a combination of downstream and upstream illumos-gate bits) in a testable environment. Not all distros are capable of bootstrapping a bare illumos-gate build - check the distribution list and ask on the developer list if you are unsure how to do this. Running onu on OpenIndiana or building an illumos-live distribution are two such ways to demonstrate this testing that have been used in the past, but they are not the only ones. The scope of testing here will likely be more substantial, and should focus on stability of the system as well as the functionality of the changed component(s). As always, contact your advocate (or the advocates list if you don't yet have someone in mind) if you have more questions about what constitutes sufficient testing for a particular change. Code Review At least one person (other than you, of course) should review your changes. These reviewers should have demonstrated expertise in the area in question or are trusted as knowledgeable by the illumos community at large. If you work for a commercial entity, it is best to include reviewers from outside your company, but this is not required. Your RTI advocate is the ultimate arbiter of whether your review is sufficient. If you don't know how to find adequate review, you may post the changes to the developer mailing list to ask for feedback, or ask the RTI advocates if there is anyone in particular they'd like to see review the code. For larger changes, please link to a resource on the web, instead of attaching a patch file. You may use a webrev (see below), a private hgweb or gitweb or online services like Bitbucket, GitHub, or Gitorious to share your changes. Remember to mention the issue ID in the email - if one does not yet exist, please create one! Generate a key pair If you don't already have an SSH public key in your account in the bug tracker , generate a key pair like this on your machine (usually as the building/development user account): $ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/USER/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/USER/.ssh/id_rsa. Your public key has been saved in /home/USER/.ssh/id_rsa.pub. $ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3... Then paste your public key into the box on your account settings page and save the changes. Wait for a while for the change to propagate to the webrev server. Note if you leave your passphrase blank you will be able to both publish and delete your webrevs as per the latest instructions on the main page at http://cr.illumos.org/ (this both creates and uploads your webrev - see \"Creating and Uploaded in one step\" ) however if you use a passphrase you will not be able to delete your webrevs as only publish will ask you for your passphrase. Creating a webrev The webrev(1ONBLD) tool is an easy way to show other people changes you have made. It presents changes (including commit messages) in multiple formats viewable from a web browser. If you have installed an illumos build, you can run webrev like this: /opt/onbld/bin/webrev -O -o illumos-123-webrev Else, from your workspace if you have built the tools: ksh93 bldenv.sh illumos.sh -c webrev -O -o illumos-123-webrev Or to use webrev provided by installed ON build tools on a non-illumos system: /opt/onbld/bin/webrev -I usr/src/tools/scripts/its.reg -O -o illumos-123-webrev Note: The reason for the -I option is to provide links to our issue tracker. If you see *** failed to import extension hgext.cdm from .../usr/src/tools/proto/root_i386-nd/opt/onbld/lib/python2.6/onbld/hgext/cdm.py: cannot import name WorkList, try running webrev from the workspace instead. Upload the directory somewhere people can access it from the web, such as a personal web site. You may also use the free webrev hosting provided by the illumos project as described in the next section. Creating and uploading a webrev in one step To publish a webrev, you'll first need to make sure your SSH key is up-to-date in the illumos bug tracker . Refer to Generate a key pair above for more information. Please note that it takes a couple of minutes for your added (or updated) key to get copied to the webrev server. Once you have a key uploaded, you can use webrev(1ONBLD) to generate and upload your webrev, all at once, thus: webrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -U You can delete a previously uploaded webrev thus: webrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -D Note that $SOME_NAME (in the examples above) is an arbitrary string that will form part of the URL to your webrev. This is not your user name but rather a descriptive name of the issue and/or fix. Note, also, that you should always use webrev@ in the rsync URL, not your bug tracker username. Once uploaded, your webrev will be in your directory here: http://cr.illumos.org/~webrev for example assuming your login name is jondoe and your $SOME_NAME is 1023 the final webrev will be located as $SOME_NAME e.g. 1023 under your directory http://cr.illumos.org/~webrev/jondoe/ or with a complete path of http://cr.illumos.org/~webrev/jondoe/1023 . Review Board For reviews you could also use the illumos' Review Board instance at https://illumos.org/rb . You should be able to log in with your existing illumos bug tracker username and password. Ensuring adequate review It is up to you as a contributor to gather reasonable review to satisfy your RTI advocate that the code is correct and of high quality. Exactly what this means will vary based on the nature and scope of the change, but here are some guidelines that will give the advocates confidence in your changes. As always, trust your avocate and apply \"shrink to fit\". There should be at least one code reviewer (focused on the implementation details) that is different from the advocate (focused on ensuring overall quality of contributions). For non-trivial changes to major technology areas (ZFS, DTrace, etc), at least one of the reviewers should be regarded as a subject matter expert by the community. Changes with significant impact should participate in a public review when appropriate, or otherwise ensure that alternate opinions are represented. When there are disagreements, every attempt should be made to adequately address reviewer's comments. In the event they cannot, it is acceptable to submit an RTI with known dissent. Such disagreements must be noted in the RTI submission with an explanation as to why the review comments were not addressed. When in doubt, more review is generally better, and you can always ask the advocates for guidance. Submitting A Patch When you have adequate code review and test results for your proposed change, you prepare a \"request to integrate\" (RTI). Your RTI should include: The link to the illumos issue you're fixing, i.e. https://illumos.org/issues/1 The issue synopsis (see the sample change description below) A link to the changes that were reviewed (preferably a webrev, code review page, or web repository view). The full \"change set description\", (i.e. \"hg outgoing\" or \"git whatchanged -v origin/master..\") including: issue number(s) and description(s) Reviewed by: XXX lines list of files affected Here is an example change description: 123 Description of the issue in our tracker Reviewed by: Jack jack@eng.sun.com Reviewed by: Ohana Matsumae ohana@kissui.ishikawa.jp Note You can use git commit --amend to fix the change description. Output of git pbchk (you'll need the \"cadmium\" extension for git) Attach the mail_msg file from a full nightly build (including lint ), which should be free of warnings. Supply information about how the changes were tested. Attach the actual changes, either from git format-patch . (the webrev is not sufficient. Attach an actual patch) An Advocate will need to judge whether your code review and testing are adequate for the scope of changes you propose. Note that the advocate's job is not necessarily to review your code, only to judge whether review and testing was adequate. When you are ready, send an email to the illumos Advocates . You don't need to subscribe to this list, just send an email to . If you're interested in what past RTIs looked like, you can browse past messages . Your email needs to be less than 2MB in size. If your change is large, compress the patch or make it available over HTTP. If your mail_msg is large, something is wrong. You should soon get a reply with additional feedback if needed, or a \"thank you\" for being part of the illumos developer community! Credits","title":"Overview"},{"location":"contributing/#contributing-to-illumos","text":"","title":"Contributing to illumos"},{"location":"contributing/#overview","text":"Committing code to illumos can seem very daunting. To get started, you might consider watching Ryan Zezeski going through fixing a bug in ZFS in this \"illumos Day\" talk, which includes going over integration. video slides RTI Process The Request To Integrate process is also documented in the illumos Developer's Guide .","title":"Overview"},{"location":"contributing/#finding-an-area-to-contribute-to","text":"If you're not sure what you want to work on, you can start by looking at our list of bite-site bugs which should be easy for newcomers to pick up. You can also look at the entire list of issues and see if any with status \"New\" fit your skill set. If you're looking for a longer-term project, we have a list of ideas for new projects for different levels skill and expertise. Alternatively you may look through the mailing lists for suggestions for improvements. If you are adding a new feature or addressing a problem not currently on our list of issues , please create a new issue describing it. You need to be signed in to use the issue tracker. Before you start working on the code, it is advisable to first ask on either the developer mailing list or the IRC channel for advice on the particular area you're interested in.","title":"Finding An Area To Contribute To"},{"location":"contributing/#writing-the-code","text":"Our guide to building illumos covers setting up a build environment and getting the source. You should try a build once or twice to get accustomed to the build system and source tree layout. An unparalleled resource for understanding the operating system is the the book, Solaris Internals: Solaris 10 and OpenSolaris Kernel Architecture . We have an OpenGrok source browser and search engine which is very useful for development. Feel free to ask the developer mailing list or the IRC channel for help. We encourage you to \"commit early, commit often\" as you work, using your personal clone of illumos-gate.","title":"Writing The Code"},{"location":"contributing/#testing","text":"The illumos gate is a core technology leveraged by several commercial vendors that rely on it to be a stable, well-tested platform. As such, integration into the core illumos-gate requires both code review by relevant parties and reasonable testing to ensure that the changes are stable enough for others to rely upon. Your RTI advocate is the ultimate arbiter of whether your testing is sufficient. The scope of required testing depends on the nature of the change and a discussion with your advocate, but in general advocates adopt a \"shrink to fit\" mentality. Here are some examples of reasonable testing based on the collective experience of the current RTI advocates. Your advocate may always ask for more testing depending on the nature of the change.","title":"Testing"},{"location":"contributing/#all-changes","text":"Make sure you test the results of the illumos-gate build with only your changesets applied. To do this, you will need to build the illumos code . It is generally insufficient to test the build results of a downstream fork that contains other non-trivial changes as there may be implicit dependencies that break other consumers of the core illumos gate. If your code has been running in production in another distro or has gone through other testing downstream, please include that information, though by itself may be insufficient to constitute sufficient testing.","title":"All changes"},{"location":"contributing/#changing-a-single-program","text":"If your change affects only a single binary, it is likely sufficient to copy this binary to a downstream distro of reasonable similarity and running your tests there. These tests should cover enough functionality to demonstrate the correctness of your changes, and could involve stress tests in addition to functional tests depending on the nature of the change. This assumes that the binary has a trivial set of library dependencies that are reasonably standard across distros.","title":"Changing a single program"},{"location":"contributing/#changing-the-implementation-of-a-library","text":"If your change affects the implementation of a library without changing external interfaces, you should run tests against a reasonable subset of programs that exercise the code in question. As with a single binary, it is likely sufficient to copy this library to a distro which has identical interfaces, though for some core libraries (most notably libc), you will probably need to bootstrap a complete distro given the challenges with swapping such libraries on a running system, though this depends on the distro in question.","title":"Changing the implementation of a library"},{"location":"contributing/#changing-the-implementation-of-a-driver-or-adding-a-new-driver","text":"If your change affects a single driver, you may or may not be able to get away with copying over that driver to an alternate distro. On one hand, the kernel interfaces are likely identical, but if the core implementation of that distro has diverged significantly from illumos-gate, you may be asked to bootstrap a complete environment from your illumos build. Driver tests should demonstrate a reasonable amount of functional and stress testing on appropriate hardware.","title":"Changing the implementation of a driver or adding a new driver"},{"location":"contributing/#changing-the-core-kernel-or-multiple-interconnected-binaries","text":"If you are making a change to the core kernel, or have a series of changes across a number of libraries, commands, or kernel components that need to be tested as a cohesive whole, you should bootstrap a usable environment from your illumos-gate build that is sufficient to demonstrate the correctness of your changes. Exactly what \"bootstrapping\" means is dependent on the distro, but the goal is to run the entirety of the your illumos-gate build (not a combination of downstream and upstream illumos-gate bits) in a testable environment. Not all distros are capable of bootstrapping a bare illumos-gate build - check the distribution list and ask on the developer list if you are unsure how to do this. Running onu on OpenIndiana or building an illumos-live distribution are two such ways to demonstrate this testing that have been used in the past, but they are not the only ones. The scope of testing here will likely be more substantial, and should focus on stability of the system as well as the functionality of the changed component(s). As always, contact your advocate (or the advocates list if you don't yet have someone in mind) if you have more questions about what constitutes sufficient testing for a particular change.","title":"Changing the core kernel or multiple interconnected binaries"},{"location":"contributing/#code-review","text":"At least one person (other than you, of course) should review your changes. These reviewers should have demonstrated expertise in the area in question or are trusted as knowledgeable by the illumos community at large. If you work for a commercial entity, it is best to include reviewers from outside your company, but this is not required. Your RTI advocate is the ultimate arbiter of whether your review is sufficient. If you don't know how to find adequate review, you may post the changes to the developer mailing list to ask for feedback, or ask the RTI advocates if there is anyone in particular they'd like to see review the code. For larger changes, please link to a resource on the web, instead of attaching a patch file. You may use a webrev (see below), a private hgweb or gitweb or online services like Bitbucket, GitHub, or Gitorious to share your changes. Remember to mention the issue ID in the email - if one does not yet exist, please create one!","title":"Code Review"},{"location":"contributing/#generate-a-key-pair","text":"If you don't already have an SSH public key in your account in the bug tracker , generate a key pair like this on your machine (usually as the building/development user account): $ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/USER/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/USER/.ssh/id_rsa. Your public key has been saved in /home/USER/.ssh/id_rsa.pub. $ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3... Then paste your public key into the box on your account settings page and save the changes. Wait for a while for the change to propagate to the webrev server. Note if you leave your passphrase blank you will be able to both publish and delete your webrevs as per the latest instructions on the main page at http://cr.illumos.org/ (this both creates and uploads your webrev - see \"Creating and Uploaded in one step\" ) however if you use a passphrase you will not be able to delete your webrevs as only publish will ask you for your passphrase.","title":"Generate a key pair"},{"location":"contributing/#creating-a-webrev","text":"The webrev(1ONBLD) tool is an easy way to show other people changes you have made. It presents changes (including commit messages) in multiple formats viewable from a web browser. If you have installed an illumos build, you can run webrev like this: /opt/onbld/bin/webrev -O -o illumos-123-webrev Else, from your workspace if you have built the tools: ksh93 bldenv.sh illumos.sh -c webrev -O -o illumos-123-webrev Or to use webrev provided by installed ON build tools on a non-illumos system: /opt/onbld/bin/webrev -I usr/src/tools/scripts/its.reg -O -o illumos-123-webrev Note: The reason for the -I option is to provide links to our issue tracker. If you see *** failed to import extension hgext.cdm from .../usr/src/tools/proto/root_i386-nd/opt/onbld/lib/python2.6/onbld/hgext/cdm.py: cannot import name WorkList, try running webrev from the workspace instead. Upload the directory somewhere people can access it from the web, such as a personal web site. You may also use the free webrev hosting provided by the illumos project as described in the next section.","title":"Creating a webrev"},{"location":"contributing/#creating-and-uploading-a-webrev-in-one-step","text":"To publish a webrev, you'll first need to make sure your SSH key is up-to-date in the illumos bug tracker . Refer to Generate a key pair above for more information. Please note that it takes a couple of minutes for your added (or updated) key to get copied to the webrev server. Once you have a key uploaded, you can use webrev(1ONBLD) to generate and upload your webrev, all at once, thus: webrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -U You can delete a previously uploaded webrev thus: webrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -D Note that $SOME_NAME (in the examples above) is an arbitrary string that will form part of the URL to your webrev. This is not your user name but rather a descriptive name of the issue and/or fix. Note, also, that you should always use webrev@ in the rsync URL, not your bug tracker username. Once uploaded, your webrev will be in your directory here: http://cr.illumos.org/~webrev for example assuming your login name is jondoe and your $SOME_NAME is 1023 the final webrev will be located as $SOME_NAME e.g. 1023 under your directory http://cr.illumos.org/~webrev/jondoe/ or with a complete path of http://cr.illumos.org/~webrev/jondoe/1023 .","title":"Creating and uploading a webrev in one step"},{"location":"contributing/#review-board","text":"For reviews you could also use the illumos' Review Board instance at https://illumos.org/rb . You should be able to log in with your existing illumos bug tracker username and password.","title":"Review Board"},{"location":"contributing/#ensuring-adequate-review","text":"It is up to you as a contributor to gather reasonable review to satisfy your RTI advocate that the code is correct and of high quality. Exactly what this means will vary based on the nature and scope of the change, but here are some guidelines that will give the advocates confidence in your changes. As always, trust your avocate and apply \"shrink to fit\". There should be at least one code reviewer (focused on the implementation details) that is different from the advocate (focused on ensuring overall quality of contributions). For non-trivial changes to major technology areas (ZFS, DTrace, etc), at least one of the reviewers should be regarded as a subject matter expert by the community. Changes with significant impact should participate in a public review when appropriate, or otherwise ensure that alternate opinions are represented. When there are disagreements, every attempt should be made to adequately address reviewer's comments. In the event they cannot, it is acceptable to submit an RTI with known dissent. Such disagreements must be noted in the RTI submission with an explanation as to why the review comments were not addressed. When in doubt, more review is generally better, and you can always ask the advocates for guidance.","title":"Ensuring adequate review"},{"location":"contributing/#submitting-a-patch","text":"When you have adequate code review and test results for your proposed change, you prepare a \"request to integrate\" (RTI). Your RTI should include: The link to the illumos issue you're fixing, i.e. https://illumos.org/issues/1 The issue synopsis (see the sample change description below) A link to the changes that were reviewed (preferably a webrev, code review page, or web repository view). The full \"change set description\", (i.e. \"hg outgoing\" or \"git whatchanged -v origin/master..\") including: issue number(s) and description(s) Reviewed by: XXX lines list of files affected Here is an example change description: 123 Description of the issue in our tracker Reviewed by: Jack jack@eng.sun.com Reviewed by: Ohana Matsumae ohana@kissui.ishikawa.jp Note You can use git commit --amend to fix the change description. Output of git pbchk (you'll need the \"cadmium\" extension for git) Attach the mail_msg file from a full nightly build (including lint ), which should be free of warnings. Supply information about how the changes were tested. Attach the actual changes, either from git format-patch . (the webrev is not sufficient. Attach an actual patch) An Advocate will need to judge whether your code review and testing are adequate for the scope of changes you propose. Note that the advocate's job is not necessarily to review your code, only to judge whether review and testing was adequate. When you are ready, send an email to the illumos Advocates . You don't need to subscribe to this list, just send an email to . If you're interested in what past RTIs looked like, you can browse past messages . Your email needs to be less than 2MB in size. If your change is large, compress the patch or make it available over HTTP. If your mail_msg is large, something is wrong. You should soon get a reply with additional feedback if needed, or a \"thank you\" for being part of the illumos developer community!","title":"Submitting A Patch"},{"location":"contributing/#credits","text":"","title":"Credits"},{"location":"contributing/docs/","text":"Contributing Documentation Introduction If you'd like to help expand our documentation, we'd love the assistance. This site is hosted on GitHub and uses mkdocs . Process If you notice an error or see something that can be improved, or you want to write a whole new section, you have a couple options: Local Development Fork the illumos/docs repo and submit a Pull Request. You'll need to install mkdocs , and some of our dependencies on your workstation to help with development and testing. pip install mkdocs pip install mkdocs-material pip install markdown-include We enable a number of extensions. You might want to review the documentation for them. Some of the more useful ones are: https://squidfunk.github.io/mkdocs-material/extensions/admonition/ https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ Online Development Alternatively, you can edit the page directly in GitHub, and submit a Pull Request. Review Your changes will go through a review process and hopefully be merged in! Help Wanted! We've already identified some key pages where we need to improve documentation; have a look at the open issues for the doc repository to see if you can lend a hand.","title":"Documentation"},{"location":"contributing/docs/#contributing-documentation","text":"","title":"Contributing Documentation"},{"location":"contributing/docs/#introduction","text":"If you'd like to help expand our documentation, we'd love the assistance. This site is hosted on GitHub and uses mkdocs .","title":"Introduction"},{"location":"contributing/docs/#process","text":"If you notice an error or see something that can be improved, or you want to write a whole new section, you have a couple options:","title":"Process"},{"location":"contributing/docs/#local-development","text":"Fork the illumos/docs repo and submit a Pull Request. You'll need to install mkdocs , and some of our dependencies on your workstation to help with development and testing. pip install mkdocs pip install mkdocs-material pip install markdown-include We enable a number of extensions. You might want to review the documentation for them. Some of the more useful ones are: https://squidfunk.github.io/mkdocs-material/extensions/admonition/ https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ https://squidfunk.github.io/mkdocs-material/extensions/pymdown/","title":"Local Development"},{"location":"contributing/docs/#online-development","text":"Alternatively, you can edit the page directly in GitHub, and submit a Pull Request.","title":"Online Development"},{"location":"contributing/docs/#review","text":"Your changes will go through a review process and hopefully be merged in!","title":"Review"},{"location":"contributing/docs/#help-wanted","text":"We've already identified some key pages where we need to improve documentation; have a look at the open issues for the doc repository to see if you can lend a hand.","title":"Help Wanted!"},{"location":"contributing/qds/","text":"The Quality Death Spiral Terminology Term Definition FCS First Customer Ship gate Source code repository Put [it] back Committing code to the gate Introduction Jeff Bonwick was the gatekeeper for Solaris 2.5. He gave a talk on Solaris to the Sun Systems Group in September, 1994. It included a section on the Quality Death Spiral -- a timeless phenomenon that remains our omnipresent fear: The following is paraphrasing Jeff's talk. If it's broken, rip it out! FCS quality all the time Put it back today, 20 of your (current) friends will be running it tomorrow Gate breakage grinds other development to a halt The product, not any one project, is what matters Mistakes will happen; negligence cannot FCS quality all the time Why is this so important? Only way to avoid the quality death spiral: People hear the gate is broken Decide not to risk a bringover Fewer people run the latest stuff Less real-life testing New bugs not found Quality drops further Morale tracks quality Downward spiral hard to break Recovery time can be very long Originally sourced from http://hub.opensolaris.org/bin/view/Community+Group+on/qual_death_spiral .","title":"Quality Death Spiral"},{"location":"contributing/qds/#the-quality-death-spiral","text":"Terminology Term Definition FCS First Customer Ship gate Source code repository Put [it] back Committing code to the gate","title":"The Quality Death Spiral"},{"location":"contributing/qds/#introduction","text":"Jeff Bonwick was the gatekeeper for Solaris 2.5. He gave a talk on Solaris to the Sun Systems Group in September, 1994. It included a section on the Quality Death Spiral -- a timeless phenomenon that remains our omnipresent fear: The following is paraphrasing Jeff's talk.","title":"Introduction"},{"location":"contributing/qds/#if-its-broken-rip-it-out","text":"FCS quality all the time Put it back today, 20 of your (current) friends will be running it tomorrow Gate breakage grinds other development to a halt The product, not any one project, is what matters Mistakes will happen; negligence cannot","title":"If it's broken, rip it out!"},{"location":"contributing/qds/#fcs-quality-all-the-time","text":"Why is this so important? Only way to avoid the quality death spiral: People hear the gate is broken Decide not to risk a bringover Fewer people run the latest stuff Less real-life testing New bugs not found Quality drops further Morale tracks quality Downward spiral hard to break Recovery time can be very long Originally sourced from http://hub.opensolaris.org/bin/view/Community+Group+on/qual_death_spiral .","title":"FCS quality all the time"},{"location":"contributing/quality/","text":"So You Want to Develop on illumos Written by Bryan Cantrill Terminology Term Definition FCS First Customer Ship gate Source code repository gatekeeper Release Engineer responsible for ensuring the gate is working putback Committing code to the gate jurassic Server in the Sun Microsystems engineering dept. Introduction So you're new to open source, and/or you're new to illumos. Maybe you have lots of experience developing mission-critical software, maybe you have none. But if you haven't already figured it out, we take quality very seriously around here. Developing illumos is very hard, and it's very important. This is good news, not bad news -- solving easy problems is boring and solving irrelevant problems is, well, irrelevant. But you should be prepared for the fact that you will need to push yourself to deliver the highest quality software. If you haven't already discovered it, illumos -- like any large software system -- has a complete range of software quality within its many subsystems. Immaculate Some illumos subsystems are beautiful works of engineering -- they are squeaky clean, well-designed and well-crafted. These subsystems are a joy to work in but (and here's the catch) by virtue of being well-designed and well-implemented, they generally don't need a whole lot of work. So you'll get to use them, appreciate them, and be inspired by them -- but you probably won't spend much time modifying them. (And because many of these subsystems have been implemented by engineers who are now part of the active illumos community, many of the changes will be done by the original implementor(s) anyway.) Fetid Other illumos subsystems are cobbled-together piles of junk -- reeking garbage barges that have been around longer than anyone remembers, floating from one release to the next. These subsystems have few-to-no comments (or what comments they have are clearly wrong), are poorly designed, needlessly complex, badly implemented and virtually undebuggable. There are often parts that work by accident, and unused or little-used parts that simply never worked at all. They manage to survive for one or more of the following reasons: They work just well enough to not justify the cost of rewriting them The problem they solve isn't important enough to justify the cost of rewriting them The problem they solve is so nasty that the cost of a rewrite is enormous -- or at least it dwarfs the cost of ongoing maintenance If you find yourself having to do work in one of these subsystems, you must exercise extreme caution: you will need to write as many test cases as you can think of to beat the snot out of your modification, and you will need to perform extensive self-review. You can try asking for assistance, but you may quickly discover that no one is available who understands that particular subsystem. Your code reviewers may not be able to help much either -- maybe you'll find one or two people who have had the same misfortune that you find yourself experiencing, but it's more likely that you will have to explain most aspects of the subsystem to your reviewers. You may discover as you work in the subsystem that maintaining it is simply untenable -- it may be time to consider rewriting the subsystem from scratch. (After all, most of the subsystems that are in the first category replaced subsystems that were in the second.) One should not come to this decision too quickly: rewriting a subsystem from scratch is enormously difficult and time-consuming. Still, don't rule it out a priori. Even if you decide not to rewrite such a subsystem, you should improve it while you're there in ways that don't introduce excessive risk. For example, if something took you a while to figure out, don't hesitate to add a block comment to explain your discoveries. And if it was a pain in the ass to debug, you should add the debugging support that you found lacking. This will make it slightly easier on the next engineer -- and it will make it easier on you when you need to debug your own modifications. Grimy Most illumos subsystems, however, don't actually fall neatly into either of these categories -- they are somewhere in the middle. That is, they have parts that are well thought out, or design elements that are sound, but they are also littered with implicit intradependencies within the subsystem or implicit interdependencies with other subsystems. They may have debugging support, but perhaps it is incomplete or out of date. Perhaps the subsystem effectively met its original design goals, but it has been extended to solve a new problem in a way that has left it brittle or overly complex. Many of these subsystems have been fixed to the point that they work reliably -- but they are delicate and they must be modified with care. Due Diligence The majority of work that you will do on existing code will be to subsystems in this last category. You must be very cautious when making changes to these subsystems. Sometimes these subsystems have local experts, but many changes will go beyond their expertise. (After all, part of the problem with these subsystems is that they often weren't designed to accommodate the kind of change you might want to make.) You must extensively test your change to the subsystem. Run your change on your desktop, your laptop, your home machine and every kind of machine you can grab a tip line to. But you can't just be content with booting a machine with your change -- you must beat the hell out of it. Sometimes there is a stress test available that you may run, but this is not a substitute for writing your own tests . You should find any standards tests that might apply to the subsystem and run them. (If you don't know which standards tests might apply to your change, consult the gatekeepers or the C-team.) You should review your own changes extensively. Are you obeying all of the locking rules? What are the locking rules, anyway? Are you building new dependencies into the subsystem? (This can only be answered with extensive, laborious cscope'ing -- you cannot rely on code reviewers to pick up subtle new dependencies.) Review your changes again. Then, print your changes out, take them to a place where you can concentrate, and review them yet again. And when you review your own code, review it not as someone who believes that the code is right, but as someone who is certain that the code is wrong. As you perform your self-review, look for novel angles from which to test your code. Then test and test and test. It can all be summed up by asking yourself one question: have you reviewed and tested your change every way that you know how? You should not even contemplate a putback until your answer to this is an unequivocal YES .. Remember: you are always empowered as an engineer to take more time to test your work. You can -- always take time to do the Right Thing. This is important to avoid the Quality Death Spiral . You must do your part by delivering FCS quality all the time . Does this mean that you should contemplate ritual suicide if you introduce a serious bug? Of course not -- everyone who has made enough modifications to delicate, critical subsystems has introduced a change that has induced expensive downtime somewhere. We know that this will be so because writing system software is just so damned tricky and hard. Indeed, it is because of this truism that you must demand of yourself that you not integrate a change until you are out of ideas of how to test it. Because you will one day introduce a bug of such subtlety that it will seem that no one could have caught it. And what do you do when that awful, black day arrives? Here's a quick coping manual from those of us who have been there: Don't pretend it didn't happen -- you screwed up, but your mother still loves you (unless, of course, her home directory is on jurassic) Don't minimize the problem, shrug it off or otherwise make light of it -- this is serious business, and we take it seriously If someone spent time debugging your bug, thank them If someone was inconvenienced by your bug, apologize to them Take responsibility for your bug -- don't bother to blame other subsystems, the inherent complexity of illumos, your code reviewers, etc. But most importantly, you must ask yourself: what could I have done differently ? If you honestly don't know, ask a community member to help you. We've all been there, and we want to make sure that you are able to learn from it. Once you have an answer, take solace in it; no matter how bad you feel for having introduced a problem, you can know that the experience has improved you as an engineer -- and that's the most anyone can ask for.","title":"On Quality"},{"location":"contributing/quality/#so-you-want-to-develop-on-illumos","text":"Written by Bryan Cantrill Terminology Term Definition FCS First Customer Ship gate Source code repository gatekeeper Release Engineer responsible for ensuring the gate is working putback Committing code to the gate jurassic Server in the Sun Microsystems engineering dept.","title":"So You Want to Develop on illumos"},{"location":"contributing/quality/#introduction","text":"So you're new to open source, and/or you're new to illumos. Maybe you have lots of experience developing mission-critical software, maybe you have none. But if you haven't already figured it out, we take quality very seriously around here. Developing illumos is very hard, and it's very important. This is good news, not bad news -- solving easy problems is boring and solving irrelevant problems is, well, irrelevant. But you should be prepared for the fact that you will need to push yourself to deliver the highest quality software. If you haven't already discovered it, illumos -- like any large software system -- has a complete range of software quality within its many subsystems.","title":"Introduction"},{"location":"contributing/quality/#immaculate","text":"Some illumos subsystems are beautiful works of engineering -- they are squeaky clean, well-designed and well-crafted. These subsystems are a joy to work in but (and here's the catch) by virtue of being well-designed and well-implemented, they generally don't need a whole lot of work. So you'll get to use them, appreciate them, and be inspired by them -- but you probably won't spend much time modifying them. (And because many of these subsystems have been implemented by engineers who are now part of the active illumos community, many of the changes will be done by the original implementor(s) anyway.)","title":"Immaculate"},{"location":"contributing/quality/#fetid","text":"Other illumos subsystems are cobbled-together piles of junk -- reeking garbage barges that have been around longer than anyone remembers, floating from one release to the next. These subsystems have few-to-no comments (or what comments they have are clearly wrong), are poorly designed, needlessly complex, badly implemented and virtually undebuggable. There are often parts that work by accident, and unused or little-used parts that simply never worked at all. They manage to survive for one or more of the following reasons: They work just well enough to not justify the cost of rewriting them The problem they solve isn't important enough to justify the cost of rewriting them The problem they solve is so nasty that the cost of a rewrite is enormous -- or at least it dwarfs the cost of ongoing maintenance If you find yourself having to do work in one of these subsystems, you must exercise extreme caution: you will need to write as many test cases as you can think of to beat the snot out of your modification, and you will need to perform extensive self-review. You can try asking for assistance, but you may quickly discover that no one is available who understands that particular subsystem. Your code reviewers may not be able to help much either -- maybe you'll find one or two people who have had the same misfortune that you find yourself experiencing, but it's more likely that you will have to explain most aspects of the subsystem to your reviewers. You may discover as you work in the subsystem that maintaining it is simply untenable -- it may be time to consider rewriting the subsystem from scratch. (After all, most of the subsystems that are in the first category replaced subsystems that were in the second.) One should not come to this decision too quickly: rewriting a subsystem from scratch is enormously difficult and time-consuming. Still, don't rule it out a priori. Even if you decide not to rewrite such a subsystem, you should improve it while you're there in ways that don't introduce excessive risk. For example, if something took you a while to figure out, don't hesitate to add a block comment to explain your discoveries. And if it was a pain in the ass to debug, you should add the debugging support that you found lacking. This will make it slightly easier on the next engineer -- and it will make it easier on you when you need to debug your own modifications.","title":"Fetid"},{"location":"contributing/quality/#grimy","text":"Most illumos subsystems, however, don't actually fall neatly into either of these categories -- they are somewhere in the middle. That is, they have parts that are well thought out, or design elements that are sound, but they are also littered with implicit intradependencies within the subsystem or implicit interdependencies with other subsystems. They may have debugging support, but perhaps it is incomplete or out of date. Perhaps the subsystem effectively met its original design goals, but it has been extended to solve a new problem in a way that has left it brittle or overly complex. Many of these subsystems have been fixed to the point that they work reliably -- but they are delicate and they must be modified with care.","title":"Grimy"},{"location":"contributing/quality/#due-diligence","text":"The majority of work that you will do on existing code will be to subsystems in this last category. You must be very cautious when making changes to these subsystems. Sometimes these subsystems have local experts, but many changes will go beyond their expertise. (After all, part of the problem with these subsystems is that they often weren't designed to accommodate the kind of change you might want to make.) You must extensively test your change to the subsystem. Run your change on your desktop, your laptop, your home machine and every kind of machine you can grab a tip line to. But you can't just be content with booting a machine with your change -- you must beat the hell out of it. Sometimes there is a stress test available that you may run, but this is not a substitute for writing your own tests . You should find any standards tests that might apply to the subsystem and run them. (If you don't know which standards tests might apply to your change, consult the gatekeepers or the C-team.) You should review your own changes extensively. Are you obeying all of the locking rules? What are the locking rules, anyway? Are you building new dependencies into the subsystem? (This can only be answered with extensive, laborious cscope'ing -- you cannot rely on code reviewers to pick up subtle new dependencies.) Review your changes again. Then, print your changes out, take them to a place where you can concentrate, and review them yet again. And when you review your own code, review it not as someone who believes that the code is right, but as someone who is certain that the code is wrong. As you perform your self-review, look for novel angles from which to test your code. Then test and test and test. It can all be summed up by asking yourself one question: have you reviewed and tested your change every way that you know how? You should not even contemplate a putback until your answer to this is an unequivocal YES .. Remember: you are always empowered as an engineer to take more time to test your work. You can -- always take time to do the Right Thing. This is important to avoid the Quality Death Spiral . You must do your part by delivering FCS quality all the time . Does this mean that you should contemplate ritual suicide if you introduce a serious bug? Of course not -- everyone who has made enough modifications to delicate, critical subsystems has introduced a change that has induced expensive downtime somewhere. We know that this will be so because writing system software is just so damned tricky and hard. Indeed, it is because of this truism that you must demand of yourself that you not integrate a change until you are out of ideas of how to test it. Because you will one day introduce a bug of such subtlety that it will seem that no one could have caught it. And what do you do when that awful, black day arrives? Here's a quick coping manual from those of us who have been there: Don't pretend it didn't happen -- you screwed up, but your mother still loves you (unless, of course, her home directory is on jurassic) Don't minimize the problem, shrug it off or otherwise make light of it -- this is serious business, and we take it seriously If someone spent time debugging your bug, thank them If someone was inconvenienced by your bug, apologize to them Take responsibility for your bug -- don't bother to blame other subsystems, the inherent complexity of illumos, your code reviewers, etc. But most importantly, you must ask yourself: what could I have done differently ? If you honestly don't know, ask a community member to help you. We've all been there, and we want to make sure that you are able to learn from it. Once you have an answer, take solace in it; no matter how bad you feel for having introduced a problem, you can know that the experience has improved you as an engineer -- and that's the most anyone can ask for.","title":"Due Diligence"},{"location":"developers/","text":"How to build illumos Please also refer to the illumos Developer's Guide . Requires Review This page references some old practices and needs to be reviewed. Introduction This document will help prepare you to build the source code for illumos. It assumes some familiarity with development on Unix-like systems. My First illumos Build If you are just dipping your toes into illumos, you should consider reading Ryan Zezeski's post on his own first build ! You need an illumos-based operating system to build illumos. Cross-compilation is not supported. If you don't have one installed, the quickest way to get started is to download and install either OpenIndiana or OmniOS and install them in a VM or on metal. All commands in this guide assume you run them as an unprivileged user. sudo will be prepended to commands which need additional privileges; on some systems pfexec can be used instead, if your user has the correct RBAC profiles. The generic commands below use a $USER variable to define the current (unprivileged) user account's name which will ultimately be used to compile the project. If you are not using a stock shell or have manipulated the $USER variable in your environment at a site, system, or user level, you are responsible for diagnosing and addressing any consequences. Hardware Support You'll generally have good luck with common x86 components, but it's always a good idea to refer to the Hardware Compatibility List or Joyent's Manufactory database . Installing required packages You will need to install the basic development environment to build illumos. OpenIndiana sudo pkg install build-essential OmniOS sudo pkg install pkg:/developer/illumos-tools Compilers The source code was traditionally built using Sun's closed-source compiler suite, which was named Sun Studio at the time of the illumos fork. We now build illumos with GCC, but you will still need some tools from Sun Studio and those are available as packages in the legacy OpenSolaris repository. GCC The primary version of GCC necessary for development and integration 4.4.4 (4.4.4-il-4) should have been installed on your system when you installed the prerequisites above. OpenIndiana Hipster 20161030 OpenIndiana Hipster 20161030 ships with gcc-4.4.4-il-3, so make sure to update that package to -il-4 before building. Building with 4.4.4-il-3 leads to build failures with warnings as below in the mail_msg and nightly.log: ../../i86pc/os/trap.c:2188: error: unknown conversion type character - in format [-Wformat] ../../i86pc/os/trap.c:2188: error: too many arguments for format [-Wformat-extra-args] Note that the compiler for building illumos-gate installs into /opt/gcc/4.4.4 on OpenIndiana, and /opt/gcc-4.4.4 on OmniOS and is not available in the default PATH for building application programs. You can add (OI example) PATH=\"/opt/gcc/4.4.4/bin:$PATH\"; export PATH to your profile to reference this compiler, or install one of the other GCC builds, destined as the current default compiler for application programs (versions ranging from 3.4.3 to 4.6.x, see pkg info -r '*gcc*' for details du-jour). Unfortunately, Sun Studio lint is currently required even for GCC-only builds. We currently deliver Lint libraries built using the closed Sun Studio version of lint. OmniOS includes this in its sunstudio12.1 package. On OpenIndiana it's delivered as part of developer/sunstudio12u1/cc , which you shouldn't install explicitly if you've already installed build-essential . Sun Studio Building with Sun Studio is generally unsupported. If you have need of it, please refer to Building With Sun Studio . Next Steps Once you've got the prerequisites installed, you're ready to start building illumos .","title":"Overview"},{"location":"developers/#how-to-build-illumos","text":"Please also refer to the illumos Developer's Guide . Requires Review This page references some old practices and needs to be reviewed.","title":"How to build illumos"},{"location":"developers/#introduction","text":"This document will help prepare you to build the source code for illumos. It assumes some familiarity with development on Unix-like systems. My First illumos Build If you are just dipping your toes into illumos, you should consider reading Ryan Zezeski's post on his own first build ! You need an illumos-based operating system to build illumos. Cross-compilation is not supported. If you don't have one installed, the quickest way to get started is to download and install either OpenIndiana or OmniOS and install them in a VM or on metal. All commands in this guide assume you run them as an unprivileged user. sudo will be prepended to commands which need additional privileges; on some systems pfexec can be used instead, if your user has the correct RBAC profiles. The generic commands below use a $USER variable to define the current (unprivileged) user account's name which will ultimately be used to compile the project. If you are not using a stock shell or have manipulated the $USER variable in your environment at a site, system, or user level, you are responsible for diagnosing and addressing any consequences.","title":"Introduction"},{"location":"developers/#hardware-support","text":"You'll generally have good luck with common x86 components, but it's always a good idea to refer to the Hardware Compatibility List or Joyent's Manufactory database .","title":"Hardware Support"},{"location":"developers/#installing-required-packages","text":"You will need to install the basic development environment to build illumos.","title":"Installing required packages"},{"location":"developers/#openindiana","text":"sudo pkg install build-essential","title":"OpenIndiana"},{"location":"developers/#omnios","text":"sudo pkg install pkg:/developer/illumos-tools","title":"OmniOS"},{"location":"developers/#compilers","text":"The source code was traditionally built using Sun's closed-source compiler suite, which was named Sun Studio at the time of the illumos fork. We now build illumos with GCC, but you will still need some tools from Sun Studio and those are available as packages in the legacy OpenSolaris repository.","title":"Compilers"},{"location":"developers/#gcc","text":"The primary version of GCC necessary for development and integration 4.4.4 (4.4.4-il-4) should have been installed on your system when you installed the prerequisites above. OpenIndiana Hipster 20161030 OpenIndiana Hipster 20161030 ships with gcc-4.4.4-il-3, so make sure to update that package to -il-4 before building. Building with 4.4.4-il-3 leads to build failures with warnings as below in the mail_msg and nightly.log: ../../i86pc/os/trap.c:2188: error: unknown conversion type character - in format [-Wformat] ../../i86pc/os/trap.c:2188: error: too many arguments for format [-Wformat-extra-args] Note that the compiler for building illumos-gate installs into /opt/gcc/4.4.4 on OpenIndiana, and /opt/gcc-4.4.4 on OmniOS and is not available in the default PATH for building application programs. You can add (OI example) PATH=\"/opt/gcc/4.4.4/bin:$PATH\"; export PATH to your profile to reference this compiler, or install one of the other GCC builds, destined as the current default compiler for application programs (versions ranging from 3.4.3 to 4.6.x, see pkg info -r '*gcc*' for details du-jour). Unfortunately, Sun Studio lint is currently required even for GCC-only builds. We currently deliver Lint libraries built using the closed Sun Studio version of lint. OmniOS includes this in its sunstudio12.1 package. On OpenIndiana it's delivered as part of developer/sunstudio12u1/cc , which you shouldn't install explicitly if you've already installed build-essential .","title":"GCC"},{"location":"developers/#sun-studio","text":"Building with Sun Studio is generally unsupported. If you have need of it, please refer to Building With Sun Studio .","title":"Sun Studio"},{"location":"developers/#next-steps","text":"Once you've got the prerequisites installed, you're ready to start building illumos .","title":"Next Steps"},{"location":"developers/build-components/","text":"Requires Review This page references some old practices and needs to be reviewed. How to build components When it's appropriate You can build just a component when you don't need the entire consolidation, when you are building a self-contained utility, when you are getting started with Illumos, or when you want to do a quick build. This approach is only for independent programs like m4, date, cron, hostid, man... etc. This example I'm building the m4 command from the ONNV consolidation on a system running oi_148. Requirements Setup of the compilation environment is detailed in How To Build illumos . Mercurial (hg) This should be installed in /usr from the IPS package pkg:/developer/versioning/mercurial. The compiler The C compiler is the properly patched version of GCC 4.4.4 Build tools These reside in /opt/onbld and are installed from the IPS package pkg:/developer/build/onbld. The PATH Mine is: PATH=/usr/local/bin:/usr/bin:/opt/SUNWspro/bin:/usr/ccs/bin:\\ /opt/onbld/bin:/opt/onbld/bin/i386:/opt/sfw/bin:/usr/sfw/bin:\\ /usr/dt/bin:/usr/openwin/bin:/usr/sbin export PATH Just make sure all of the executables you need are available through the PATH. A symlink I needed this symlink for the PATH to work correctly: /opt/SUNWspro - /opt/sunstudio12.1 Preparation Setup of the compilation environment, including preparation of the recommended directories in a ZFS layout, and checkout of the code, is detailed in How To Build illumos. The steps below outline an alternative (and somewhat incompatible) approach to this procedure. Still, if you only intend to build small pieces of the project, especially if you only have an unprivileged user account on the build host, these instructions should suffice and may be less complicated to follow. Set up the location $ cd ~/Downloads $ mkdir code $ cd code Obtain the source $ hg clone ssh://anonhg@hg.illumos.org/illumos-gate Set up the environment file $ cd illumos-gate $ cp -p usr/src/tools/env/illumos.sh . $ cp -p illumos.sh illumos.sh-orig $ vim illumos.sh ... ### Result of edition: $ diff illumos.sh-orig illumos.sh 58c58 export GATE= testws --- export GATE= illumos-gate 61c61 export CODEMGR_WS= $HOME/ws/$GATE --- export CODEMGR_WS= $HOME/Downloads/code/$GATE 196c196 #export ONBLD_TOOLS= /opt/onbld --- export ONBLD_TOOLS= /opt/onbld 217a218,225 # Lint locations i386_LINT=/opt/sunstudio12.1/bin/lint; export i386_LINT amd64_LINT=/opt/sunstudio12.1/bin/lint; export amd64_LINT sparc_LINT=/opt/sunstudio12.1/bin/lint; export sparc_LINT sparcv9_LINT=/opt/sunstudio12.1/bin/lint; export sparcv9_LINT #### As you can see, I modified some lines in the file to suit my build system, and added a few so that the lint command from Sun Studio 12u1 could be found. Preparing the workspace for component build A few tools have to be prepared before we can build a component. To build them, you should run commands in a new shell which sets some environment variables: ln -s usr/src/tools/scripts/bldenv.sh . ksh93 bldenv.sh -d illumos.sh -c cd usr/src dmake setup Procedure Location Change directory to where the m4 Makefile (the build target of our example) resides: $ cd ~/Downloads/code/illumos-gate/usr/src/cmd/sgs/m4 Build Clean out the object files by 'make clean'. It only deletes object files, and not the generated executables. But the executables will be regenerated once all the object files are rebuilt (and become newer than the executable target). $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make clean Do a dry-run by 'make -n' $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make -n Now actually build m4 binary by 'make' $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make Note that the argument list must be quoted if it contains more than one word. Check Object file and i386/m4 executable file got generated. $ find i386/ i386/ i386/Makefile i386/.make.state i386/m4objs i386/m4objs/m4ext.o i386/m4objs/m4y.o i386/m4objs/m4macs.o i386/m4objs/m4.o i386/m4.xpg4 i386/m4objs.xpg4 i386/m4objs.xpg4/m4y_xpg4.o i386/m4objs.xpg4/m4ext.o i386/m4objs.xpg4/m4.o i386/m4objs.xpg4/m4macs.o i386/m4 $ Use \"ldd\" and \"file\" commands to profile the built m4 binary. $ ldd i386/m4 libc.so.1 = /lib/libc.so.1 libm.so.2 = /lib/libm.so.2 $ file i386/m4 i386/m4: ELF 32-bit LSB executable 80386 Version 1 [FPU], \\ dynamically linked, not stripped, \\ no debugging information available $ Run lint $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make lint Alternatives Garrett D Amore suggests: doing make setup in the top level, plus a make install in the directory of interest, usually works if the utility is self contained. Jens Elkner recommends: I made the src tree once nightly to initialize required stuff. After that I just source the script mentioned below when I start working, change to the dir of interest and call make ... . This usually works even if nightly doesn t run through completely ... http://iws.cs.uni-magdeburg.de/~elkner/osol/onbld.env2 Local copy backup in illumos Wiki: onbld.env2 Dan McDonald cites: http://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html I haven t looked very closely at the Illumos build instructions, but I m going to do some things now that will help kernel module writers (e.g. device drivers) get started without resorting to a full build right off the bat. Some component build examples. libc build on oi_148 dual CPU with 2G RAM VMware session (also note this example uses the recommended build directory layout): $pwd /code/illumos-gate/usr/src/lib/libc $time bldenv /code/illumos-gate/illumos.sh make snip ar: creating libc_pic.a /usr/ccs/bin/mcs -d -n .SUNW_ctf libc_pic.a /dev/null 2 1 ar -ts libc_pic.a /dev/null /code/illumos-gate/usr/src/lib/libc/i386/etc real 10m37.770s user 7m58.969s sys 5m54.108s $","title":"Building Components"},{"location":"developers/build-components/#how-to-build-components","text":"","title":"How to build components"},{"location":"developers/build-components/#when-its-appropriate","text":"You can build just a component when you don't need the entire consolidation, when you are building a self-contained utility, when you are getting started with Illumos, or when you want to do a quick build. This approach is only for independent programs like m4, date, cron, hostid, man... etc.","title":"When it's appropriate"},{"location":"developers/build-components/#this-example","text":"I'm building the m4 command from the ONNV consolidation on a system running oi_148.","title":"This example"},{"location":"developers/build-components/#requirements","text":"Setup of the compilation environment is detailed in How To Build illumos .","title":"Requirements"},{"location":"developers/build-components/#mercurial-hg","text":"This should be installed in /usr from the IPS package pkg:/developer/versioning/mercurial.","title":"Mercurial (hg)"},{"location":"developers/build-components/#the-compiler","text":"The C compiler is the properly patched version of GCC 4.4.4","title":"The compiler"},{"location":"developers/build-components/#build-tools","text":"These reside in /opt/onbld and are installed from the IPS package pkg:/developer/build/onbld.","title":"Build tools"},{"location":"developers/build-components/#the-path","text":"Mine is: PATH=/usr/local/bin:/usr/bin:/opt/SUNWspro/bin:/usr/ccs/bin:\\ /opt/onbld/bin:/opt/onbld/bin/i386:/opt/sfw/bin:/usr/sfw/bin:\\ /usr/dt/bin:/usr/openwin/bin:/usr/sbin export PATH Just make sure all of the executables you need are available through the PATH.","title":"The PATH"},{"location":"developers/build-components/#a-symlink","text":"I needed this symlink for the PATH to work correctly: /opt/SUNWspro - /opt/sunstudio12.1","title":"A symlink"},{"location":"developers/build-components/#preparation","text":"Setup of the compilation environment, including preparation of the recommended directories in a ZFS layout, and checkout of the code, is detailed in How To Build illumos. The steps below outline an alternative (and somewhat incompatible) approach to this procedure. Still, if you only intend to build small pieces of the project, especially if you only have an unprivileged user account on the build host, these instructions should suffice and may be less complicated to follow.","title":"Preparation"},{"location":"developers/build-components/#set-up-the-location","text":"$ cd ~/Downloads $ mkdir code $ cd code","title":"Set up the location"},{"location":"developers/build-components/#obtain-the-source","text":"$ hg clone ssh://anonhg@hg.illumos.org/illumos-gate","title":"Obtain the source"},{"location":"developers/build-components/#set-up-the-environment-file","text":"$ cd illumos-gate $ cp -p usr/src/tools/env/illumos.sh . $ cp -p illumos.sh illumos.sh-orig $ vim illumos.sh ... ### Result of edition: $ diff illumos.sh-orig illumos.sh 58c58 export GATE= testws --- export GATE= illumos-gate 61c61 export CODEMGR_WS= $HOME/ws/$GATE --- export CODEMGR_WS= $HOME/Downloads/code/$GATE 196c196 #export ONBLD_TOOLS= /opt/onbld --- export ONBLD_TOOLS= /opt/onbld 217a218,225 # Lint locations i386_LINT=/opt/sunstudio12.1/bin/lint; export i386_LINT amd64_LINT=/opt/sunstudio12.1/bin/lint; export amd64_LINT sparc_LINT=/opt/sunstudio12.1/bin/lint; export sparc_LINT sparcv9_LINT=/opt/sunstudio12.1/bin/lint; export sparcv9_LINT #### As you can see, I modified some lines in the file to suit my build system, and added a few so that the lint command from Sun Studio 12u1 could be found.","title":"Set up the environment file"},{"location":"developers/build-components/#preparing-the-workspace-for-component-build","text":"A few tools have to be prepared before we can build a component. To build them, you should run commands in a new shell which sets some environment variables: ln -s usr/src/tools/scripts/bldenv.sh . ksh93 bldenv.sh -d illumos.sh -c cd usr/src dmake setup","title":"Preparing the workspace for component build"},{"location":"developers/build-components/#procedure","text":"","title":"Procedure"},{"location":"developers/build-components/#location","text":"Change directory to where the m4 Makefile (the build target of our example) resides: $ cd ~/Downloads/code/illumos-gate/usr/src/cmd/sgs/m4","title":"Location"},{"location":"developers/build-components/#build","text":"Clean out the object files by 'make clean'. It only deletes object files, and not the generated executables. But the executables will be regenerated once all the object files are rebuilt (and become newer than the executable target). $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make clean Do a dry-run by 'make -n' $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make -n Now actually build m4 binary by 'make' $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make Note that the argument list must be quoted if it contains more than one word.","title":"Build"},{"location":"developers/build-components/#check","text":"Object file and i386/m4 executable file got generated. $ find i386/ i386/ i386/Makefile i386/.make.state i386/m4objs i386/m4objs/m4ext.o i386/m4objs/m4y.o i386/m4objs/m4macs.o i386/m4objs/m4.o i386/m4.xpg4 i386/m4objs.xpg4 i386/m4objs.xpg4/m4y_xpg4.o i386/m4objs.xpg4/m4ext.o i386/m4objs.xpg4/m4.o i386/m4objs.xpg4/m4macs.o i386/m4 $ Use \"ldd\" and \"file\" commands to profile the built m4 binary. $ ldd i386/m4 libc.so.1 = /lib/libc.so.1 libm.so.2 = /lib/libm.so.2 $ file i386/m4 i386/m4: ELF 32-bit LSB executable 80386 Version 1 [FPU], \\ dynamically linked, not stripped, \\ no debugging information available $ Run lint $ bldenv ~/Downloads/code/illumos-gate/illumos.sh make lint","title":"Check"},{"location":"developers/build-components/#alternatives","text":"Garrett D Amore suggests: doing make setup in the top level, plus a make install in the directory of interest, usually works if the utility is self contained. Jens Elkner recommends: I made the src tree once nightly to initialize required stuff. After that I just source the script mentioned below when I start working, change to the dir of interest and call make ... . This usually works even if nightly doesn t run through completely ... http://iws.cs.uni-magdeburg.de/~elkner/osol/onbld.env2 Local copy backup in illumos Wiki: onbld.env2 Dan McDonald cites: http://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html I haven t looked very closely at the Illumos build instructions, but I m going to do some things now that will help kernel module writers (e.g. device drivers) get started without resorting to a full build right off the bat.","title":"Alternatives"},{"location":"developers/build-components/#some-component-build-examples","text":"libc build on oi_148 dual CPU with 2G RAM VMware session (also note this example uses the recommended build directory layout): $pwd /code/illumos-gate/usr/src/lib/libc $time bldenv /code/illumos-gate/illumos.sh make snip ar: creating libc_pic.a /usr/ccs/bin/mcs -d -n .SUNW_ctf libc_pic.a /dev/null 2 1 ar -ts libc_pic.a /dev/null /code/illumos-gate/usr/src/lib/libc/i386/etc real 10m37.770s user 7m58.969s sys 5m54.108s $","title":"Some component build examples."},{"location":"developers/build-datasets/","text":"Creating Build Datasets By Bayard G. Bell Introduction The main guide assumes that your illumos-gate workspace resides in a directory named /code (likely located in your rpool) and owned by your build user. However, this is not very practical regarding further OS updates, compression, snapshots and rollbacks and a myriad other features that a dedicated ZFS dataset might give you. So it is recommended to create one instead and also link it as /code (at least for the consistency of this guide and some others that link to it): sudo zfs create rpool/export/home/illumos-dev sudo zfs create rpool/export/home/illumos-dev/code sudo ln -s ./export/home/illumos-dev/code / sudo chown -R $USER /export/home/illumos-dev This example still uses the rpool ZFS pool, available by default on any current OpenSolaris system. If your system has other pools, perhaps larger and more performant, you might want to use them instead. As an example of why you might want a separate ZFS dataset, consider checking out the source into a dataset and keeping it pristine, while you do your wildest experiments and compilation in its clone dataset. The snapshot and subsequent clone require no space initially, and can be easily demolished when the wild experiments lead into a dead-end, while you retain the checked-out source code repository and don't have to download it again. Alternately, this can be used to work on several bugs in parallel and keeping the diffs separated for further webrev (see Comparing arbitrary sources with webrev(1) ) and submission upstream (see How To Contribute ). Now that you have a separate dataset, you can optimize it for space and/or access speed by setting some ZFS attributes, for example: sudo zfs set compression=lzjb rpool/export/home/illumos-dev sudo zfs set atime=off rpool/export/home/illumos-dev sudo zfs set sync=disabled rpool/export/home/illumos-dev compression decreases used disk space and may increase IO speed (by reducing mechanical IOPS) at cost of some CPU time (especially during writes) atime disables directory entry updates when reading files; this decreases pool writes and increases available IOPS. If your build host is a VM backed by ZFS storage with automatic snapshots, or if you use an iSCSI volume imported from a storage host as your building zfs pool, this can also save lots of space on the backend storage. sync allows to bypass the ZIL for this dataset. It is believed to somewhat increase write speeds at the cost of potential loss of consistency in case of untimely reboots or kernel panics. Since this is a ZFS dataset, you can later zfs snapshot it (i.e. after successful builds) to make a zfs clone and/or to zfs rollback to some known-good state. In fact, you can (optionally) delegate the administrative rights for that to your build-user: sudo zfs allow -l -d -u $USER \\ create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive \\ rpool/export/home/illumos-dev The -l -d options set this permission locally on the named dataset and on its descendants, including those created in the future. Finally, one of your large space consumers would be the package repository containing the built installable binaries. You can separate that into a standalone dataset for the same ZFS benefits of independent data lifecycle, replication or storage optimization, for example: sudo zfs create -o atime=off -o compression=gzip-9 \\ rpool/export/home/illumos-dev/packages sudo chown -R $USER /export/home/illumos-dev Make the symlink AFTER checking out the source: sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate This last step (symlinking) should be done after getting the source (checkout requires an empty target). It is arguable whether a separate dataset for packages is at all needed (and it is relatively small compared the the build workspace directory). Well, I for one like putting stuff into different boxes. Administrative rationales however include: When working on many bugs, people can have several \"code\" workspaces maintained as ZFS-clones of one golden code repo, as summarized in Working on several bugs at once . However they can want to share the package repository between such projects, and maintain one package depot once configured. Snapshotting the package repo before and after a build to check for differences, or to do a zfs send to another machine. rsync may be better though (since the rebuild would likely wipe the repo and create it anew, even if made up of mostly the same contents \u2013 zfs diff would be huge, but rsync data diff would only include changes). NFS/CIFS-sharing of the package repo may be easier to set up if it is a separate dataset. It can be located separately from workspace \u2013 another pool, different hardware (i.e. ramdisk/SSD for compile workspace, HDD for package repo).","title":"Build Datasets"},{"location":"developers/build-datasets/#creating-build-datasets","text":"By Bayard G. Bell","title":"Creating Build Datasets"},{"location":"developers/build-datasets/#introduction","text":"The main guide assumes that your illumos-gate workspace resides in a directory named /code (likely located in your rpool) and owned by your build user. However, this is not very practical regarding further OS updates, compression, snapshots and rollbacks and a myriad other features that a dedicated ZFS dataset might give you. So it is recommended to create one instead and also link it as /code (at least for the consistency of this guide and some others that link to it): sudo zfs create rpool/export/home/illumos-dev sudo zfs create rpool/export/home/illumos-dev/code sudo ln -s ./export/home/illumos-dev/code / sudo chown -R $USER /export/home/illumos-dev This example still uses the rpool ZFS pool, available by default on any current OpenSolaris system. If your system has other pools, perhaps larger and more performant, you might want to use them instead. As an example of why you might want a separate ZFS dataset, consider checking out the source into a dataset and keeping it pristine, while you do your wildest experiments and compilation in its clone dataset. The snapshot and subsequent clone require no space initially, and can be easily demolished when the wild experiments lead into a dead-end, while you retain the checked-out source code repository and don't have to download it again. Alternately, this can be used to work on several bugs in parallel and keeping the diffs separated for further webrev (see Comparing arbitrary sources with webrev(1) ) and submission upstream (see How To Contribute ). Now that you have a separate dataset, you can optimize it for space and/or access speed by setting some ZFS attributes, for example: sudo zfs set compression=lzjb rpool/export/home/illumos-dev sudo zfs set atime=off rpool/export/home/illumos-dev sudo zfs set sync=disabled rpool/export/home/illumos-dev compression decreases used disk space and may increase IO speed (by reducing mechanical IOPS) at cost of some CPU time (especially during writes) atime disables directory entry updates when reading files; this decreases pool writes and increases available IOPS. If your build host is a VM backed by ZFS storage with automatic snapshots, or if you use an iSCSI volume imported from a storage host as your building zfs pool, this can also save lots of space on the backend storage. sync allows to bypass the ZIL for this dataset. It is believed to somewhat increase write speeds at the cost of potential loss of consistency in case of untimely reboots or kernel panics. Since this is a ZFS dataset, you can later zfs snapshot it (i.e. after successful builds) to make a zfs clone and/or to zfs rollback to some known-good state. In fact, you can (optionally) delegate the administrative rights for that to your build-user: sudo zfs allow -l -d -u $USER \\ create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive \\ rpool/export/home/illumos-dev The -l -d options set this permission locally on the named dataset and on its descendants, including those created in the future. Finally, one of your large space consumers would be the package repository containing the built installable binaries. You can separate that into a standalone dataset for the same ZFS benefits of independent data lifecycle, replication or storage optimization, for example: sudo zfs create -o atime=off -o compression=gzip-9 \\ rpool/export/home/illumos-dev/packages sudo chown -R $USER /export/home/illumos-dev Make the symlink AFTER checking out the source: sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate This last step (symlinking) should be done after getting the source (checkout requires an empty target). It is arguable whether a separate dataset for packages is at all needed (and it is relatively small compared the the build workspace directory). Well, I for one like putting stuff into different boxes. Administrative rationales however include: When working on many bugs, people can have several \"code\" workspaces maintained as ZFS-clones of one golden code repo, as summarized in Working on several bugs at once . However they can want to share the package repository between such projects, and maintain one package depot once configured. Snapshotting the package repo before and after a build to check for differences, or to do a zfs send to another machine. rsync may be better though (since the rebuild would likely wipe the repo and create it anew, even if made up of mostly the same contents \u2013 zfs diff would be huge, but rsync data diff would only include changes). NFS/CIFS-sharing of the package repo may be easier to set up if it is a separate dataset. It can be located separately from workspace \u2013 another pool, different hardware (i.e. ramdisk/SSD for compile workspace, HDD for package repo).","title":"Introduction"},{"location":"developers/build-illumos/","text":"Building illumos Preparing the source-code directory You can use any location, but for the purposes of this guide, we will assume that you have a directory /code owned by your user ID, which you are using to obtain source and build. For a less naive example, see the Build datasets page and some more industrious details on Managing multiple workspaces and Working on several bugs at once. Getting the source You may use the Git source code management system to retrieve the illumos source code. Make sure you have about 6 gigabytes of free space for the source and binaries combined. The repository is available from GitHub using the Git source code control system. The Git repository URI is: git://github.com/illumos/illumos-gate.git Or, if the Git protocol is firewalled at your site: https://github.com/illumos/illumos-gate.git The illumos-gate source can then be cloned using: cd /code git clone https://github.com/illumos/illumos-gate.git Getting closed binaries There are still closed components in illumos that have not yet been replaced. You must get the latest closed binaries from Sun/Oracle, since illumos currently needs those in order to build: cd /code/illumos-gate wget -c \\ https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \\ https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2 tar xjvpf on-closed-bins.i386.tar.bz2 tar xjvpf on-closed-bins-nd.i386.tar.bz2 OmniOS r151016 or later and OpenIndiana users have these tarballs installed in /opt/onbld/closed, and ON_CLOSED_BINS can be set to point to this directory directly. If you had a crypto tarball from an earlier build, do not use it here, as it is no longer required to build illumos. You should remove it from your tree if already present. According to the gcc-4.4.4-il heads-up note, the kernel modules among the closed binaries might need some fixup for proper compilation. According to several developers, however, they've never needed to do this in practice. Just in case you are trying to build some older branch of illumos which might require this modification and inexplicably breaks without it, the steps are outlined below in the troubleshooting section. Preparing the build environment General build configuration The build is configured using a shell script with environment variables, a template for this file is included: cp usr/src/tools/env/illumos.sh . vi illumos.sh # or your favourite editor instead of @vi@ The settings we are going to focus on for now are the following: NIGHTLY_OPTIONS You may remove the \"l\" (lowercase L) option from the string, this will disable lint checking of the code to save some time during the build, but patches should be linted. CODEMGR_WS This should be the root of the directory with the code. If you followed the previous example, it will be /code/illumos-gate . STAFFER Change this to the name of the non-privileged user you use on the system VERSION Set this to illumos-gate or whatever version string you want for the build ONNV_BUILDNUM specifies the build number which is used in packaging. If you intend to upgrade a system whose build number is greater than the one in illumos-gate (currently 148), such as OmniOS you need to specify this to allow upgrades until issue #1118 is addressed. Run: pkg info osnet-incorporation | grep Branch: If you see, for example, \"Branch: 0.151.1\", you must choose a number greater than the part after the leading \"0.\". For example, add export ONNV_BUILDNUM=152 to the illumos.sh script. On OpenIndiana you'll likely see something like 'Branch: 2017.0.0.16790'. You have to use PKGVERS_BRANCH to overwrite this value, you can't use ONNV_BUILDNUM for this purpose. You should set PKGVERS_BRANCH in a form of YEAR.MAJOR.0.0 , where YEAR is the current year and MAJOR is more that the one used by OpenIndiana. For example: export PKGVERS_BRANCH=2017.3.0.0 Building with only GCC-4.4.4-il (i.e. without using Sun Studio at all) If you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh: # The following are added to build without Sun Studio export CW_NO_SHADOW=1 export ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint export __GNUC= #unset __SUNC This should suffice for compilation of modern illumos-gate sources executed on a modern distribution. Older branches (circa 2012) might need some more setup which, along with explanation of the options, can be found below in the troubleshooting section. We understand that the required version of Sun Studio is no longer publicly available and will accept contributions that were tested only with GCC. OmniOS Modifications OmniOS r151014 or later has sample build files in /opt/onbld/env/omnios-* for use with illumos-gate or illumos-omnios. If you roll your own env files, read on. OmniOS requires that GCC-only be used. OmniOS ALSO requires that a few other variables are set: OmniOS mods # Help OmniOS find lint export SPRO_ROOT= /opt # OmniOS places GCC 4.4.4 differently. export GCC_ROOT=/opt/gcc-4.4.4/ # These are required for building on OmniOS. export PERL_VERSION=5.16.1 export PERL_PKGVERS= export PERL_ARCH=i86pc-solaris-thread-multi-64int # Pre-r151022 (i.e. older) versions of OmniOS building -gate # need to set Python versions explicitly. # Utter /usr/bin/python --version to confirm. export PYTHON_VERSION= 2.6 export PYTHON_PKGVERS= -26 # SET ONNV_BUILDNUM appropriately - to ONU r151014, set this to 151014. export ONNV_BUILDNUM=151014 You must also make sure you disable IPP and SMB printing support on the default OmniOS installation by commenting out the following lines. # export ENABLE_IPP_PRINTING= # export ENABLE_SMB_PRINTING= If you need to also compile IPP and SMB printing, you must provide the Apache, Apr/Apr-util for IPP or CUPS headers for SMB printing. OpenIndiana Modifications To build illumos-gate on OpenIndiana , you'll have to customize illumos.sh in the following way: OpenIndiana Hipster mods # Set version which is greater than current OpenIndiana Hipster build numbers, ONNV_BUILDNUM is ignored if PKGVERS_BRANCH is set: export PKGVERS_BRANCH=2017.3.0.0 # Set to current perl version export PERL_VERSION= 5.22 export PERL_PKGVERS= -522 # If you are building on the latest OpenIndiana (2017-03-07 and later) export BLD_JAVA_8= Starting the build You are now ready to start the illumos build. Since this process may take up to several hours depending on your system (reference build times are in a chart below), it may be wise to start the build job in a VNC session, GNU Screen (screen), or tmux. The screen program can be installed with the pkg:/terminal/screen package. Run the following command to start the full build: cd /code/illumos-gate cp usr/src/tools/scripts/nightly.sh . chmod +x nightly.sh time ./nightly.sh illumos.sh Note that the command does not give any progress output. You can instead follow the log file at log/nightly.log , which is updated (slowly) during the build process. In another terminal, run: tail -f /code/illumos-gate/log/nightly.log To only track the running build for warnings and errors you might instead run: tail -F /code/illumos-gate/log/nightly.log | gegrep -A5 -B5 (error|warning).*: After the build is complete, the nightly.log file and some other generated logs are moved into a uniquely named subdirectory log/log.$TIMESTAMP/ (i.e. /code/illumos-gate/log/log.2012-04-20.04\\:17/ ). A dry overview of the build progress (hopefully small \u2013 about 2KB in size \u2013 with no errors) is saved in log/log.$TIMESTAMP/mail_msg file intended for mailing to the build administrator after the build completes (this automation is out of the scope of the nightly.sh script). If you do receive any errors in the mail_msg report file, you can grep the error lines in the larger nightly.log file. Performing an incremental build If you've made changes after completing a nightly build, you can perform an incremental build without discarding the already built files. cd /code/illumos-gate ./nightly.sh -i illumos.sh To make this the default, edit illumos.sh and add the character i to NIGHTLY_OPTIONS . Note Before submitting a patch, we request that you perform a full, non-incremental build including the lint stage. Building specific components How To Build Components Installing built software Installing the nightly build on local machine with onu script The build process will generate updated packages. Depending on the NIGHTLY_OPTIONS variable in illumos.sh script, the packages will be written either to $PWD/packages/i386/nightly (with debug, the typical default) or to $PWD/packages/i386/nightly-nd (without debug). Therefore there are two possible commands to install the software you you just built. You need choose the proper onu command, typically the first one listed below. Typical install: you can install with onu for debug builds (the default, with 'F' and 'D' characters in NIGHTLY_OPTIONS variable in illumos.sh): $ sudo ./usr/src/tools/scripts/onu \\ -t nightly-`date +%Y-%m-%d` -d $PWD/packages/i386/nightly Note For OmniOS, it is critical that the ONNV_BUILDNUM in the nightly environment file be set to the OmniOS release you wish to ONU. Otherwise, ONU will fail. The non-typical installs are detailed in the following pages: Advanced - non-debug install describes different onu options for the different set of built packages. Redistributing built packages and Installing built illumos packages into BEs on a remote host and non-onu updates describe how to install illumos using the package depot server over the network, perhaps on a machine different from your build host. This recipe bypasses the onu script automation and manipulates your boot environments with beadm and pkg commands directly. Possible problems In any case, if you have build errors or other \"inconsistencies\", it would be wise to revise the mail_msg logfile that can contain short error descriptions, and grep for those errors in the longer nightly.log file. If that doesn't help, you should also recreate the build in a \"clean lab\" environment, which may be set up as a local zone according to the Building in zones instructions and rule out the local environment's influence (conflicting libraries and binaries, perhaps from your own earlier builds, come to mind first). Localization bugs #167 and #168 illumos has entirely different localization infrastructure from Solaris, so your existing system locales will not work. The English locales for illumos are in pkg:/locale/en (NOT pkg:/system/locale/en), and if you wish to use them, you'll need to install that package after you reboot. Likewise, other locales are in pkg:/locale/ where is a two letter ISO 639-1 code, except for zh_cn/zh_hk/zh_mo/zh_sg/zh_tw. If your locale is not installed, it will cause problems with software which behaves badly if setlocale() fails. This includes, at least, time-slider and svcs(1M). The pkg(5) commands print a warning, but function normally. If this is a problem, you can \"export LANG=C LC_ALL=C\" as a workaround, and change the LANG setting in/etc/default/init to 'C' (and reboot) to make the change permanent. Package repository (path /code/illumos-gate/packages/i386/nightly/repo.redist) is not created and onu script fails This error has happened to me whenever I ran the default checkout and full-build procedure outlined above (in VirtualBox VMs); I don't yet know why (possibly due to a wrong setup of my SunStudio compiler stack, as was later discovered). However, rerunning with an incremental build has created the package repository correctly (as well as full builds with proper SunStudio setup): ./nightly.sh -i illumos.sh Ensuring a build with only GCC-4.4.4-il for older branches of illumos Current illumos-gate (as of March 2014) should compile cleanly with GCC with the simplified instructions above. However, some earlier versions of the gate needed more configuration steps to compile properly, and the settings below shouldn't break anything for the newer source code as well (wink) If you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh: # The following are added to build without Sun Studio export CW_NO_SHADOW=1 export ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint # The following select the proper version of GCC __GNUC= ; __GNUC4= ; export __GNUC __GNUC4 GCC_ROOT=/opt/gcc/4.4.4; export GCC_ROOT CW_GCC_DIR=${GCC_ROOT}/bin; export CW_GCC_DIR Explanation of these settings: CW_NO_SHADOW - Set this to 1 to prevent the shadow compiler from running (for instance, if you do not have Studio at all, in which case a regular build would fail due to \"cw: error: couldn't run /opt/SUNWspro/bin/cc (No such file or directory)\" and inability to run the shadow compilation and thus verify the fitness of code for both supported compilers). ONLY_LINT_DEFS - This is needed so the lint is able to find the proper note.h include file. If __GNUC is defined, then a GCC would be the primary compiler. If __GNUC4 (or legacy __GNUC3) is defined, then the particular version of the compiler is used. Remember to unset __SUNC to properly use just one primary compiler (wink) and use CW_NO_SHADOW=1 as described above to completely disable a secondary (shadow) compiler. The last two lines make sure the patched version of GCC-4.4.4 is used (the default gcc version shipped with e.g. earlier OpenIndiana, gcc-3.4.3, is not suitable for building illumos), as described here. If you are trying to build with GCC 4.4.4 and your build fails because of some invalid GCC warning options, try setting the variables GCC_ROOT and CW_GCC_DIR as shown above and described here. While recently rebuilding a historical 2012 version of illumos-gate with GCC-4.4.4-only setup per instructions above, I've still got Sun Studio errors in my mail_msg file like: cw: error: couldn t run /opt/SUNWspro/bin/CC (No such file or directory) cw: error: couldn t run /opt/SUNWspro/bin/cc (No such file or directory) or more frightening: ln: cannot access /code/illumos-gate/proto/root_i386/usr/lib/isaexec However, the files in proto/ and packages/ were created successfully. So... even error reports may need manual verification before panic and frantic fixes (wink) Command failed for target `packages.i386/developer-dtrace.dep' 4719 introduces a flag day for people who build illumos-gate. You will need a Java Developers Kit (JDK) 7 or later. OpenIndiana 151a9 does NOT have this by default. Symptoms: Users still on JDK6 will see build errors in the packaging portions like such: ==== package build errors (non-DEBUG) ==== dmake: Warning: Command failed for target `packages.i386/developer-dtrace.dep dmake: Warning: Command failed for target `packages.i386/service-network-dns-mdns.dep dmake: Warning: Target `install not remade because of errors Cause: These are due to javadoc changes between 6 and 7. The dtrace and mdns packages generate javadoc, so their packaging manifests are updated to the 7 versions. Cure: Builders must either set JAVA_ROOT to an installation location of JDK7, or must have /usr/java populated with JDK7 (or pointing to an installation location of JDK7). You can use whatever distribution of JDK7+ works for you best (packages or tarballs, OpenJDK or Sun/Oracle JDK). If you are on the latest OpenIndiana, you want to install runtime/java/openjdk8 and developer/java/openjdk8 packages. Then in your env file, set: export BLD_JAVA_8=","title":"Building illumos"},{"location":"developers/build-illumos/#building-illumos","text":"","title":"Building illumos"},{"location":"developers/build-illumos/#preparing-the-source-code-directory","text":"You can use any location, but for the purposes of this guide, we will assume that you have a directory /code owned by your user ID, which you are using to obtain source and build. For a less naive example, see the Build datasets page and some more industrious details on Managing multiple workspaces and Working on several bugs at once.","title":"Preparing the source-code directory"},{"location":"developers/build-illumos/#getting-the-source","text":"You may use the Git source code management system to retrieve the illumos source code. Make sure you have about 6 gigabytes of free space for the source and binaries combined. The repository is available from GitHub using the Git source code control system. The Git repository URI is: git://github.com/illumos/illumos-gate.git Or, if the Git protocol is firewalled at your site: https://github.com/illumos/illumos-gate.git The illumos-gate source can then be cloned using: cd /code git clone https://github.com/illumos/illumos-gate.git","title":"Getting the source"},{"location":"developers/build-illumos/#getting-closed-binaries","text":"There are still closed components in illumos that have not yet been replaced. You must get the latest closed binaries from Sun/Oracle, since illumos currently needs those in order to build: cd /code/illumos-gate wget -c \\ https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \\ https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2 tar xjvpf on-closed-bins.i386.tar.bz2 tar xjvpf on-closed-bins-nd.i386.tar.bz2 OmniOS r151016 or later and OpenIndiana users have these tarballs installed in /opt/onbld/closed, and ON_CLOSED_BINS can be set to point to this directory directly. If you had a crypto tarball from an earlier build, do not use it here, as it is no longer required to build illumos. You should remove it from your tree if already present. According to the gcc-4.4.4-il heads-up note, the kernel modules among the closed binaries might need some fixup for proper compilation. According to several developers, however, they've never needed to do this in practice. Just in case you are trying to build some older branch of illumos which might require this modification and inexplicably breaks without it, the steps are outlined below in the troubleshooting section.","title":"Getting closed binaries"},{"location":"developers/build-illumos/#preparing-the-build-environment","text":"","title":"Preparing the build environment"},{"location":"developers/build-illumos/#general-build-configuration","text":"The build is configured using a shell script with environment variables, a template for this file is included: cp usr/src/tools/env/illumos.sh . vi illumos.sh # or your favourite editor instead of @vi@ The settings we are going to focus on for now are the following: NIGHTLY_OPTIONS You may remove the \"l\" (lowercase L) option from the string, this will disable lint checking of the code to save some time during the build, but patches should be linted. CODEMGR_WS This should be the root of the directory with the code. If you followed the previous example, it will be /code/illumos-gate . STAFFER Change this to the name of the non-privileged user you use on the system VERSION Set this to illumos-gate or whatever version string you want for the build ONNV_BUILDNUM specifies the build number which is used in packaging. If you intend to upgrade a system whose build number is greater than the one in illumos-gate (currently 148), such as OmniOS you need to specify this to allow upgrades until issue #1118 is addressed. Run: pkg info osnet-incorporation | grep Branch: If you see, for example, \"Branch: 0.151.1\", you must choose a number greater than the part after the leading \"0.\". For example, add export ONNV_BUILDNUM=152 to the illumos.sh script. On OpenIndiana you'll likely see something like 'Branch: 2017.0.0.16790'. You have to use PKGVERS_BRANCH to overwrite this value, you can't use ONNV_BUILDNUM for this purpose. You should set PKGVERS_BRANCH in a form of YEAR.MAJOR.0.0 , where YEAR is the current year and MAJOR is more that the one used by OpenIndiana. For example: export PKGVERS_BRANCH=2017.3.0.0","title":"General build configuration"},{"location":"developers/build-illumos/#building-with-only-gcc-444-il-ie-without-using-sun-studio-at-all","text":"If you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh: # The following are added to build without Sun Studio export CW_NO_SHADOW=1 export ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint export __GNUC= #unset __SUNC This should suffice for compilation of modern illumos-gate sources executed on a modern distribution. Older branches (circa 2012) might need some more setup which, along with explanation of the options, can be found below in the troubleshooting section. We understand that the required version of Sun Studio is no longer publicly available and will accept contributions that were tested only with GCC.","title":"Building with only GCC-4.4.4-il (i.e. without using Sun Studio at all)"},{"location":"developers/build-illumos/#omnios-modifications","text":"OmniOS r151014 or later has sample build files in /opt/onbld/env/omnios-* for use with illumos-gate or illumos-omnios. If you roll your own env files, read on. OmniOS requires that GCC-only be used. OmniOS ALSO requires that a few other variables are set:","title":"OmniOS Modifications"},{"location":"developers/build-illumos/#omnios-mods","text":"# Help OmniOS find lint export SPRO_ROOT= /opt # OmniOS places GCC 4.4.4 differently. export GCC_ROOT=/opt/gcc-4.4.4/ # These are required for building on OmniOS. export PERL_VERSION=5.16.1 export PERL_PKGVERS= export PERL_ARCH=i86pc-solaris-thread-multi-64int # Pre-r151022 (i.e. older) versions of OmniOS building -gate # need to set Python versions explicitly. # Utter /usr/bin/python --version to confirm. export PYTHON_VERSION= 2.6 export PYTHON_PKGVERS= -26 # SET ONNV_BUILDNUM appropriately - to ONU r151014, set this to 151014. export ONNV_BUILDNUM=151014 You must also make sure you disable IPP and SMB printing support on the default OmniOS installation by commenting out the following lines. # export ENABLE_IPP_PRINTING= # export ENABLE_SMB_PRINTING= If you need to also compile IPP and SMB printing, you must provide the Apache, Apr/Apr-util for IPP or CUPS headers for SMB printing.","title":"OmniOS mods"},{"location":"developers/build-illumos/#openindiana-modifications","text":"To build illumos-gate on OpenIndiana , you'll have to customize illumos.sh in the following way:","title":"OpenIndiana Modifications"},{"location":"developers/build-illumos/#openindiana-hipster-mods","text":"# Set version which is greater than current OpenIndiana Hipster build numbers, ONNV_BUILDNUM is ignored if PKGVERS_BRANCH is set: export PKGVERS_BRANCH=2017.3.0.0 # Set to current perl version export PERL_VERSION= 5.22 export PERL_PKGVERS= -522 # If you are building on the latest OpenIndiana (2017-03-07 and later) export BLD_JAVA_8=","title":"OpenIndiana Hipster mods"},{"location":"developers/build-illumos/#starting-the-build","text":"You are now ready to start the illumos build. Since this process may take up to several hours depending on your system (reference build times are in a chart below), it may be wise to start the build job in a VNC session, GNU Screen (screen), or tmux. The screen program can be installed with the pkg:/terminal/screen package. Run the following command to start the full build: cd /code/illumos-gate cp usr/src/tools/scripts/nightly.sh . chmod +x nightly.sh time ./nightly.sh illumos.sh Note that the command does not give any progress output. You can instead follow the log file at log/nightly.log , which is updated (slowly) during the build process. In another terminal, run: tail -f /code/illumos-gate/log/nightly.log To only track the running build for warnings and errors you might instead run: tail -F /code/illumos-gate/log/nightly.log | gegrep -A5 -B5 (error|warning).*: After the build is complete, the nightly.log file and some other generated logs are moved into a uniquely named subdirectory log/log.$TIMESTAMP/ (i.e. /code/illumos-gate/log/log.2012-04-20.04\\:17/ ). A dry overview of the build progress (hopefully small \u2013 about 2KB in size \u2013 with no errors) is saved in log/log.$TIMESTAMP/mail_msg file intended for mailing to the build administrator after the build completes (this automation is out of the scope of the nightly.sh script). If you do receive any errors in the mail_msg report file, you can grep the error lines in the larger nightly.log file.","title":"Starting the build"},{"location":"developers/build-illumos/#performing-an-incremental-build","text":"If you've made changes after completing a nightly build, you can perform an incremental build without discarding the already built files. cd /code/illumos-gate ./nightly.sh -i illumos.sh To make this the default, edit illumos.sh and add the character i to NIGHTLY_OPTIONS . Note Before submitting a patch, we request that you perform a full, non-incremental build including the lint stage.","title":"Performing an incremental build"},{"location":"developers/build-illumos/#building-specific-components","text":"How To Build Components","title":"Building specific components"},{"location":"developers/build-illumos/#installing-built-software","text":"","title":"Installing built software"},{"location":"developers/build-illumos/#installing-the-nightly-build-on-local-machine-with-onu-script","text":"The build process will generate updated packages. Depending on the NIGHTLY_OPTIONS variable in illumos.sh script, the packages will be written either to $PWD/packages/i386/nightly (with debug, the typical default) or to $PWD/packages/i386/nightly-nd (without debug). Therefore there are two possible commands to install the software you you just built. You need choose the proper onu command, typically the first one listed below. Typical install: you can install with onu for debug builds (the default, with 'F' and 'D' characters in NIGHTLY_OPTIONS variable in illumos.sh): $ sudo ./usr/src/tools/scripts/onu \\ -t nightly-`date +%Y-%m-%d` -d $PWD/packages/i386/nightly Note For OmniOS, it is critical that the ONNV_BUILDNUM in the nightly environment file be set to the OmniOS release you wish to ONU. Otherwise, ONU will fail. The non-typical installs are detailed in the following pages: Advanced - non-debug install describes different onu options for the different set of built packages. Redistributing built packages and Installing built illumos packages into BEs on a remote host and non-onu updates describe how to install illumos using the package depot server over the network, perhaps on a machine different from your build host. This recipe bypasses the onu script automation and manipulates your boot environments with beadm and pkg commands directly.","title":"Installing the nightly build on local machine with onu script"},{"location":"developers/build-illumos/#possible-problems","text":"In any case, if you have build errors or other \"inconsistencies\", it would be wise to revise the mail_msg logfile that can contain short error descriptions, and grep for those errors in the longer nightly.log file. If that doesn't help, you should also recreate the build in a \"clean lab\" environment, which may be set up as a local zone according to the Building in zones instructions and rule out the local environment's influence (conflicting libraries and binaries, perhaps from your own earlier builds, come to mind first).","title":"Possible problems"},{"location":"developers/build-illumos/#localization-bugs-167-and-168","text":"illumos has entirely different localization infrastructure from Solaris, so your existing system locales will not work. The English locales for illumos are in pkg:/locale/en (NOT pkg:/system/locale/en), and if you wish to use them, you'll need to install that package after you reboot. Likewise, other locales are in pkg:/locale/ where is a two letter ISO 639-1 code, except for zh_cn/zh_hk/zh_mo/zh_sg/zh_tw. If your locale is not installed, it will cause problems with software which behaves badly if setlocale() fails. This includes, at least, time-slider and svcs(1M). The pkg(5) commands print a warning, but function normally. If this is a problem, you can \"export LANG=C LC_ALL=C\" as a workaround, and change the LANG setting in/etc/default/init to 'C' (and reboot) to make the change permanent.","title":"Localization bugs #167 and #168"},{"location":"developers/build-illumos/#package-repository-path-codeillumos-gatepackagesi386nightlyreporedist-is-not-created-and-onu-script-fails","text":"This error has happened to me whenever I ran the default checkout and full-build procedure outlined above (in VirtualBox VMs); I don't yet know why (possibly due to a wrong setup of my SunStudio compiler stack, as was later discovered). However, rerunning with an incremental build has created the package repository correctly (as well as full builds with proper SunStudio setup): ./nightly.sh -i illumos.sh Ensuring a build with only GCC-4.4.4-il for older branches of illumos Current illumos-gate (as of March 2014) should compile cleanly with GCC with the simplified instructions above. However, some earlier versions of the gate needed more configuration steps to compile properly, and the settings below shouldn't break anything for the newer source code as well (wink) If you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh: # The following are added to build without Sun Studio export CW_NO_SHADOW=1 export ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint # The following select the proper version of GCC __GNUC= ; __GNUC4= ; export __GNUC __GNUC4 GCC_ROOT=/opt/gcc/4.4.4; export GCC_ROOT CW_GCC_DIR=${GCC_ROOT}/bin; export CW_GCC_DIR Explanation of these settings: CW_NO_SHADOW - Set this to 1 to prevent the shadow compiler from running (for instance, if you do not have Studio at all, in which case a regular build would fail due to \"cw: error: couldn't run /opt/SUNWspro/bin/cc (No such file or directory)\" and inability to run the shadow compilation and thus verify the fitness of code for both supported compilers). ONLY_LINT_DEFS - This is needed so the lint is able to find the proper note.h include file. If __GNUC is defined, then a GCC would be the primary compiler. If __GNUC4 (or legacy __GNUC3) is defined, then the particular version of the compiler is used. Remember to unset __SUNC to properly use just one primary compiler (wink) and use CW_NO_SHADOW=1 as described above to completely disable a secondary (shadow) compiler. The last two lines make sure the patched version of GCC-4.4.4 is used (the default gcc version shipped with e.g. earlier OpenIndiana, gcc-3.4.3, is not suitable for building illumos), as described here. If you are trying to build with GCC 4.4.4 and your build fails because of some invalid GCC warning options, try setting the variables GCC_ROOT and CW_GCC_DIR as shown above and described here. While recently rebuilding a historical 2012 version of illumos-gate with GCC-4.4.4-only setup per instructions above, I've still got Sun Studio errors in my mail_msg file like: cw: error: couldn t run /opt/SUNWspro/bin/CC (No such file or directory) cw: error: couldn t run /opt/SUNWspro/bin/cc (No such file or directory) or more frightening: ln: cannot access /code/illumos-gate/proto/root_i386/usr/lib/isaexec However, the files in proto/ and packages/ were created successfully. So... even error reports may need manual verification before panic and frantic fixes (wink)","title":"Package repository (path /code/illumos-gate/packages/i386/nightly/repo.redist) is not created and onu script fails"},{"location":"developers/build-illumos/#command-failed-for-target-packagesi386developer-dtracedep","text":"4719 introduces a flag day for people who build illumos-gate. You will need a Java Developers Kit (JDK) 7 or later. OpenIndiana 151a9 does NOT have this by default. Symptoms: Users still on JDK6 will see build errors in the packaging portions like such: ==== package build errors (non-DEBUG) ==== dmake: Warning: Command failed for target `packages.i386/developer-dtrace.dep dmake: Warning: Command failed for target `packages.i386/service-network-dns-mdns.dep dmake: Warning: Target `install not remade because of errors Cause: These are due to javadoc changes between 6 and 7. The dtrace and mdns packages generate javadoc, so their packaging manifests are updated to the 7 versions. Cure: Builders must either set JAVA_ROOT to an installation location of JDK7, or must have /usr/java populated with JDK7 (or pointing to an installation location of JDK7). You can use whatever distribution of JDK7+ works for you best (packages or tarballs, OpenJDK or Sun/Oracle JDK). If you are on the latest OpenIndiana, you want to install runtime/java/openjdk8 and developer/java/openjdk8 packages. Then in your env file, set: export BLD_JAVA_8=","title":"Command failed for target `packages.i386/developer-dtrace.dep'"},{"location":"developers/build-times/","text":"Build times As a convenience, we will try to assemble some build times for various hardware configurations here, so you can get an idea in advance of how long it will take: Processor(s) No. of cores Memory Time (HH:MM) Notes 2 x Xeon X5570 2.93GHz 2 x 4 36 GB 00:19 NIGHTLY_OPTIONS='-FnCDmprt' 4 x Opteron 6172 2.1 GHz 4 x 12 128 GB 00:21 NIGHTLY_OPTIONS='-FnCDmprt' Xeon E3-1270 3.4 GHz 4 16 GB 00:23 NIGHTLY_OPTIONS='-FnCDmprt' Core i7-3770 3.4GHz 4 8 GB 00:28 NIGHTLY_OPTIONS='-nCprt' (with SSD, the production build for Tribblix) Xeon E3-1245V2 3.4 GHz 4 16 GB 00:31 NIGHTLY_OPTIONS='-FnCDmprt' Core i7-2600K 3.4 GHz 4 8 GB 00:35 NIGHTLY_OPTIONS='-nClmprt' 2 x Xeon E5620 2.4 GHz 2 x 4 48 GB 00:38 None 1 x Xeon E5607 2.27GHz 1 x 4 12 GB 00:46 NIGHTLY_OPTIONS='-FnCDmprt' Xeon E3-1245V2 3.4 GHz 4 16 GB 00:47 NIGHTLY_OPTIONS='-FnCDlmprt' (with lint) 2 x Xeon E5540 2.53 GHz 2 x 4 24 GB 00:50 With lint 2 x Xeon E5506 2.13 GHz 2 x 4 24 GB 00:50 No dmake check 1 x Xeon X5650 2.67 GHz 1 x 6 12 GB 00:51 With lint, default NIGHTLY_OPTIONS 2 x Xeon E5506 2.13 GHz 2 x 4 24 GB 01:03 None Core i7-960 3.2 GHz 4 9 GB 01:03 With lint 2 x Xeon E5506 2.13 GHz 2 x 4 16 GB 01:06 VMware Workstation guest Core i7-930 2.8 GHz 4 8 GB 01:07 VMware ESXi guest Xeon E5-2676 v3 2.4GHz 2 16 GB 01:13 NIGHTLY_OPTIONS='-nCprt' (Tribblix) on an AWS m4.xlarge EC2 instance Core 2 Quad Q6600 2.4 GHz 4 2 GB 01:16 None 2 x Xeon E5310 1.6 GHz 2 x 4 32 GB 01:24 None 1 x Athlon II X2 240 2.8 GHz 2 2 GB 01:27 NIGHTLY_OPTIONS='-FnCDmprt', on a low end SSD Core 2 Quad Q9300 2.5 GHz 4 7 GB 01:32 None 2 x Xeon E5420 @ 2.50GHz 2 x 4 4 GB 01:33 Default NIGHTLY_OPTIONS; an incremental rebuild takes 13 min to walk all Makefiles 2 x Opteron 2218HE 2.6 GHz 2 x 2 16 GB 01:42 None Core i5-540M 2.53 GHz 2 4 GB 01:54 None 2 x UltraSPARC-T2+ 1165 MHz 128 threads 32 GB 02:18 NIGHTLY_OPTIONS='-nCprt' (the Tribblix SPARC build) Core i3-370M 2.40 GHz 2 2 GB 02:30 None Core 2 Quad Q8200 2.33 GHz 4 5 GB 02:30 Default NIGHTLY_OPTIONS. Core 2 Duo T8300 2.3 GHz (T61) 2 2 GB 02:58 VMware Workstation 2 CPUs Core 2 Duo E6750 2.66 GHz 2 8 GB 02:59 Sun Ultra 24 (with lint) Core 2 Duo Celeron E3200 3.2 GHz 2 4 GB 03:28 2.4 GHz CPU over clocked to 3.2. Everything running on a low end SSD. With lint. Core 2 Duo T5600 1.8 GHz 2 3.3 GB 04:26 None Opteron 146 2 GHz 1 4 GB 07:28 None 4 x Dual-Core Opteron 8218 2.6 GHz (8-vCPU VM) 16 GB (2GB VM) 35:47 + 9:05 VirtualBox 3.0.12 VM, with 8 vCPUs and 2GB vRAM; local vHDD; with lint and default NIGHTLY_OPTIONS='-FnCDlmprt' NOTE: Package repo did not get built at all with the first nightly run, only with the second, incremental nightly run (another 9 hours) Notes \"Bare Metal\" just slightly faster than VMware guest. On the other hand, VirtualBox painfully slow. More cores faster but not linear increase. SSD use seems to provide nice speedup. As expected, lint checking results in longer build times.","title":"Build times"},{"location":"developers/build-times/#build-times","text":"As a convenience, we will try to assemble some build times for various hardware configurations here, so you can get an idea in advance of how long it will take: Processor(s) No. of cores Memory Time (HH:MM) Notes 2 x Xeon X5570 2.93GHz 2 x 4 36 GB 00:19 NIGHTLY_OPTIONS='-FnCDmprt' 4 x Opteron 6172 2.1 GHz 4 x 12 128 GB 00:21 NIGHTLY_OPTIONS='-FnCDmprt' Xeon E3-1270 3.4 GHz 4 16 GB 00:23 NIGHTLY_OPTIONS='-FnCDmprt' Core i7-3770 3.4GHz 4 8 GB 00:28 NIGHTLY_OPTIONS='-nCprt' (with SSD, the production build for Tribblix) Xeon E3-1245V2 3.4 GHz 4 16 GB 00:31 NIGHTLY_OPTIONS='-FnCDmprt' Core i7-2600K 3.4 GHz 4 8 GB 00:35 NIGHTLY_OPTIONS='-nClmprt' 2 x Xeon E5620 2.4 GHz 2 x 4 48 GB 00:38 None 1 x Xeon E5607 2.27GHz 1 x 4 12 GB 00:46 NIGHTLY_OPTIONS='-FnCDmprt' Xeon E3-1245V2 3.4 GHz 4 16 GB 00:47 NIGHTLY_OPTIONS='-FnCDlmprt' (with lint) 2 x Xeon E5540 2.53 GHz 2 x 4 24 GB 00:50 With lint 2 x Xeon E5506 2.13 GHz 2 x 4 24 GB 00:50 No dmake check 1 x Xeon X5650 2.67 GHz 1 x 6 12 GB 00:51 With lint, default NIGHTLY_OPTIONS 2 x Xeon E5506 2.13 GHz 2 x 4 24 GB 01:03 None Core i7-960 3.2 GHz 4 9 GB 01:03 With lint 2 x Xeon E5506 2.13 GHz 2 x 4 16 GB 01:06 VMware Workstation guest Core i7-930 2.8 GHz 4 8 GB 01:07 VMware ESXi guest Xeon E5-2676 v3 2.4GHz 2 16 GB 01:13 NIGHTLY_OPTIONS='-nCprt' (Tribblix) on an AWS m4.xlarge EC2 instance Core 2 Quad Q6600 2.4 GHz 4 2 GB 01:16 None 2 x Xeon E5310 1.6 GHz 2 x 4 32 GB 01:24 None 1 x Athlon II X2 240 2.8 GHz 2 2 GB 01:27 NIGHTLY_OPTIONS='-FnCDmprt', on a low end SSD Core 2 Quad Q9300 2.5 GHz 4 7 GB 01:32 None 2 x Xeon E5420 @ 2.50GHz 2 x 4 4 GB 01:33 Default NIGHTLY_OPTIONS; an incremental rebuild takes 13 min to walk all Makefiles 2 x Opteron 2218HE 2.6 GHz 2 x 2 16 GB 01:42 None Core i5-540M 2.53 GHz 2 4 GB 01:54 None 2 x UltraSPARC-T2+ 1165 MHz 128 threads 32 GB 02:18 NIGHTLY_OPTIONS='-nCprt' (the Tribblix SPARC build) Core i3-370M 2.40 GHz 2 2 GB 02:30 None Core 2 Quad Q8200 2.33 GHz 4 5 GB 02:30 Default NIGHTLY_OPTIONS. Core 2 Duo T8300 2.3 GHz (T61) 2 2 GB 02:58 VMware Workstation 2 CPUs Core 2 Duo E6750 2.66 GHz 2 8 GB 02:59 Sun Ultra 24 (with lint) Core 2 Duo Celeron E3200 3.2 GHz 2 4 GB 03:28 2.4 GHz CPU over clocked to 3.2. Everything running on a low end SSD. With lint. Core 2 Duo T5600 1.8 GHz 2 3.3 GB 04:26 None Opteron 146 2 GHz 1 4 GB 07:28 None 4 x Dual-Core Opteron 8218 2.6 GHz (8-vCPU VM) 16 GB (2GB VM) 35:47 + 9:05 VirtualBox 3.0.12 VM, with 8 vCPUs and 2GB vRAM; local vHDD; with lint and default NIGHTLY_OPTIONS='-FnCDlmprt' NOTE: Package repo did not get built at all with the first nightly run, only with the second, incremental nightly run (another 9 hours)","title":"Build times"},{"location":"developers/build-times/#notes","text":"\"Bare Metal\" just slightly faster than VMware guest. On the other hand, VirtualBox painfully slow. More cores faster but not linear increase. SSD use seems to provide nice speedup. As expected, lint checking results in longer build times.","title":"Notes"},{"location":"developers/comp-webrev/","text":"webrev(1) lets you create a comparison of files changed by development. Its output can contain the same changeset in .patch, .ps, .pdf format along with index.html file and other accompanying resources. The tools lives in /opt/onbld/bin directory. Be sure to install packages from How To Build illumos page. Also, be sure to have /opt/onbld/bin in your PATH . You can check it by running: echo $PATH You should see something along the lines of: echo $PATH /opt/gcc/4.4.4/bin/:/usr/gnu/bin:/usr/bin:/usr/sbin:/sbin:/opt/onbld/bin Your output may vary, the important part is /opt/onbld/bin In the directory containing your build of illumos create a file listing your changed files. For issue 6168: strlcpy() does not return s1 , two files were edited: usr/src/man/man9f/string.9f usr/src/man/man3c/string.3c The file list (called by me file.list) consists of: CODEMGR_WS=/code/illumos-gates-6168 CODEMGR_PARENT=/code/illumos-gates usr/src/man/man9f/string.9f usr/src/man/man3c/string.3c First two lines define top level paths to directory containing modified source and top level directory containing original source. Latter two are files, relative to the top-level directories defined above, changed during development. In this case those are only two manual pages, in case of larger development it may be tens of files. From within CODEMGR_WS call webrev(1) : cd /code/illumos-gate-6168/ ./webrev -o webrev6168 file.list This should produce directory webrev-6168 within your current working directory. You can then upload this directory to your chosen website and send link to illumos developers for analysis. The example tree of a generated webrev: webrev-6168$ tree . \u251c\u2500\u2500 ancnav.html \u251c\u2500\u2500 ancnav.js \u251c\u2500\u2500 file.list \u251c\u2500\u2500 index.html \u251c\u2500\u2500 raw_files \u2502 \u251c\u2500\u2500 new \u2502 \u2502 \u2514\u2500\u2500 usr \u2502 \u2502 \u2514\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 man \u2502 \u2502 \u251c\u2500\u2500 man3c \u2502 \u2502 \u2502 \u251c\u2500\u2500 man.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 string.3c \u2502 \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.raw \u2502 \u2502 \u2502 \u2514\u2500\u2500 string.3c.man.txt.html \u2502 \u2502 \u2514\u2500\u2500 man9f \u2502 \u2502 \u251c\u2500\u2500 man.css \u2502 \u2502 \u251c\u2500\u2500 string.9f \u2502 \u2502 \u251c\u2500\u2500 string.9f.man.html \u2502 \u2502 \u251c\u2500\u2500 string.9f.man.raw \u2502 \u2502 \u2514\u2500\u2500 string.9f.man.txt.html \u2502 \u2514\u2500\u2500 old \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 man \u2502 \u251c\u2500\u2500 man3c \u2502 \u2502 \u2514\u2500\u2500 string.3c \u2502 \u2514\u2500\u2500 man9f \u2502 \u2514\u2500\u2500 string.9f \u251c\u2500\u2500 TotalChangedLines \u251c\u2500\u2500 usr \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 man \u2502 \u251c\u2500\u2500 man3c \u2502 \u2502 \u251c\u2500\u2500 string.3c-.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.cdiff.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.frames.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.lhs.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.cdiff.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.frames.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.lhs.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.rhs.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.sdiff.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.udiff.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.man.wdiff.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.patch \u2502 \u2502 \u251c\u2500\u2500 string.3c.rhs.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.sdiff.html \u2502 \u2502 \u251c\u2500\u2500 string.3c.udiff.html \u2502 \u2502 \u2514\u2500\u2500 string.3c.wdiff.html \u2502 \u2514\u2500\u2500 man9f \u2502 \u251c\u2500\u2500 string.9f-.html \u2502 \u251c\u2500\u2500 string.9f.cdiff.html \u2502 \u251c\u2500\u2500 string.9f.frames.html \u2502 \u251c\u2500\u2500 string.9f.html \u2502 \u251c\u2500\u2500 string.9f.lhs.html \u2502 \u251c\u2500\u2500 string.9f.man.cdiff.html \u2502 \u251c\u2500\u2500 string.9f.man.frames.html \u2502 \u251c\u2500\u2500 string.9f.man.lhs.html \u2502 \u251c\u2500\u2500 string.9f.man.rhs.html \u2502 \u251c\u2500\u2500 string.9f.man.sdiff.html \u2502 \u251c\u2500\u2500 string.9f.man.udiff.html \u2502 \u251c\u2500\u2500 string.9f.man.wdiff.html \u2502 \u251c\u2500\u2500 string.9f.patch \u2502 \u251c\u2500\u2500 string.9f.rhs.html \u2502 \u251c\u2500\u2500 string.9f.sdiff.html \u2502 \u251c\u2500\u2500 string.9f.udiff.html \u2502 \u2514\u2500\u2500 string.9f.wdiff.html \u251c\u2500\u2500 webrev-6168.patch \u251c\u2500\u2500 webrev-6168.pdf \u2514\u2500\u2500 webrev-6168.ps","title":"Comparing with webrev"},{"location":"developers/multibug/","text":"Requires Review This page references some old practices and needs to be reviewed. Working on multiple bugs at once By Jim Klimov Introduction It is not rare to have a contributor working on several disparate sub-projects which are of interest to him, such as fixing different bugs or updating documentation man-pages, in parallel. This means that the developer has been assigned several bug/RFE IDs in the common bugtracker and prepares changes in his local development environment in order to propose a webrev for public review and ultimately request-to-integrate his or her fixes. A \"newbie\" contributor might take on a number of bite-sized quests that others postponed indefinitely, just to get the hang of the development environment. The tricky part here is that a developer can be working on small bugs, and the latency of review/RTI process would cause him to idle around between singular quests and lose interest, while he could go on a new task right after posting one for review. However, working on several tasks in one workspace is also potentially problematic \u2013 the webrev would consolidate all changes (from works on different bugs), while the central (official) repository policies highly prefer atomic updates \u2013 \"one changeset = one bug\", or close to that. Source-code management systems have a number of solutions to this problem. Where other systems propose working in branches of code, which would ultimately be merged, most if not all illumos developers (of those who responded to my call for real-life info) prefer to clone complete Mercurial repositories (one per bug), spawn separate workspaces and develop there. The rest of this page shall discuss several practical approaches to this. There is also some controversy about using Mercurial Queues to track small fixes: Gordon: If you have a bunch of small fixes underway simultaneously, you might consider using \"hg mq\" (hg qpush, hg qpop, ...): http://mercurial.selenic.com/wiki/MqExtension Dan: I find mq causes more problems than it solves but that's just me. Three-tiered approach In this approach the developer maintains a \"clean\" replica of the official repository (\"illumos-clone\" as a hg-clone of official illumos-gate in examples below), and his development workspaces (\"ws1 .. wsN\" in examples below) are instantiated in clones of this replica. No actual development occurs in illumos-clone workspace. Whenever work on a new task starts, the developer updates his illumos-clone to current source code, and creates a clone of it (several methods are available and discussed below) named like ws1 or illumos-bug1234. For people who understand pictures better, here is an illustration of proposed repository cloning and tiering architectures: After some development and testing, the developer has committed his changes to the ws1 repository (with the comment like \"1234 Bug description one-liner\"). He should then pull and update the illumos-clone repository from official sources and update the ws1 repository from illumos-clone, and merge any changes. This way the ws1 repository now contains his work as if it was done against the current revision of the \"official\" public source codes. Then the developer prepares a webrev and provides it for public review. Bob: While you were patiently waiting, other changes were put into upstream Mercurial. These changes have to be pulled and merged (to tip) before Mercurial would allow you to push (assuming you were authorized). If files you edited have been updated over time, it would be polite to pull, merge with those changes, re-test, and if they are significant to your work, re-request a review. Mercurial only allows you to push if there is just one head (tip). If changes come in via a pull after you have done a commit, then there will be two heads, which need to be merged. Use 'hg heads' to see the heads. For repositories where the user has the push privileges (such as a forked repository on the BitBucket), the developer can push his tested changes from ws1 repository to illumos-clone repository and then to his own repository fork on the public hosting service. This would allow other developers to look into completed code for review, or to pull his changes into their systems (such as when the integration into \"official\" repository occurs). Bob: If you do \"hg paths\" in illumos-clone it will report that it points to the official master. If you do the same in \"ws1\" it will report that it points to local \"illumos-clone\". If your approved changeset is in \"ws1\" then you would first do \"hg push\" in \"ws1\", then change to \"illumos-clone\" (which now contains the changeset) and do \"hg push\" to push to the official master. Of course merging is likely required before you can push. The necessary pulls are inverse of the push \u2013 so if you want to get new upstream changesets into \"ws1\", you would first do an \"hg pull\" in \"illumos-clone\" and then in \"ws1\". Changes may be pushed to something other than the default upstream repository by specifying the repository URL when you do the push, or by editing .hg/hgrc inside the repository base directory and changing the \"default\" definition to the new path. This means that you could push directly from \"ws1\" to the official master provided that any pending upstream changesets have been merged as a merge changeset. This pattern applies not only to illumos-gate, but also to other related illumos/OpenIndiana subprojects hosted in Mercurial repositories. Keeping a tier of the golden repository allows you to save some internet traffic (when propagating changesets from upstream to your numerous workspaces) and to quickly instantiate clones of the current public source code (again, saving on traffic \u2013 actually, being independent of network connectivity). Dan: I actually maintain a clone of illumos-gate locally (illumos-clone), and my works in progress are children of illumos-clone. It does eat disk space, but combined with sensible build practices (e.g. not doing full nightly builds until you're very close to integration) it's not all that bad. Don't forget about building modules when you only need modules, as I mention here: http://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html Some developers use short-lived repos for one task, others instead prefer to spawn a few workspaces, and reuse them for new projects after the current one has been committed upstream: Steve: after my changes are pushed, I can just sync it up with its parent and I am ready to work on another change-set in this repo (hg pull; hg update). I do use mv to rename repos, so that I have some visual reminder of what that repo is currently used for. Dan: Once a child's diffs appear in illumos-gate, the child gets removed. General setup General build-system preparation is as outlined in How To Build illumos, however there is some difference in source-code repository organization and naming. Like in that tutorial, the repositories are assumed to be hosted under /code directory. Depending on the adopted pattern, each repository can be an individual ZFS dataset, or they can be sub-directories within one filesystem. Elaborate on dataset setup, perhaps copy from main tutorial. There are at least two variations, depending on the technology you choose to use. You can clone repositories with tools built into the SCM, in our case \u2013 by using the \"hg clone\" command. Alternately you can use ZFS clones and rewrite the pointer to parent repository in the cloned child repo. Also the repositories can be just copied as directories with files, but this is likely to be the most space-consuming option. zfs-cloning \u2013 Prepare dataset hierarchy Note These examples put the repository into rpool. You're welcome to use another ZFS pool if available on your system. To follow this route, each your repository must reside in its individual dedicated dataset which was created and prepared with commands like these (see How To Build illumos for more details): sudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev sudo zfs create rpool/export/home/illumos-dev/code sudo ln -s ./export/home/illumos-dev/code / sudo chown -R $USER /export/home/illumos-dev sudo zfs create -o sync=disabled rpool/export/home/illumos-dev/code/illumos-clone hg-cloning or file-copying I was told that hg clone would try to use hardlinks to save space and time, so I guess keeping the masters and clones in one filesystem (accessible under /code below) is highly recommended. Bob: Look in the hidden .hg directory for the actual repository. For local clones, Hg can use hard links to refer to the same repository files. The hard link is broken if the file is to be updated. ZFS's clone can do a bit better because Mercurial only appends to repository files so ZFS-cloned blocks will remain de-duplicated unless they are a short tail block which was updated. You are still welcome to use a ZFS dataset dedicated to holding all the repositories: sudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev sudo zfs create rpool/export/home/illumos-dev/code sudo ln -s ./export/home/illumos-dev/code / sudo chown -R $USER /export/home/illumos-dev Initialize the local master repository The repository directory may exist, but must be empty if it does. cd /code hg clone ssh://anonhg@hg.illumos.org/illumos-gate ./illumos-clone Never touch illumos-clone except to pull changes from upstream Mercurial allows to rename repositories as suits you today with filesystem utilities (this may be more useful on your child repositories though \u2013 i.e. rename them according to your bug-number-du-jour), so creation of your golden repository could instead be done like this: cd /code hg clone ssh://anonhg@hg.illumos.org/illumos-gate mv illumos-gate illumos-clone Update the local master repository cd /code/illumos-clone hg pull -u Since there are no changes of your own in this repo, merging should be trivial and complete automatically. Clone the local master into a child repository for work There are at least two variations, depending on the technology you choose to use. You can clone repositories with tools built into the SCM, in our case \u2013 by using the \"hg clone\" command. Alternately you can use ZFS clones and rewrite the default pointer to parent repository in the cloned child repo. Bob: In addition to \"default\" there is \"default-push\" which specifies the default URL to push to. Besides the apparent \"exotic\" setup there is also the mundane approach (which I use) which pulls updates from the http:// appearance of a server and pushes to the ssh:// appearance of the same server. This results in faster clones/updates while obtaining the secure SSH authentication when pushing. Also the repositories can be just copied as directories with files, but this is likely to be the most space-consuming option. Examples below use the bugID-based naming convention for child repositories and their workspaces. Some developers instead prefer to spawn a few statically-named workspaces (\"ws1 .. wsN\"), and reuse them for new projects after the current one has been committed upstream (so the repo with this author's changes is identical to upstream). zfs-cloning Update the local master repository (see above) and create a uniquely named ZFS snapshot of its dataset, and then clone it, for example: zfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006 zfs clone rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006 rpool/export/home/illumos-dev/code/illumos-bug1234 Now you'll have to modify the clone's pointer to parent repository (so it's local, not Internet as was for the golden image). Edit /code/illumos-bug1234/.hg/hgrc file which may look like this: [paths] default = ssh://anonhg@hg.illumos.org/illumos-gate You should replace the default path with the local pathname to the local master repository, like this: [paths] default = /code/illumos-clone hg-cloning Update the local master repository (see above) and create a Mercurial clone: cd /code hg clone illumos-clone illumos-bug1234 This takes care of the child's parent relationships. file copy cloning This is the least recommended method. Still, you might have your reasons... Update the local master repository (see above) and copy the whole repo directory: cd /code cp -pr illumos-clone illumos-bug1234 You might alternatively use rsync, gtar, cpio and such. Work in the child copy cd /code/illumos-bug1234 ### edit files hg add new files hg commit -m 1234 Bug description one-liner webrev... ### (example webrev command-line from real-life is appreciated) ### repeat if more work on this bug is needed Dan: If you've just the one set of changes, \"webrev\" all by itself is sufficient. It'll create /code/illumos-bug1234/webrev/. You can then scp/mv/ln/etc. that webrev/ directory into an HTTP-reachable directory somewhere. After some work in the child workspace, you need to pull changes from upstream... In particular, you must do this before completing your work to make the review or integration. ### Update master repo cd /code/illumos-clone hg pull -u ### Now illumos-clone is up to date. ### For each child like illumos-bug1234 : cd /code/illumos-bug1234 ### Make sure I ve committed any outstanding diffs hg pull -u ; hg merge ### Resolve conflicts if any hg commit -m blah hg recommit ### edit push string to remove crap Publish your work Developers' habits and best-practices \"as-is\": Steve: I recommend to keep change sets small. Ideally, one bug, or concise feature per change set. Rules are made to be broken, but there are many advantages: easier to review, easier to back out, easier for someone to take or leave. I agree about this in terms of upstream repository, that an atomary change to close a bug is a good thing. However, does it mean that during local development I should not hg commit successful changes to my code before I go on (as I often do, leading to several commits per day)? Or are we talking about different things? =) You could do that, but I find it is much simpler to stick to the one repo, one changeset, one bug, one commit, one push rule. Usually the checkin workflow for me goes like this: Done with coding and testing... Update repo with latest changes from parent, if any ( ie hg pull; hg update) Merge if necessary (relatively rare) hg commit hg push At this point the repo is ready for some other work item. Anyway, publishing a webrev and reworking on comments, and making new webrevs, would still likely produce several local commits. From what I gathered around the docs, it is possible to diff your repo against the upstream one, and produce a single changeset which contains the final result of your work so far. Change sets are produced by hg commit . These can be pushed (easily) to an upstream repo, and they remain change sets there as well. You can produce a text diff rendering of any change set, e.g.: hg diff -c xxxxx (xxxxx being the change set number). Also, see hg export and hg import . Also most docs value the local commit history (commit comments) as being potentially useful to the developer and to the general community after the upstream merge. How do these comments get passed up and survive eventual destruction of the child repo (if they do)? Yes, comments are important, they make it easier for someone to discern what the change set is about. Comments added with -m ..comment... at commit time (or via a text editor, if you are so configured) are associated with the change set, and travel with the change set as it gets pushed, exported and imported. Again, once you commit and push the change set upstream, the comment goes with it, so it does not matter if you subsequently destroy the repo where you did the work.","title":"Working Multiple Bugs"},{"location":"developers/multibug/#working-on-multiple-bugs-at-once","text":"By Jim Klimov","title":"Working on multiple bugs at once"},{"location":"developers/multibug/#introduction","text":"It is not rare to have a contributor working on several disparate sub-projects which are of interest to him, such as fixing different bugs or updating documentation man-pages, in parallel. This means that the developer has been assigned several bug/RFE IDs in the common bugtracker and prepares changes in his local development environment in order to propose a webrev for public review and ultimately request-to-integrate his or her fixes. A \"newbie\" contributor might take on a number of bite-sized quests that others postponed indefinitely, just to get the hang of the development environment. The tricky part here is that a developer can be working on small bugs, and the latency of review/RTI process would cause him to idle around between singular quests and lose interest, while he could go on a new task right after posting one for review. However, working on several tasks in one workspace is also potentially problematic \u2013 the webrev would consolidate all changes (from works on different bugs), while the central (official) repository policies highly prefer atomic updates \u2013 \"one changeset = one bug\", or close to that. Source-code management systems have a number of solutions to this problem. Where other systems propose working in branches of code, which would ultimately be merged, most if not all illumos developers (of those who responded to my call for real-life info) prefer to clone complete Mercurial repositories (one per bug), spawn separate workspaces and develop there. The rest of this page shall discuss several practical approaches to this. There is also some controversy about using Mercurial Queues to track small fixes: Gordon: If you have a bunch of small fixes underway simultaneously, you might consider using \"hg mq\" (hg qpush, hg qpop, ...): http://mercurial.selenic.com/wiki/MqExtension Dan: I find mq causes more problems than it solves but that's just me.","title":"Introduction"},{"location":"developers/multibug/#three-tiered-approach","text":"In this approach the developer maintains a \"clean\" replica of the official repository (\"illumos-clone\" as a hg-clone of official illumos-gate in examples below), and his development workspaces (\"ws1 .. wsN\" in examples below) are instantiated in clones of this replica. No actual development occurs in illumos-clone workspace. Whenever work on a new task starts, the developer updates his illumos-clone to current source code, and creates a clone of it (several methods are available and discussed below) named like ws1 or illumos-bug1234. For people who understand pictures better, here is an illustration of proposed repository cloning and tiering architectures: After some development and testing, the developer has committed his changes to the ws1 repository (with the comment like \"1234 Bug description one-liner\"). He should then pull and update the illumos-clone repository from official sources and update the ws1 repository from illumos-clone, and merge any changes. This way the ws1 repository now contains his work as if it was done against the current revision of the \"official\" public source codes. Then the developer prepares a webrev and provides it for public review. Bob: While you were patiently waiting, other changes were put into upstream Mercurial. These changes have to be pulled and merged (to tip) before Mercurial would allow you to push (assuming you were authorized). If files you edited have been updated over time, it would be polite to pull, merge with those changes, re-test, and if they are significant to your work, re-request a review. Mercurial only allows you to push if there is just one head (tip). If changes come in via a pull after you have done a commit, then there will be two heads, which need to be merged. Use 'hg heads' to see the heads. For repositories where the user has the push privileges (such as a forked repository on the BitBucket), the developer can push his tested changes from ws1 repository to illumos-clone repository and then to his own repository fork on the public hosting service. This would allow other developers to look into completed code for review, or to pull his changes into their systems (such as when the integration into \"official\" repository occurs). Bob: If you do \"hg paths\" in illumos-clone it will report that it points to the official master. If you do the same in \"ws1\" it will report that it points to local \"illumos-clone\". If your approved changeset is in \"ws1\" then you would first do \"hg push\" in \"ws1\", then change to \"illumos-clone\" (which now contains the changeset) and do \"hg push\" to push to the official master. Of course merging is likely required before you can push. The necessary pulls are inverse of the push \u2013 so if you want to get new upstream changesets into \"ws1\", you would first do an \"hg pull\" in \"illumos-clone\" and then in \"ws1\". Changes may be pushed to something other than the default upstream repository by specifying the repository URL when you do the push, or by editing .hg/hgrc inside the repository base directory and changing the \"default\" definition to the new path. This means that you could push directly from \"ws1\" to the official master provided that any pending upstream changesets have been merged as a merge changeset. This pattern applies not only to illumos-gate, but also to other related illumos/OpenIndiana subprojects hosted in Mercurial repositories. Keeping a tier of the golden repository allows you to save some internet traffic (when propagating changesets from upstream to your numerous workspaces) and to quickly instantiate clones of the current public source code (again, saving on traffic \u2013 actually, being independent of network connectivity). Dan: I actually maintain a clone of illumos-gate locally (illumos-clone), and my works in progress are children of illumos-clone. It does eat disk space, but combined with sensible build practices (e.g. not doing full nightly builds until you're very close to integration) it's not all that bad. Don't forget about building modules when you only need modules, as I mention here: http://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html Some developers use short-lived repos for one task, others instead prefer to spawn a few workspaces, and reuse them for new projects after the current one has been committed upstream: Steve: after my changes are pushed, I can just sync it up with its parent and I am ready to work on another change-set in this repo (hg pull; hg update). I do use mv to rename repos, so that I have some visual reminder of what that repo is currently used for. Dan: Once a child's diffs appear in illumos-gate, the child gets removed.","title":"Three-tiered approach"},{"location":"developers/multibug/#general-setup","text":"General build-system preparation is as outlined in How To Build illumos, however there is some difference in source-code repository organization and naming. Like in that tutorial, the repositories are assumed to be hosted under /code directory. Depending on the adopted pattern, each repository can be an individual ZFS dataset, or they can be sub-directories within one filesystem. Elaborate on dataset setup, perhaps copy from main tutorial. There are at least two variations, depending on the technology you choose to use. You can clone repositories with tools built into the SCM, in our case \u2013 by using the \"hg clone\" command. Alternately you can use ZFS clones and rewrite the pointer to parent repository in the cloned child repo. Also the repositories can be just copied as directories with files, but this is likely to be the most space-consuming option.","title":"General setup"},{"location":"developers/multibug/#zfs-cloning-prepare-dataset-hierarchy","text":"Note These examples put the repository into rpool. You're welcome to use another ZFS pool if available on your system. To follow this route, each your repository must reside in its individual dedicated dataset which was created and prepared with commands like these (see How To Build illumos for more details): sudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev sudo zfs create rpool/export/home/illumos-dev/code sudo ln -s ./export/home/illumos-dev/code / sudo chown -R $USER /export/home/illumos-dev sudo zfs create -o sync=disabled rpool/export/home/illumos-dev/code/illumos-clone","title":"zfs-cloning \u2013 Prepare dataset hierarchy"},{"location":"developers/multibug/#hg-cloning-or-file-copying","text":"I was told that hg clone would try to use hardlinks to save space and time, so I guess keeping the masters and clones in one filesystem (accessible under /code below) is highly recommended. Bob: Look in the hidden .hg directory for the actual repository. For local clones, Hg can use hard links to refer to the same repository files. The hard link is broken if the file is to be updated. ZFS's clone can do a bit better because Mercurial only appends to repository files so ZFS-cloned blocks will remain de-duplicated unless they are a short tail block which was updated. You are still welcome to use a ZFS dataset dedicated to holding all the repositories: sudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev sudo zfs create rpool/export/home/illumos-dev/code sudo ln -s ./export/home/illumos-dev/code / sudo chown -R $USER /export/home/illumos-dev","title":"hg-cloning or file-copying"},{"location":"developers/multibug/#initialize-the-local-master-repository","text":"The repository directory may exist, but must be empty if it does. cd /code hg clone ssh://anonhg@hg.illumos.org/illumos-gate ./illumos-clone Never touch illumos-clone except to pull changes from upstream Mercurial allows to rename repositories as suits you today with filesystem utilities (this may be more useful on your child repositories though \u2013 i.e. rename them according to your bug-number-du-jour), so creation of your golden repository could instead be done like this: cd /code hg clone ssh://anonhg@hg.illumos.org/illumos-gate mv illumos-gate illumos-clone","title":"Initialize the local master repository"},{"location":"developers/multibug/#update-the-local-master-repository","text":"cd /code/illumos-clone hg pull -u Since there are no changes of your own in this repo, merging should be trivial and complete automatically.","title":"Update the local master repository"},{"location":"developers/multibug/#clone-the-local-master-into-a-child-repository-for-work","text":"There are at least two variations, depending on the technology you choose to use. You can clone repositories with tools built into the SCM, in our case \u2013 by using the \"hg clone\" command. Alternately you can use ZFS clones and rewrite the default pointer to parent repository in the cloned child repo. Bob: In addition to \"default\" there is \"default-push\" which specifies the default URL to push to. Besides the apparent \"exotic\" setup there is also the mundane approach (which I use) which pulls updates from the http:// appearance of a server and pushes to the ssh:// appearance of the same server. This results in faster clones/updates while obtaining the secure SSH authentication when pushing. Also the repositories can be just copied as directories with files, but this is likely to be the most space-consuming option. Examples below use the bugID-based naming convention for child repositories and their workspaces. Some developers instead prefer to spawn a few statically-named workspaces (\"ws1 .. wsN\"), and reuse them for new projects after the current one has been committed upstream (so the repo with this author's changes is identical to upstream).","title":"Clone the local master into a child repository for work"},{"location":"developers/multibug/#zfs-cloning","text":"Update the local master repository (see above) and create a uniquely named ZFS snapshot of its dataset, and then clone it, for example: zfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006 zfs clone rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006 rpool/export/home/illumos-dev/code/illumos-bug1234 Now you'll have to modify the clone's pointer to parent repository (so it's local, not Internet as was for the golden image). Edit /code/illumos-bug1234/.hg/hgrc file which may look like this: [paths] default = ssh://anonhg@hg.illumos.org/illumos-gate You should replace the default path with the local pathname to the local master repository, like this: [paths] default = /code/illumos-clone hg-cloning Update the local master repository (see above) and create a Mercurial clone: cd /code hg clone illumos-clone illumos-bug1234 This takes care of the child's parent relationships.","title":"zfs-cloning"},{"location":"developers/multibug/#file-copy-cloning","text":"This is the least recommended method. Still, you might have your reasons... Update the local master repository (see above) and copy the whole repo directory: cd /code cp -pr illumos-clone illumos-bug1234 You might alternatively use rsync, gtar, cpio and such.","title":"file copy cloning"},{"location":"developers/multibug/#work-in-the-child-copy","text":"cd /code/illumos-bug1234 ### edit files hg add new files hg commit -m 1234 Bug description one-liner webrev... ### (example webrev command-line from real-life is appreciated) ### repeat if more work on this bug is needed Dan: If you've just the one set of changes, \"webrev\" all by itself is sufficient. It'll create /code/illumos-bug1234/webrev/. You can then scp/mv/ln/etc. that webrev/ directory into an HTTP-reachable directory somewhere.","title":"Work in the child copy"},{"location":"developers/multibug/#after-some-work-in-the-child-workspace-you-need-to-pull-changes-from-upstream","text":"In particular, you must do this before completing your work to make the review or integration. ### Update master repo cd /code/illumos-clone hg pull -u ### Now illumos-clone is up to date. ### For each child like illumos-bug1234 : cd /code/illumos-bug1234 ### Make sure I ve committed any outstanding diffs hg pull -u ; hg merge ### Resolve conflicts if any hg commit -m blah hg recommit ### edit push string to remove crap","title":"After some work in the child workspace, you need to pull changes from upstream..."},{"location":"developers/multibug/#publish-your-work","text":"Developers' habits and best-practices \"as-is\": Steve: I recommend to keep change sets small. Ideally, one bug, or concise feature per change set. Rules are made to be broken, but there are many advantages: easier to review, easier to back out, easier for someone to take or leave. I agree about this in terms of upstream repository, that an atomary change to close a bug is a good thing. However, does it mean that during local development I should not hg commit successful changes to my code before I go on (as I often do, leading to several commits per day)? Or are we talking about different things? =) You could do that, but I find it is much simpler to stick to the one repo, one changeset, one bug, one commit, one push rule. Usually the checkin workflow for me goes like this: Done with coding and testing... Update repo with latest changes from parent, if any ( ie hg pull; hg update) Merge if necessary (relatively rare) hg commit hg push At this point the repo is ready for some other work item. Anyway, publishing a webrev and reworking on comments, and making new webrevs, would still likely produce several local commits. From what I gathered around the docs, it is possible to diff your repo against the upstream one, and produce a single changeset which contains the final result of your work so far. Change sets are produced by hg commit . These can be pushed (easily) to an upstream repo, and they remain change sets there as well. You can produce a text diff rendering of any change set, e.g.: hg diff -c xxxxx (xxxxx being the change set number). Also, see hg export and hg import . Also most docs value the local commit history (commit comments) as being potentially useful to the developer and to the general community after the upstream merge. How do these comments get passed up and survive eventual destruction of the child repo (if they do)? Yes, comments are important, they make it easier for someone to discern what the change set is about. Comments added with -m ..comment... at commit time (or via a text editor, if you are so configured) are associated with the change set, and travel with the change set as it gets pushed, exported and imported. Again, once you commit and push the change set upstream, the comment goes with it, so it does not matter if you subsequently destroy the repo where you did the work.","title":"Publish your work"},{"location":"developers/studio/","text":"Building illumos with Sun Studio Here Be Dragons Building illumos with Sun Studio is not recommended. If you do wish to build with Sun Studio, you need specifically patched versions of both Studio 12 (used to compile) and 12.1 (used for lint) to get consistent results. These are no longer distributed by Oracle and can not be legally found in the open Internet. If you do not have access to these versions, skip this section and use GCC. Introduction illumos-gate does not build correctly with Sun Studio versions released after 12.0. Reportedly using a newer version of the compiler will produce a system containing grave, data-corrupting bugs. Patched compilers were previously available from Sun Microsystems, however not licensed for redistribution. After a recent Oracle site reorganization, the necessary compilers are no longer available. Requirements If you have the patched versions of both Sun Studio 12 and 12.1, they should be installed in /opt/SUNWspro (Studio 12), and /opt/SUNWspro/sunstudio12.1 (Studio 12.1), respectively. Pay attention, the Studio 12.1 location is different from how it was in OpenSolaris, i.e. it's not /opt/sunstudio12.1 . The meta-procedure for cleaning up optionally prepackaged Sun Studio installations and installing the ones you require for building illumos (assuming your stashed Sun Studio 12 distribution archives are now pre-copied to /tmp) is as follows: sudo pkg uninstall \\ pkg:/developer/sunstudio12u1* \\ pkg:/metapackages/build-essential sudo mkdir -p /opt/SUNWspro cd /opt/SUNWspro sudo tar xjf /tmp/sunstudio12-patched-ii-2009Sep-sol-x86.tar.bz2 sudo tar xzf /tmp/sunstudio12u1-patched-ii-2010Feb-sol-x86.tar.gz The first archive contains the product component sub-directories directly at the top-level, and the second has similar sub-directories under the top-level sunstudio12.1 as its children. Thus you receive the structure outlined above. You can check if you have the correct versions installed as follows. All of the following tests must succeed and return these specific product/patch versions: $ /opt/SUNWspro/bin/cc -V cc: Sun C 5.9 SunOS_i386 Patch 124868-10 2009/04/30 usage: cc ... $ /opt/SUNWspro/sunstudio12.1/bin/cc -V cc: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03 usage: cc ... $ /opt/SUNWspro/sunstudio12.1/bin/lint -V lint: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03 usage: lint ... You must then adjust your nightly(1) environment file (i.e. by adding a line in illumos.sh ) to specify that Studio should be used as the default compiler, by adding: export __SUNC= ;","title":"Building with Sun Studio"},{"location":"developers/studio/#building-illumos-with-sun-studio","text":"Here Be Dragons Building illumos with Sun Studio is not recommended. If you do wish to build with Sun Studio, you need specifically patched versions of both Studio 12 (used to compile) and 12.1 (used for lint) to get consistent results. These are no longer distributed by Oracle and can not be legally found in the open Internet. If you do not have access to these versions, skip this section and use GCC.","title":"Building illumos with Sun Studio"},{"location":"developers/studio/#introduction","text":"illumos-gate does not build correctly with Sun Studio versions released after 12.0. Reportedly using a newer version of the compiler will produce a system containing grave, data-corrupting bugs. Patched compilers were previously available from Sun Microsystems, however not licensed for redistribution. After a recent Oracle site reorganization, the necessary compilers are no longer available.","title":"Introduction"},{"location":"developers/studio/#requirements","text":"If you have the patched versions of both Sun Studio 12 and 12.1, they should be installed in /opt/SUNWspro (Studio 12), and /opt/SUNWspro/sunstudio12.1 (Studio 12.1), respectively. Pay attention, the Studio 12.1 location is different from how it was in OpenSolaris, i.e. it's not /opt/sunstudio12.1 . The meta-procedure for cleaning up optionally prepackaged Sun Studio installations and installing the ones you require for building illumos (assuming your stashed Sun Studio 12 distribution archives are now pre-copied to /tmp) is as follows: sudo pkg uninstall \\ pkg:/developer/sunstudio12u1* \\ pkg:/metapackages/build-essential sudo mkdir -p /opt/SUNWspro cd /opt/SUNWspro sudo tar xjf /tmp/sunstudio12-patched-ii-2009Sep-sol-x86.tar.bz2 sudo tar xzf /tmp/sunstudio12u1-patched-ii-2010Feb-sol-x86.tar.gz The first archive contains the product component sub-directories directly at the top-level, and the second has similar sub-directories under the top-level sunstudio12.1 as its children. Thus you receive the structure outlined above. You can check if you have the correct versions installed as follows. All of the following tests must succeed and return these specific product/patch versions: $ /opt/SUNWspro/bin/cc -V cc: Sun C 5.9 SunOS_i386 Patch 124868-10 2009/04/30 usage: cc ... $ /opt/SUNWspro/sunstudio12.1/bin/cc -V cc: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03 usage: cc ... $ /opt/SUNWspro/sunstudio12.1/bin/lint -V lint: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03 usage: lint ... You must then adjust your nightly(1) environment file (i.e. by adding a line in illumos.sh ) to specify that Studio should be used as the default compiler, by adding: export __SUNC= ;","title":"Requirements"},{"location":"developers/workspaces/","text":"Requires Review This page references some old practices and needs to be reviewed. Note https://wiki.illumos.org/display/illumos/Managing+multiple+workspaces+for+illumos+with+Git Managing Multiple Workspaces By Bayard G. Bell Make a symlink to the dedicated package repository (Optional) If you used a separate ZFS dataset for packages, as detailed in Build datasets and checked out the workspace with one of the methods in How To Build illumos, now is the time to symlink to it. If you don't, a directory named packages will be created under the workspace directory in due course during the build, within the build dataset; if that happens \u2013 you may just move the files into the dedicated dataset after the successful build and make the symlink then: sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate Golden repository \u2013 one of many If you want to Work on several bugs at once , you may want to maintain a \"golden image\" of the source code repository in a dedicated dataset and zfs clone that for your actual works. In this case you'd run: sudo zfs create rpool/export/home/illumos-dev/code/illumos-clone sudo chown -R $USER /export/home/illumos-dev cd /code hg clone ssh://anonhg@hg.illumos.org/illumos-gate illumos-clone ### This symlink is optional - if you store packages in a separate dataset sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-clone TS= `/bin/date +%Y%m%d-%H%M%S ` zfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@ $TS zfs clone rpool/export/home/illumos-dev/code/illumos-clone@ $TS \\ rpool/export/home/illumos-dev/code/illumos-gate In the multiple-workspace pattern you'd likely name the clone according to the bugID you're working on in it, like \"illumos-bug1234\" Now you'll have to modify the clone's pointer to parent repository (so it's local, not Internet as was true for the golden image). Edit the clone's /code/illumos-gate/.hg/hgrc file and replace the default path with the local pathname to the local master repository, like this: [paths] default = /code/illumos-clone Diagram For those people who understand pictures better, here is an illustration of illumos-gate development with multiple repositories and hints to the contribution process:","title":"Multiple Workspaces"},{"location":"developers/workspaces/#managing-multiple-workspaces","text":"By Bayard G. Bell","title":"Managing Multiple Workspaces"},{"location":"developers/workspaces/#make-a-symlink-to-the-dedicated-package-repository-optional","text":"If you used a separate ZFS dataset for packages, as detailed in Build datasets and checked out the workspace with one of the methods in How To Build illumos, now is the time to symlink to it. If you don't, a directory named packages will be created under the workspace directory in due course during the build, within the build dataset; if that happens \u2013 you may just move the files into the dedicated dataset after the successful build and make the symlink then: sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate","title":"Make a symlink to the dedicated package repository (Optional)"},{"location":"developers/workspaces/#golden-repository-one-of-many","text":"If you want to Work on several bugs at once , you may want to maintain a \"golden image\" of the source code repository in a dedicated dataset and zfs clone that for your actual works. In this case you'd run: sudo zfs create rpool/export/home/illumos-dev/code/illumos-clone sudo chown -R $USER /export/home/illumos-dev cd /code hg clone ssh://anonhg@hg.illumos.org/illumos-gate illumos-clone ### This symlink is optional - if you store packages in a separate dataset sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-clone TS= `/bin/date +%Y%m%d-%H%M%S ` zfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@ $TS zfs clone rpool/export/home/illumos-dev/code/illumos-clone@ $TS \\ rpool/export/home/illumos-dev/code/illumos-gate In the multiple-workspace pattern you'd likely name the clone according to the bugID you're working on in it, like \"illumos-bug1234\" Now you'll have to modify the clone's pointer to parent repository (so it's local, not Internet as was true for the golden image). Edit the clone's /code/illumos-gate/.hg/hgrc file and replace the default path with the local pathname to the local master repository, like this: [paths] default = /code/illumos-clone","title":"Golden repository \u2013 one of many"},{"location":"developers/workspaces/#diagram","text":"For those people who understand pictures better, here is an illustration of illumos-gate development with multiple repositories and hints to the contribution process:","title":"Diagram"},{"location":"flagdays/","text":"Flag Days The following are notices sent to the developer@ mailing list to attract attention for specific changes, or call out specific actions that developers may need to perform to continue working with the sources. Such messages should also be archived here, for future reference. 2018 2018-01-25 HEADS UP: Removal of 32-bit x86 kernel 2017 2017-03-02 Heads up: 7788 loader: zfs boot should check for provided fstype 2017-03-07 HEADS UP: Removal of on and rpc.rexd 2017-03-10 HEADSUP: updates 7720 7715 2017-09-27 Heads Up: Build changes required for UEFI 2016 2016-02-23 HEADS UP: 3661 Sync mDNS with upstream 2016-07-14 Heads-up: 6950 ARC should cache compressed data 2016-08-22 FLAG DAY: EOF of SunSSH 2016-08-31 HEADS UP: illumos-gate debug variant is available in hipster 2016-09-23 Heads Up: Loader Project Phase 1 has Integrated 2016-09-30 FLAG DAY - 5969 update illumos-gate to use python2.7 2016-10-15 HEADS-UP: illumos supports ASLR and other forms of exploit mitigation. 2016-11-09 HEADS UP: new driver for Intel WifiLink 4965/100/1000/2000/5000/6000 2016-12-02 headsup for shell setup and /etc/skel 2016-12-16 HEADS UP illumos GCC 4.4.4-il-4 2015 2015-02-20 Heads-up: Flag day for build machines that provided (only) Apache 1.3 headers. 2015-02-25 HEADS UP: machid commands removed 2015-02-26 HEADS-UP: ctf tools no longer act like strip(1) 2015-02-26 HEADS UP: illumos supports booting from EFI-labeled disks now, including large disks and whole-disk vdevs 2015-03-23 FLAG DAY for Timezone 2015-05-05 FLAG DAY - 4719 affects nightly, package, and poold 2015-05-05 HEADS UP -- illumos-gate can now be built on OmniOS r151014 or later 2015-06-04 Head-up! 5917 User-mode SMB server 2015-07-13 FLAG DAY: make/dmake are now part of illumos 2015-10-17 Heads up: Impact of illumos 5876 (sys/regset.h pollutes name space) Update 2015-10-30 HEADS UP: Java kerberos GUI (gkadmin) gone 2014 2014-01-28 HEADS-UP: GCC is now the default compiler 2014-02-19 HEADS UP: Nightly will no longer bringover from Subversion, build SVR4 packages, or support the old SFW gate 2014-02-19 HEADS UP: nightly now exits non-0 when pretty much anything goes wrong 2014-06-09 HEADS UP: legacy interfaces removed 2014-07-21 HEADS UP: Mandoc integrated 2014-08-15 HEADS UP / FLAG DAY: legacy (K R) prototypes are gone 2014-08-16 HEADS-UP removal of ntfsprogs and parted 2014-10-18 HEADS UP: libm integrated 2013 2013-08-16 heads up: 3915 build changes, C++ 2012 2012-06-15 Illumos will now build with GCC 4.4.4 + patches 2012-09-21 FLAG DAY: Default GCC version is now 4.4.4 2012-09-22 FLAG DAY: Many more GCC warnings now enabled 2012-10-18 HEADS UP: onbld has switched to Python 2.6 2011 2011-03-04 Heads up: iSCSI UNMAP support 2011-05-14 Heads-up: Resurrect the ZFS \"aclmode\" property 2011-09-08 HEADS UP: Mailing List Behaviour 2010 2010-08-15 HEADS UP: Illumos no longer depends upon the 'extras' pkg repository 2010-08-19 HEADS UP: opensolaris.sh updated renamed 2010-08-30 HEADS UP: English Locales Available 2010-09-07 HEADS UP: use ssh for hg 2010-09-12 FLAG DAY: signed crypto removed 2010-09-16 HEADS UP: new process when nuking closed bits 2010-09-20 HEADS UP: netservices is gone 2010-10-08 HEADS UP: locale data pushed 2010-11-08 Heads up: perl 5.8.4 removal 2010-11-18 HEADS UP: solistice enterprise agent removed 2010-11-19 HEADS UP: sparc build fixed, niagra crypto removed 2010-12-04 HEADS UP: open source iprb 2010-12-04 HEADS UP: new timegm() and strptime/strftime options 2010-12-15 HEADS UP: new \"sed\" integrated","title":"Flag Days"},{"location":"flagdays/#flag-days","text":"The following are notices sent to the developer@ mailing list to attract attention for specific changes, or call out specific actions that developers may need to perform to continue working with the sources. Such messages should also be archived here, for future reference.","title":"Flag Days"},{"location":"flagdays/#2018","text":"2018-01-25 HEADS UP: Removal of 32-bit x86 kernel","title":"2018"},{"location":"flagdays/#2017","text":"2017-03-02 Heads up: 7788 loader: zfs boot should check for provided fstype 2017-03-07 HEADS UP: Removal of on and rpc.rexd 2017-03-10 HEADSUP: updates 7720 7715 2017-09-27 Heads Up: Build changes required for UEFI","title":"2017"},{"location":"flagdays/#2016","text":"2016-02-23 HEADS UP: 3661 Sync mDNS with upstream 2016-07-14 Heads-up: 6950 ARC should cache compressed data 2016-08-22 FLAG DAY: EOF of SunSSH 2016-08-31 HEADS UP: illumos-gate debug variant is available in hipster 2016-09-23 Heads Up: Loader Project Phase 1 has Integrated 2016-09-30 FLAG DAY - 5969 update illumos-gate to use python2.7 2016-10-15 HEADS-UP: illumos supports ASLR and other forms of exploit mitigation. 2016-11-09 HEADS UP: new driver for Intel WifiLink 4965/100/1000/2000/5000/6000 2016-12-02 headsup for shell setup and /etc/skel 2016-12-16 HEADS UP illumos GCC 4.4.4-il-4","title":"2016"},{"location":"flagdays/#2015","text":"2015-02-20 Heads-up: Flag day for build machines that provided (only) Apache 1.3 headers. 2015-02-25 HEADS UP: machid commands removed 2015-02-26 HEADS-UP: ctf tools no longer act like strip(1) 2015-02-26 HEADS UP: illumos supports booting from EFI-labeled disks now, including large disks and whole-disk vdevs 2015-03-23 FLAG DAY for Timezone 2015-05-05 FLAG DAY - 4719 affects nightly, package, and poold 2015-05-05 HEADS UP -- illumos-gate can now be built on OmniOS r151014 or later 2015-06-04 Head-up! 5917 User-mode SMB server 2015-07-13 FLAG DAY: make/dmake are now part of illumos 2015-10-17 Heads up: Impact of illumos 5876 (sys/regset.h pollutes name space) Update 2015-10-30 HEADS UP: Java kerberos GUI (gkadmin) gone","title":"2015"},{"location":"flagdays/#2014","text":"2014-01-28 HEADS-UP: GCC is now the default compiler 2014-02-19 HEADS UP: Nightly will no longer bringover from Subversion, build SVR4 packages, or support the old SFW gate 2014-02-19 HEADS UP: nightly now exits non-0 when pretty much anything goes wrong 2014-06-09 HEADS UP: legacy interfaces removed 2014-07-21 HEADS UP: Mandoc integrated 2014-08-15 HEADS UP / FLAG DAY: legacy (K R) prototypes are gone 2014-08-16 HEADS-UP removal of ntfsprogs and parted 2014-10-18 HEADS UP: libm integrated","title":"2014"},{"location":"flagdays/#2013","text":"2013-08-16 heads up: 3915 build changes, C++","title":"2013"},{"location":"flagdays/#2012","text":"2012-06-15 Illumos will now build with GCC 4.4.4 + patches 2012-09-21 FLAG DAY: Default GCC version is now 4.4.4 2012-09-22 FLAG DAY: Many more GCC warnings now enabled 2012-10-18 HEADS UP: onbld has switched to Python 2.6","title":"2012"},{"location":"flagdays/#2011","text":"2011-03-04 Heads up: iSCSI UNMAP support 2011-05-14 Heads-up: Resurrect the ZFS \"aclmode\" property 2011-09-08 HEADS UP: Mailing List Behaviour","title":"2011"},{"location":"flagdays/#2010","text":"2010-08-15 HEADS UP: Illumos no longer depends upon the 'extras' pkg repository 2010-08-19 HEADS UP: opensolaris.sh updated renamed 2010-08-30 HEADS UP: English Locales Available 2010-09-07 HEADS UP: use ssh for hg 2010-09-12 FLAG DAY: signed crypto removed 2010-09-16 HEADS UP: new process when nuking closed bits 2010-09-20 HEADS UP: netservices is gone 2010-10-08 HEADS UP: locale data pushed 2010-11-08 Heads up: perl 5.8.4 removal 2010-11-18 HEADS UP: solistice enterprise agent removed 2010-11-19 HEADS UP: sparc build fixed, niagra crypto removed 2010-12-04 HEADS UP: open source iprb 2010-12-04 HEADS UP: new timegm() and strptime/strftime options 2010-12-15 HEADS UP: new \"sed\" integrated","title":"2010"},{"location":"projects/","text":"","title":"Projects"},{"location":"security/","text":"illumos Security Information Introduction Reporting security incidents Please send mail to . TODO: Provide GPG key(s). Recent vulnerabilities Advisory information How to update your system","title":"Security"},{"location":"security/#illumos-security-information","text":"","title":"illumos Security Information"},{"location":"security/#introduction","text":"","title":"Introduction"},{"location":"security/#reporting-security-incidents","text":"Please send mail to . TODO: Provide GPG key(s).","title":"Reporting security incidents"},{"location":"security/#recent-vulnerabilities","text":"","title":"Recent vulnerabilities"},{"location":"security/#advisory-information","text":"","title":"Advisory information"},{"location":"security/#how-to-update-your-system","text":"","title":"How to update your system"},{"location":"user-guide/","text":"Getting Started Introduction As illumos is the core of an operating system -- but not a distribution itself, the easiest way to get started with illumos is to download a distro and start playing. Books We provide a number of books relating to illumos technologies. If your goal is to work on illumos itself, the Developer's Guide or building illumos are good places to get started.","title":"Getting Started"},{"location":"user-guide/#getting-started","text":"","title":"Getting Started"},{"location":"user-guide/#introduction","text":"As illumos is the core of an operating system -- but not a distribution itself, the easiest way to get started with illumos is to download a distro and start playing.","title":"Introduction"},{"location":"user-guide/#books","text":"We provide a number of books relating to illumos technologies. If your goal is to work on illumos itself, the Developer's Guide or building illumos are good places to get started.","title":"Books"},{"location":"user-guide/books/","text":"Books illumos Developer's Guide This guide covers the basic workflow for developing illumos and then dives into specific detail on everything from the layout of the gate to several HOWTOs. Whether this is your first time working with illumos or you remember back when the code in the gate all referred to something called SunOS, this guide will help you in enhancing and fixing illumos. Dynamic Tracing Guide DTrace is a comprehensive dynamic tracing framework for the illumos Operating System. DTrace provides a powerful infrastructure to permit administrators, developers, and service personnel to concisely answer arbitrary questions about the behavior of the operating system and user programs. The illumos Dynamic Tracing Guide describes how to use DTrace to observe, debug, and tune system behavior. This book also includes a complete reference for bundled DTrace observability tools and the D programming language. Modular Debugger Guide The Modular Debugger (MDB) is a highly extensible, general purpose debugging tool for the illumos Operating System. The Modular Debugger Guide describes how to use MDB to debug complex software systems, with a particular emphasis on the facilities available for debugging the illumos kernel and associated device drivers and modules. It also includes a complete reference for and discussion of the MDB language syntax, debugger features, and MDB Module Programming API. Writing Device Drivers Writing Device Drivers provides information on developing drivers for character-oriented devices, block-oriented devices, network devices, SCSI target and HBA devices, and USB devices for the illumos Operating System (illumos). This book discusses how to develop multithreaded reentrant device drivers for all architectures that conform to the illumos DDI/DKI (Device Driver Interface, Driver-Kernel Interface). A common driver programming approach is described that enables drivers to be written without concern for platform-specific issues such as endianness and data ordering. Additional topics include hardening illumos drivers; power management; driver autoconfiguration; programmed I/O; Direct Memory Access (DMA); device context management; compilation, installation, and testing drivers; debugging drivers; and porting illumos drivers to a 64-bit environment. Memory and Thread Placement Optimization Developer's Guide The Memory and Thread Placement Optimization Developer's Guide provides information on locality groups and the technologies that are available to optimize the use of computing resources in the illumos operating system.","title":"Books"},{"location":"user-guide/books/#books","text":"","title":"Books"},{"location":"user-guide/books/#illumos-developers-guide","text":"This guide covers the basic workflow for developing illumos and then dives into specific detail on everything from the layout of the gate to several HOWTOs. Whether this is your first time working with illumos or you remember back when the code in the gate all referred to something called SunOS, this guide will help you in enhancing and fixing illumos.","title":"illumos Developer's Guide"},{"location":"user-guide/books/#dynamic-tracing-guide","text":"DTrace is a comprehensive dynamic tracing framework for the illumos Operating System. DTrace provides a powerful infrastructure to permit administrators, developers, and service personnel to concisely answer arbitrary questions about the behavior of the operating system and user programs. The illumos Dynamic Tracing Guide describes how to use DTrace to observe, debug, and tune system behavior. This book also includes a complete reference for bundled DTrace observability tools and the D programming language.","title":"Dynamic Tracing Guide"},{"location":"user-guide/books/#modular-debugger-guide","text":"The Modular Debugger (MDB) is a highly extensible, general purpose debugging tool for the illumos Operating System. The Modular Debugger Guide describes how to use MDB to debug complex software systems, with a particular emphasis on the facilities available for debugging the illumos kernel and associated device drivers and modules. It also includes a complete reference for and discussion of the MDB language syntax, debugger features, and MDB Module Programming API.","title":"Modular Debugger Guide"},{"location":"user-guide/books/#writing-device-drivers","text":"Writing Device Drivers provides information on developing drivers for character-oriented devices, block-oriented devices, network devices, SCSI target and HBA devices, and USB devices for the illumos Operating System (illumos). This book discusses how to develop multithreaded reentrant device drivers for all architectures that conform to the illumos DDI/DKI (Device Driver Interface, Driver-Kernel Interface). A common driver programming approach is described that enables drivers to be written without concern for platform-specific issues such as endianness and data ordering. Additional topics include hardening illumos drivers; power management; driver autoconfiguration; programmed I/O; Direct Memory Access (DMA); device context management; compilation, installation, and testing drivers; debugging drivers; and porting illumos drivers to a 64-bit environment.","title":"Writing Device Drivers"},{"location":"user-guide/books/#memory-and-thread-placement-optimization-developers-guide","text":"The Memory and Thread Placement Optimization Developer's Guide provides information on locality groups and the technologies that are available to optimize the use of computing resources in the illumos operating system.","title":"Memory and Thread Placement Optimization Developer's Guide"},{"location":"user-guide/bugs/","text":"Bug Trackers Project Description illumos-gate Core. Kernel, userland, drivers, etc. OpenIndiana Distribution-specific SmartOS Distribution-specific OmniOS Distribution-specific Joyent pkgsrc Cross-platform packages How to report problems Before creating new issues in the bug tracker, please do a search to determine if the problem is known or resolved. Please see the debugging section for help with troubleshooting problems. You can report a new issue using our issue tracker. A good issue report includes: Steps for reproducing the problem, in as much detail as possible. Information about your system software and hardware. For crashes, the contents of the crash information file from the above section. Please paste any error messages, or the output of ::msgbuf from mdb directly in the bug description. Examples of bug fixing Ryan Zezeski goes through fixing a bug in ZFS in this \"illumos Day\" talk. ( video , slides )","title":"Bug Reporting"},{"location":"user-guide/bugs/#bug-trackers","text":"Project Description illumos-gate Core. Kernel, userland, drivers, etc. OpenIndiana Distribution-specific SmartOS Distribution-specific OmniOS Distribution-specific Joyent pkgsrc Cross-platform packages","title":"Bug Trackers"},{"location":"user-guide/bugs/#how-to-report-problems","text":"Before creating new issues in the bug tracker, please do a search to determine if the problem is known or resolved. Please see the debugging section for help with troubleshooting problems. You can report a new issue using our issue tracker. A good issue report includes: Steps for reproducing the problem, in as much detail as possible. Information about your system software and hardware. For crashes, the contents of the crash information file from the above section. Please paste any error messages, or the output of ::msgbuf from mdb directly in the bug description.","title":"How to report problems"},{"location":"user-guide/bugs/#examples-of-bug-fixing","text":"Ryan Zezeski goes through fixing a bug in ZFS in this \"illumos Day\" talk. ( video , slides )","title":"Examples of bug fixing"},{"location":"user-guide/debug-apps/","text":"Inspecting An Application Crash Check your core file configuration: # coreadm This should print something like: global core file pattern: global core file content: default init core file pattern: core init core file content: default global core dumps: disabled per-process core dumps: enabled global setid core dumps: disabled per-process setid core dumps: disabled global core dump logging: disabled If the global core file pattern is empty and per-process core dumps are enabled, an application crash will save a core file named core in the working directory. To print the stack information from the crash: pstack core","title":"Applications"},{"location":"user-guide/debug-apps/#inspecting-an-application-crash","text":"Check your core file configuration: # coreadm This should print something like: global core file pattern: global core file content: default init core file pattern: core init core file content: default global core dumps: disabled per-process core dumps: enabled global setid core dumps: disabled per-process setid core dumps: disabled global core dump logging: disabled If the global core file pattern is empty and per-process core dumps are enabled, an application crash will save a core file named core in the working directory. To print the stack information from the crash: pstack core","title":"Inspecting An Application Crash"},{"location":"user-guide/debug-systems/","text":"Requires Review This page contains incomplete content and needs to be reviewed. Debugging broken systems This page is intended to help users of operating systems derived from the illumos gate to bring problems to the attention of the illumos gate developers. All commands in this guide is presumed to be run as a non-privileged user. pfexec will be prepended to commands which need additional privileges. On some systems, the sudo command is used for this purpose. Help! My System Crashed or Locked Up! You might be reading this because your system suddenly printed a panic message on the console, saved a crash dump, and then rebooted (or the popular alternative: suddenly locked up, showed some disk activity, and then rebooted). Or perhaps your system stopped responding and never recovered. Calm down. We want to know about this problem. When illumos crashes (kernel panics), a crash dump is automatically saved containing information from kernel memory. This can be copied to a file. A developer can use use the crash dump to inspect the state of the system at the time of the crash. You can also generate a crash dump manually to debug a hang. If you are on a live session where no storage is available, you may have to manually copy down crash or hang information. A serial console is preferred for this. Gathering Information from a Crash Dump If you are on an installed system and a crash occurs, a crash dump will normally be saved. If you are on a live system, skip to the next section. Assuming the crash does not recur immediately after the reboot, you can retrieve information from the crash dump by following these instructions. Log in as a user with access to pfexec or sudo (typically the user you created at install) Check your crash dump configuration: pfexec dumpadm This should print something like: Dump content: kernel pages Dump device: /dev/zvol/dsk/rpool/dump (dedicated) Savecore directory: /var/crash/kirin Savecore enabled: no Save compressed: on To extract the crash dump from the dump volume: pfexec mkdir -p /var/crash/`hostname` pfexec savecore cd /var/crash/`hostname` pfexec savecore -vf vmdump.0 With the crash dump extracted, you can now copy the kernel messages and stack information from the crash to a file: echo ::panicinfo\\n::cpuinfo -v\\n::threadlist -v 10\\n::msgbuf\\n*panic_thread::findstack -v\\n::stacks | mdb 0 ~/crash.0 Save the crash.0 file in your home directory for reporting the crash. If possible, keep the crash dump files on hand for future examination. If you have available bandwidth and disk space, making this full crash dump accessible to developers is invaluable. Note that due to the nature of the dump, it may contain information you consider confidential. Use your judgment when making it generally available. Notes Configuring your crash dump. The commands \"dumpadm\" and \"coreadm\" and be used to list and alter the location and/or the actual contents of the resulting crash dump. Ensuring a successful crash dump If you do not see a line like \"100% done .... dump succeeded\" on the console (if you have a console) or when you later try to analyze your crash dump via \"savecore -vd\" or \"savecore\" you see a message like \"savecore: bad magic number 0\". You are probably are hitting illumos Bug #1110 and Bug #1369 (disable multi-threaded dump). In this case in order to successfully force a crash dump (if you do not see \"dump succeeded\") you should modify your system to perform a non-threaded crash dump by adding the following line to your /etc/system file \"set dump_plat_mincpu=0\" and then performing a reconfiguration reboot. Forcing a crash dump. In order to force a crash dump form a working system that still has interactive capabilities you can do one of the following: as below \"Gathering Information from a Running System\". as below \"Gathering Information from a Running System, using only NMI (x86)\". issue the command \"savecore -L\" from the command line, this is not be the \"best\" method for debugging an issue. issue the command \"reboot -d\", this is not be the \"best\" method for debugging an issue. Gathering Information from a Running System If you can reproduce the hang or crash, enabling the kernel debugger beforehand is a way to get valuable information about it. The best option, if problem occurs after the system has access to storage, is to use the debugger to save a crash dump. Otherwise, you should record as much diagnostic information as possible from the debugger.. A serial console or some form of lights-out management (LOM) functionality is preferred for interacting with the debugger. To use a serial console, you need an onboard or USB serial port, a null modem cable, and another computer with a serial port, and to boot with the appropriate -B console=ttya or similar option. For a local console, you need a monitor and keyboard. On x86, this must be a PS/2 keyboard or a USB keyboard operating in USB legacy (PS/2 emulation) mode. Enabling verbose boot messages and the kernel debugger (kmdb) on x86 At the GRUB prompt, highlight the boot environment with the arrow keys and press 'e' to edit the commands. Highlight the splashimage line, if it exists, and press 'd' to delete. Highlight the kernel line and press 'e' to edit. Append -kvd -m verbose to the end of the line (and remove console=graphics if it appears after -B) Press 'Enter' when finished, and then press 'b' to boot. Enabling verbose boot messages and the kernel debugger (kmdb) on SPARC: Press 'Stop' ('L1'), then 'A' or send a BREAK on the serial line to interrupt the boot process, if necessary. At the ok prompt, type boot -kvd -m verbose and press 'Enter'. On both platforms Wait for the kmdb prompt to appear, then type moddebug/W 80000000 and press 'Enter'. Type snooping/W 1 and press 'Enter'. Type :c and press 'Enter'. If the system panics, copy down ::msgbuf , ::status and ::stack . If the system hangs, copy down the last few lines regarding modules on screen, and do one of: On a serial console, send a BREAK on the serial line using your serial communications program. On a local keyboard on SPARC, press 'Stop' ('L1'), then 'A'. On a local keyboard on x86, press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'. Generate an NMI if your system provides this capability (hardware button, service processor command). When you are successful the system should drop you into a kmdb prompt. Use $ systemdump to save a crash dump. The system should automatically reboot when finished. Follow \"Gathering Information About A Crash\", above. If you cannot save a crash dump, and are on a serial console, enter ::msgbuf, ::panicinfo, ::cpuinfo -v and::threadlist -v 10 and record the output. (Or take photos if you're unlucky enough to be at a VGA console).. Gathering Information from a Running System, Using only NMI (x86) In order to force a crash dump form a system that seems hung or frozen e.g. no longer has has interactive capabilities if your system supports NMI (hardware button, service processor command) it might be a good practice to permanently configure the following: Adding the line (as user root) set pcplusmp:apic_panic_on_nmi = 1 to your /etc/system file allows a crash dump to be generated on the receipt by your system of an NMI (non-maskable interrupt). Once this line is added you will have to do a reconfiguration reboot. Note, If you also have the line set pcplusmp:apic_kmdb_on_nmi=1 in your /etc/system file you will not generate a crash dump, but rather go into the kernel debugger as this later directive takes priority over the pcplusmp:apic_panic_on_nmi setting. The above might be a a very good practice as it simplifies forcing a \"crash dump\" (avoids the x86 requirement of keyboard input e.g. press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'.). However this simplification will a) not work on all platforms and b) might even cause issues on a few system types and c) works if your system loads/uses the pcplusmp module (not the apix module). Because of these requirements despite the fact that many admins use this as a default setting it is not the default configuration for fresh installs of the OS. More resources: Debugging, Testing, and Tuning Device Drivers (from the Writing Device Drivers Guide ) Debugging With the Kernel Memory Allocator (from the Modular Debugger Guide ) Diagnosing kernel hangs/panics with kmdb and moddebug by Dan Mick Crash dump analysis on OpenSolaris Solaris 10 crash dumps","title":"Systems"},{"location":"user-guide/debug-systems/#debugging-broken-systems","text":"This page is intended to help users of operating systems derived from the illumos gate to bring problems to the attention of the illumos gate developers. All commands in this guide is presumed to be run as a non-privileged user. pfexec will be prepended to commands which need additional privileges. On some systems, the sudo command is used for this purpose.","title":"Debugging broken systems"},{"location":"user-guide/debug-systems/#help-my-system-crashed-or-locked-up","text":"You might be reading this because your system suddenly printed a panic message on the console, saved a crash dump, and then rebooted (or the popular alternative: suddenly locked up, showed some disk activity, and then rebooted). Or perhaps your system stopped responding and never recovered. Calm down. We want to know about this problem. When illumos crashes (kernel panics), a crash dump is automatically saved containing information from kernel memory. This can be copied to a file. A developer can use use the crash dump to inspect the state of the system at the time of the crash. You can also generate a crash dump manually to debug a hang. If you are on a live session where no storage is available, you may have to manually copy down crash or hang information. A serial console is preferred for this.","title":"Help! My System Crashed or Locked Up!"},{"location":"user-guide/debug-systems/#gathering-information-from-a-crash-dump","text":"If you are on an installed system and a crash occurs, a crash dump will normally be saved. If you are on a live system, skip to the next section. Assuming the crash does not recur immediately after the reboot, you can retrieve information from the crash dump by following these instructions. Log in as a user with access to pfexec or sudo (typically the user you created at install) Check your crash dump configuration: pfexec dumpadm This should print something like: Dump content: kernel pages Dump device: /dev/zvol/dsk/rpool/dump (dedicated) Savecore directory: /var/crash/kirin Savecore enabled: no Save compressed: on To extract the crash dump from the dump volume: pfexec mkdir -p /var/crash/`hostname` pfexec savecore cd /var/crash/`hostname` pfexec savecore -vf vmdump.0 With the crash dump extracted, you can now copy the kernel messages and stack information from the crash to a file: echo ::panicinfo\\n::cpuinfo -v\\n::threadlist -v 10\\n::msgbuf\\n*panic_thread::findstack -v\\n::stacks | mdb 0 ~/crash.0 Save the crash.0 file in your home directory for reporting the crash. If possible, keep the crash dump files on hand for future examination. If you have available bandwidth and disk space, making this full crash dump accessible to developers is invaluable. Note that due to the nature of the dump, it may contain information you consider confidential. Use your judgment when making it generally available.","title":"Gathering Information from a Crash Dump"},{"location":"user-guide/debug-systems/#notes","text":"Configuring your crash dump. The commands \"dumpadm\" and \"coreadm\" and be used to list and alter the location and/or the actual contents of the resulting crash dump.","title":"Notes"},{"location":"user-guide/debug-systems/#ensuring-a-successful-crash-dump","text":"If you do not see a line like \"100% done .... dump succeeded\" on the console (if you have a console) or when you later try to analyze your crash dump via \"savecore -vd\" or \"savecore\" you see a message like \"savecore: bad magic number 0\". You are probably are hitting illumos Bug #1110 and Bug #1369 (disable multi-threaded dump). In this case in order to successfully force a crash dump (if you do not see \"dump succeeded\") you should modify your system to perform a non-threaded crash dump by adding the following line to your /etc/system file \"set dump_plat_mincpu=0\" and then performing a reconfiguration reboot.","title":"Ensuring a successful crash dump"},{"location":"user-guide/debug-systems/#forcing-a-crash-dump","text":"In order to force a crash dump form a working system that still has interactive capabilities you can do one of the following: as below \"Gathering Information from a Running System\". as below \"Gathering Information from a Running System, using only NMI (x86)\". issue the command \"savecore -L\" from the command line, this is not be the \"best\" method for debugging an issue. issue the command \"reboot -d\", this is not be the \"best\" method for debugging an issue.","title":"Forcing a crash dump."},{"location":"user-guide/debug-systems/#gathering-information-from-a-running-system","text":"If you can reproduce the hang or crash, enabling the kernel debugger beforehand is a way to get valuable information about it. The best option, if problem occurs after the system has access to storage, is to use the debugger to save a crash dump. Otherwise, you should record as much diagnostic information as possible from the debugger.. A serial console or some form of lights-out management (LOM) functionality is preferred for interacting with the debugger. To use a serial console, you need an onboard or USB serial port, a null modem cable, and another computer with a serial port, and to boot with the appropriate -B console=ttya or similar option. For a local console, you need a monitor and keyboard. On x86, this must be a PS/2 keyboard or a USB keyboard operating in USB legacy (PS/2 emulation) mode.","title":"Gathering Information from a Running System"},{"location":"user-guide/debug-systems/#enabling-verbose-boot-messages-and-the-kernel-debugger-kmdb-on-x86","text":"At the GRUB prompt, highlight the boot environment with the arrow keys and press 'e' to edit the commands. Highlight the splashimage line, if it exists, and press 'd' to delete. Highlight the kernel line and press 'e' to edit. Append -kvd -m verbose to the end of the line (and remove console=graphics if it appears after -B) Press 'Enter' when finished, and then press 'b' to boot.","title":"Enabling verbose boot messages and the kernel debugger (kmdb) on x86"},{"location":"user-guide/debug-systems/#enabling-verbose-boot-messages-and-the-kernel-debugger-kmdb-on-sparc","text":"Press 'Stop' ('L1'), then 'A' or send a BREAK on the serial line to interrupt the boot process, if necessary. At the ok prompt, type boot -kvd -m verbose and press 'Enter'.","title":"Enabling verbose boot messages and the kernel debugger (kmdb) on SPARC:"},{"location":"user-guide/debug-systems/#on-both-platforms","text":"Wait for the kmdb prompt to appear, then type moddebug/W 80000000 and press 'Enter'. Type snooping/W 1 and press 'Enter'. Type :c and press 'Enter'. If the system panics, copy down ::msgbuf , ::status and ::stack . If the system hangs, copy down the last few lines regarding modules on screen, and do one of: On a serial console, send a BREAK on the serial line using your serial communications program. On a local keyboard on SPARC, press 'Stop' ('L1'), then 'A'. On a local keyboard on x86, press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'. Generate an NMI if your system provides this capability (hardware button, service processor command). When you are successful the system should drop you into a kmdb prompt. Use $ systemdump to save a crash dump. The system should automatically reboot when finished. Follow \"Gathering Information About A Crash\", above. If you cannot save a crash dump, and are on a serial console, enter ::msgbuf, ::panicinfo, ::cpuinfo -v and::threadlist -v 10 and record the output. (Or take photos if you're unlucky enough to be at a VGA console)..","title":"On both platforms"},{"location":"user-guide/debug-systems/#gathering-information-from-a-running-system-using-only-nmi-x86","text":"In order to force a crash dump form a system that seems hung or frozen e.g. no longer has has interactive capabilities if your system supports NMI (hardware button, service processor command) it might be a good practice to permanently configure the following: Adding the line (as user root) set pcplusmp:apic_panic_on_nmi = 1 to your /etc/system file allows a crash dump to be generated on the receipt by your system of an NMI (non-maskable interrupt). Once this line is added you will have to do a reconfiguration reboot. Note, If you also have the line set pcplusmp:apic_kmdb_on_nmi=1 in your /etc/system file you will not generate a crash dump, but rather go into the kernel debugger as this later directive takes priority over the pcplusmp:apic_panic_on_nmi setting. The above might be a a very good practice as it simplifies forcing a \"crash dump\" (avoids the x86 requirement of keyboard input e.g. press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'.). However this simplification will a) not work on all platforms and b) might even cause issues on a few system types and c) works if your system loads/uses the pcplusmp module (not the apix module). Because of these requirements despite the fact that many admins use this as a default setting it is not the default configuration for fresh installs of the OS. More resources: Debugging, Testing, and Tuning Device Drivers (from the Writing Device Drivers Guide ) Debugging With the Kernel Memory Allocator (from the Modular Debugger Guide ) Diagnosing kernel hangs/panics with kmdb and moddebug by Dan Mick Crash dump analysis on OpenSolaris Solaris 10 crash dumps","title":"Gathering Information from a Running System, Using only NMI (x86)"},{"location":"user-guide/debug/","text":"Requires Review This page contains incomplete content and needs to be reviewed. Debugging illumos contains a number of facilities for debugging misbehaving systems. These include larger, more complicated frameworks like DTrace and MDB to smaller, more easily digestible tools like truss(1) . Broken builds Broken systems Broken applications","title":"Overview"},{"location":"user-guide/debug/#debugging","text":"illumos contains a number of facilities for debugging misbehaving systems. These include larger, more complicated frameworks like DTrace and MDB to smaller, more easily digestible tools like truss(1) .","title":"Debugging"},{"location":"user-guide/debug/#broken-builds","text":"","title":"Broken builds"},{"location":"user-guide/debug/#broken-systems","text":"","title":"Broken systems"},{"location":"user-guide/debug/#broken-applications","text":"","title":"Broken applications"},{"location":"user-guide/manual/","text":"Manual pages You can browse (and link to) the illumos manual pages online . History The manual pages integrated into illumos-gate are taken from the last source drop provided by Sun at http://dlc.sun.com/osol/man/downloads . These sources were outdated in several respects: They are missing descriptions of new features They may still describe some old features They have no updates for changes made by us (obviously) Bugs can be filed under the 'manpages' category of the illumos-gate project to rectify any omissions. While the OpenSolaris build 134 manual pages claim to be under the CDDL in both package license and headers, and newer pages may well claim to be under the CDDL in their header comment, we have elected to treat them as tainted and work from the last explicit source drop. Please do not source text from any OpenSolaris page delivered to the system just because it superficially contains a CDDL header. It is much, much better to be certain. If you update software in a way that must be reflected in the manual, please also update the manual in the same changeset.","title":"Manual Pages"},{"location":"user-guide/manual/#manual-pages","text":"You can browse (and link to) the illumos manual pages online .","title":"Manual pages"},{"location":"user-guide/manual/#history","text":"The manual pages integrated into illumos-gate are taken from the last source drop provided by Sun at http://dlc.sun.com/osol/man/downloads . These sources were outdated in several respects: They are missing descriptions of new features They may still describe some old features They have no updates for changes made by us (obviously) Bugs can be filed under the 'manpages' category of the illumos-gate project to rectify any omissions. While the OpenSolaris build 134 manual pages claim to be under the CDDL in both package license and headers, and newer pages may well claim to be under the CDDL in their header comment, we have elected to treat them as tainted and work from the last explicit source drop. Please do not source text from any OpenSolaris page delivered to the system just because it superficially contains a CDDL header. It is much, much better to be certain. If you update software in a way that must be reflected in the manual, please also update the manual in the same changeset.","title":"History"}]}