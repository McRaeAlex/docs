{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"illumos is a Unix operating system which provides next-generation features for downstream distributions , including advanced system debugging , next generation filesystem , networking, and virtualization options. Please see the about page to learn more about illumos! These documents are part of the illumos documentation project and replace the old illumos wiki. The source for the documentation is available on github, in the illumos/docs repository. If you'd like to edit or expand the documentation, we welcome contributions !","title":"Home"},{"location":"about/","text":"What is illumos? \u00b6 To quote the illumos Developer's Guide : illumos is a consolidation of software that forms the core of an Operating System. It includes the kernel, device drivers, core system libraries, and utilities. It is the home of many technologies including ZFS, DTrace, Zones, CTF, FMA, and more. We pride ourselves on having a stable, highly observable, and technologically different system. In addition, illumos traces it roots back through Sun Microsystems to the original releases of UNIX and BSD. illumos itself does not offer an OS distribution -- rather, it is the core from which distributions can be created. In this sense, illumos is similar to a BSD source tree, or Linux's kernel.org. Please see the history page for more information about the origins of illumos. License \u00b6 illumos is available under the Common Development and Distribution License (CDDL) . Community Values \u00b6 Empathy for users as a core engineering value Maintaining code quality through peer review Technology Features \u00b6 The following are shared development tenets and features for distributions utilizing illumos: Stability SMP support for many CPUs Security facilities like Role-based Access Control (RBAC) and Privileges Multi-tenancy with Zones Deep system introspection with DTrace A unified Fault Management Architecture (FMA) for monitoring hardware Network virtualization with Crossbow Hardware virtualization with KVM Excellent manual pages Source code for the entire system For more in-depth descriptions, please see the features page . Uses for illumos \u00b6 While it can be and is used in nearly any situation where a UNIX-type server is needed, illumos excels at storage applications, large multi-tenant systems, and other cloud-centric uses. Have a look at who is using illumos to see what illumos technologies are being used for! Supported hardware platforms \u00b6 illumos currently best suports 64-bit x86 hardware from Intel and AMD. There are also several SPARC distributions of illumos; if you are interested in running illumos on SPARC, please refer directly to those distributions' docs. To determine if a specific piece of hardware will work with illumos, please refer to the Hardware Compatability List . For pre-defined builds of server-grade hardware, you may also refer to Joyent Engineering Manufactoring database . illumos Development Model \u00b6 Please refer to the illumos Developer's Guide , as well as the Building illumos and contribution sections of this documentation. Contributing to illumos \u00b6 Please see the community and contribution guides if you'd like to participate in the project. Third Party Software \u00b6 illumos does not itself ship third party software, or contain software like webservers and so forth. Distributions include their own package management.","title":"What is illumos?"},{"location":"about/#what-is-illumos","text":"To quote the illumos Developer's Guide : illumos is a consolidation of software that forms the core of an Operating System. It includes the kernel, device drivers, core system libraries, and utilities. It is the home of many technologies including ZFS, DTrace, Zones, CTF, FMA, and more. We pride ourselves on having a stable, highly observable, and technologically different system. In addition, illumos traces it roots back through Sun Microsystems to the original releases of UNIX and BSD. illumos itself does not offer an OS distribution -- rather, it is the core from which distributions can be created. In this sense, illumos is similar to a BSD source tree, or Linux's kernel.org. Please see the history page for more information about the origins of illumos.","title":"What is illumos?"},{"location":"about/#license","text":"illumos is available under the Common Development and Distribution License (CDDL) .","title":"License"},{"location":"about/#community-values","text":"Empathy for users as a core engineering value Maintaining code quality through peer review","title":"Community Values"},{"location":"about/#technology-features","text":"The following are shared development tenets and features for distributions utilizing illumos: Stability SMP support for many CPUs Security facilities like Role-based Access Control (RBAC) and Privileges Multi-tenancy with Zones Deep system introspection with DTrace A unified Fault Management Architecture (FMA) for monitoring hardware Network virtualization with Crossbow Hardware virtualization with KVM Excellent manual pages Source code for the entire system For more in-depth descriptions, please see the features page .","title":"Technology Features"},{"location":"about/#uses-for-illumos","text":"While it can be and is used in nearly any situation where a UNIX-type server is needed, illumos excels at storage applications, large multi-tenant systems, and other cloud-centric uses. Have a look at who is using illumos to see what illumos technologies are being used for!","title":"Uses for illumos"},{"location":"about/#supported-hardware-platforms","text":"illumos currently best suports 64-bit x86 hardware from Intel and AMD. There are also several SPARC distributions of illumos; if you are interested in running illumos on SPARC, please refer directly to those distributions' docs. To determine if a specific piece of hardware will work with illumos, please refer to the Hardware Compatability List . For pre-defined builds of server-grade hardware, you may also refer to Joyent Engineering Manufactoring database .","title":"Supported hardware platforms"},{"location":"about/#illumos-development-model","text":"Please refer to the illumos Developer's Guide , as well as the Building illumos and contribution sections of this documentation.","title":"illumos Development Model"},{"location":"about/#contributing-to-illumos","text":"Please see the community and contribution guides if you'd like to participate in the project.","title":"Contributing to illumos"},{"location":"about/#third-party-software","text":"illumos does not itself ship third party software, or contain software like webservers and so forth. Distributions include their own package management.","title":"Third Party Software"},{"location":"about/announcement/","text":"Project Announcement \u00b6 Introduction \u00b6 On August 3, 2010, Garrett D'Amore announced the illumos project, \"a community effort of some core Solaris engineers to create a truly open source Solaris by swapping closed source bits of OpenSolaris with open implementations.\" In January, 2012, he reflected on Experiences Starting an Open Source Operating System in a talk at SCALE 10x. Garrett's original slides Transcript \u00b6 OK, everybody. Thank you for joining us. My name is Garrett D'Amore. Hopefully everyone is hearing this. We had some technology challenges such as, such as it goes in our industry, and I apologise for the late start but here we are anyway. So Illumos. First off I do want to point out before we get started, that there is a Q & A window in the Go2 webinar screen and Anil who is helping me out here, is monitoring that. You can ask questions there and he will forward them to me. We also have a backchannel on IRC if you go to irc.freenode.net and the back channel is #illumos. I-L-L-U-M-O-S, and Anil's monitoring that as well, and he'll let me know if there's pertinent questions I should address. I will try to address those questions at the end, however. [Slide 1, 1:06] So, without further adieu, let's go ahead and continue. So, thanks for joining us. I think that the topic there on the first page slide, hopefully everybody sees it. By the way if you aren't able to see the slides now, we will be posting them up, excuse me Anil have you already posted those? Ok, so Anil with post them momentarily. So, hopefully you can get them, and they'll be on the website at www.illumos.org. Just looking at that font on the slide, and realize the \"I\" really doesn't stand out vary differently from the \"L.\" I apologize for that, it's I-L-L. And our topic is \"Hope and Light Springs Anew.\" So, the name... well first off I hope everyone understands that this presentation is targeted towards the OpenSolaris audience so I didn't really go into a lot of background there. It will become clear as we go on. If you are here asking about Windows or something else you're probably in the wrong conference call. [Slide 2, 2:19] So what's in a name? First \"Illum\" from Latin for \"Light\" and \"OS\" for \"Operating System.\" However even though I printed it out this way on the slide, now we've been spelling it all one word with any unusual spellings, so I-L-L-U-M-O-S, with only the \"I\" capitalized. [Slide 3, 2:41] So, actually what is this project about? Well the first thing is that the project is designed here to solve a key problem, and that is that not all of OpenSolaris is really open source. And there's a lot of other potential concerns in the community, but this one is really kind of a core one, and from solving this, I think a lot of other issues can be solved. So the critical components of OpenSolaris. Well, first off I guess I should say that most of the important parts of OpenSolaris are, for booting at least and for building a foundation block for the OS/Net consolidation, out of that consolidation it's nearly completely open source, except for a few pieces. One of the most striking pieces is this part called \"libc-i18n,\" which is a component you need to build a working C library. It's a substantial percentage of libc is tied up in that libc-i18n, in some cases because it's i18n code, in other cases because of dependencies and well dependencies is probably the best way to put it. The NFS lock manager, of course, there's the crypto framework, a number of really important drivers. mpt I listed here is a pretty famous one its for a pretty popular series of HBAs from LSI. But there's a lot of other drivers that are closed source, and in fact even some key platform code, although that's for the most port an issue for the SPARC port. Most of the critical platform code for x86 is open, in fact I can't think of anything critical that's closed. This list is by no means exhaustive, but it's a good start. So the problem with the fact that not all of this source is open is that it really does present some big challenges to anyone downstream or who depends on OS/Net or consequently OpenSolaris and of course this involves Nexenta, Belinux, Schillix these are all derivative distributions from the original source from Oracle. And this problem is not new to the industry; some years ago Apple had done the community a great favor by opening a bunch of their code in the form of Darwin. However I think you can Google around for MacOS X and Darwin and see the end result of that. And that is, the end result, I think, that we would all like to avoid. [Slide 4, 5:32] So there's a lot of good stuff, with all the other issues going on with the community that's built up around the code. First off there's technology in the code, zfs, dtrace, crossbow, zones, I think everyone who's familiar with OpenSolaris will recognize this stuff, and if you don't, Google will readily fill you in with lots and lots of detail on all of these technologies, and this is just a brief list of some of the big names. There's a lot of others beyond this. And of course the community behind these technologies is made up of a number of just incredible engineers, I've been fortunate to work with some of the brightest people on the planet, I believe, on Solaris and SunOS code. And we are also backed by an outstanding set of enthusiasts, and our eco-system really is quite vibrant, particularly in light of some of the other challenges it continues to be so vibrant. This I think says a lot. And of course the other thing is that it's not all closed. In fact, the vast majority of the code is indeed open. So the problem of, the problem faced to resolve this is actually quite tractable. [Slide 5, 7:06] Technology issues, there it goes, alright. I apologise. OK. So around this effort. I talked a little about the issue of the code. To elaborate a little bit further, what we've done is taken OS/Net, this consolidation which really makes up the kernel and a bunch of critical system utilities and made a child of it, and this is really a source code management type term but what it means is that it has an ancestry relationship with the upstream which in this case is the code from Oracle, and we track the upstream very closely, and we also have the goal of being 100% compatible with the code from Oracle. I say ABI compatible, what that means is that the idea is that you can take an application that is compiled and runs well on Solaris, and the same exact application compiles and runs on Illumos, so that is an important point. We also, the idea is no closed code. There's a fully open libc, I would want to have a fully open kernel, and fully open drivers. As you'll see we are not all the way there yet but we made really good progress, and continue to work on this. The other idea is that this project then becomes a repository where we can take changes from contributors that for a variety of reasons might be unacceptable to Oracle, and I can detail all those later, maybe in Q & A or maybe separately. There's a lot of potential possibilities here, and as long as we don't really break the idea of ABI compatibility with Solaris and we don't diverge needlessly from the upstream ON consolidation, there's a lot of room for innovation. [Slide 6, 9:19] So the focus of Illumos is really ON right now, OS/Net, that's that core consolidation that I talked about. But one of the ideas is that this also can then ultimately build a community that can act as an umbrella for these other projects, and other pieces, that become interesting, once you solve this critical problem of that core foundation. X11, which is basically the graphical windowing system. The desktop components. The C runtime. Some of the distributions. And there is potentially a lot of ways which people can innovate, and contribute. Which unfortunately, in the current community is quite difficult to do. We hope that we can become a lot more of a facilitator in that kind of development and collaboration. [Slide 7, 10:16] So, around this, we hope to build a community. And, I think we actually have really started one pretty strongly, from the people who have already either agreed to participate or are participating. And this community stands independently from the OpenSolaris community. What that means is that we own our own identity, and we can't be shut down, and we're not slaves to any corporate master. And even though Nexenta is a major sponsor, and I'm very grateful that Nexenta is. They're my employer, and they are funding my time on this. But the identity and the project, is owned by the community. And that means we're governed and run by the community. On that topic, I have a few bullet points there about our resources being distributed, the fact that we're going to basically run this as a Meritocracy, with a light hand on governance, which is one of the areas we think we can improve upon from the previous attempts. [Slide 8, 11:28] So there's a large number of people. I started the project, so I guess I'm the de facto \"leader\". But you know, there's actually quite a - it was a dozen when I wrote this, it's probably grown since then. This project started out with just a few developers, that I wanted have real focus on just getting the code done. Without engaging in a lot of conversation. Even with that small, focused group, it's already still growing. And now, today, as of right this minute, we hope to engage a much much broader audience. A we hope to invite, all of you - actually we do invite all of you. So come join us. In this presentation you'll see there's a website you can join, there's mailing lists you can join. A number of the community leaders, a lot of whom you will be familiar with, if you're already a part of this group. In fact, hang on just a minute. Some of them are on this call. And actually we have a couple who have agreed to speak. I'd like to tie in one. Anil's checking on it for me. Just a minute. [12:48] Simon, we're going to go ahead and un-mute your mic. Are you available to talk? Ok, great. So Simon Phipps is one of the - he didn't start out as an existing core member. But he's agreed to help us out, and as you'll see later, he's agreed to take a role in this, and I'm hoping that Simon has some good things to say. *<Simon Phipps, SP>* Hi Garrett. *<GDA>* Simon Phipps, maybe not the best introduction. *<SP>* I'm very pleased that you're doing this, Garrett. You know I've seen a project like this before, when we started OpenJDK there was some concern, that Sun wasn't going to get around to opening all of the Java code, so some community members got together and formed a project called \"IcedTea\", which was downstream of OpenJDK, but to which people could innovate and could fix the non-free parts of OpenJDK. It was the existence of that project, that made OpenJDK a fully free project, and led to it having the existence beyond the sponsorship that Sun put into it. I'm looking at Illumos at the moment, and I think it's exactly the right step to take. It's good that it's downstream of Oracle. If they choose to use it, it could do a great deal of good to their Solaris products. If they choose not to use it, then it's a great place for the community to assemble, and give a future to Solaris. *<GDA>* Ok. Great. And thanks for your support. That was Simon Phipps. Simon currently sits on the board for the Open Source Initiative. I think that's correct, is that correct, Simon? *<SP>* That's correct. I'm on the board of directors of OSI, the Open Source Initiative. At the moment, while we still have one, I'm a member of the OpenSolaris Governing Board, as well. *<GDA>* Ok. And he also writes for Computer World UK. I'm sure you can find his blog pretty easily. Thank you very much Simon. Let's go ahead and move along. One of the points that's on there, before I switch to the next slide, is that I believe that we actually do already have critical mass to drive this project forward. That's one of the real challenges for a project like this. The codebase, when you look at the size of OS/Net, is quite enormous, but the number of people, and people who are actual do-ers rather than talk-ers, who are involved and interested and engaged, already, is - I'm actually astounded, and thrilled to have such a - frankly an illustrious group of contributors involved. I have great hope. Moving forward. [Slide 9, 15:50] We have quite a few community partners. Of course, Nexenta is one of these, and there's a number of these names that you will recognise, if you're familiar with the OpenSolaris community. Google is great at filling each one of these out. I'm not going to present all of them to you. But I'm really pleased that a former colleague of mine at Oracle, is with us, and he has taken a position as Vice President of Engineering at Joyent. Hopefully he's on the line. His name is Brian Cantrill. He's one of the co-creators of DTrace as I understand it. Can we un-mute his mic? We're having some technical issues here, hopefully we'll get Brian in, in a few minutes. In the meantime, I'm going to go ahead and move on. [Slide 10, 16:52] The 800 pound gorilla. This is the question that is probably on a lot of people's minds. The 800 pound gorilla being that company that bought former owner of the Intellectual Property behind most of OpenSolaris, Oracle. The interactions here, it's really important that we understand what these interactions are, and what they're intended to be. The first of these is that Illumos is not a competitor to Solaris. Neither to OpenSolaris. In fact, I have personally invited Oracle to participate as a peer, although they don't get to own it, we would love to have their participation. To the extent that they are allowed to, per whatever arrangements they have with Oracle, welcome the individual employees of Oracle, to participate here as well. We'd love to have a collaborative and cooperative relationship with Oracle. Just as with any of our other corporate partners. From that slide I just had, you can see a few. That slide, by the way, is by no means complete. I hope that it will not be the end statement, either. But we're not going to depend on them. I'm being told now that Brian is available, so I'm going to go ahead and switch back to Brian. [18:12] *<Bryan Cantrill, BC>* Hey Garrett. This is terrific news. A great development for the OpenSolaris community. Looking back, historically, I think we at Sun (I should say 'they' now I guess) - I think that Sun understood the importance of the right to fork the operating system, but I think we've underestimated the importance of the power to fork the operating system. As you know, as we all know, we never quite made it to 100% of the source. And what that, effectively, forbid - not explicitly, I mean we didn't do it by design - but because there were these encumbrances that didn't allow us to open source elements of the operating system, it effectively did not allow for a fork. A fork is a really important check against an open source project. A fork is what allows people to innovate. A fork is what allows people to not get hung up on governance models. It allows them to express their independence from a project. Whilst people had the right, strictly speaking, they didn't have the power, because it was not all open source. Today is a really critical development. It is giving all of us, in the community, the power to fork the system. Not that we want to actually exercise that power in a way that is divisive, but we need to be able to exercise that power in a way that is innovative. I think that is going to allow many of us - now speaking as Joyent - many of us in the community who depend on the innovations in this system for the value that we bring to our customers, it is going to allow all of us to begin to differentiate ourselves in the marketplace, it's going to allow all of us to be able to really innovate to the operating system, and allows us all to collaborate. I think that, speaking for Joyent, we have modifications to the system that we have not been able to integrate for a variety of reasons. We believe with Illumos - with the Illumos project - that we will be able to begin to integrate some of these modifications. Many of them, of course, are small - bugfixes and so on. But things that for a variety of reasons couldn't be taken further upstream. I, personally, and we, Joyent, are thrilled. This is a tremendous, tremendous development. Garrett, you and your team, are to be commended for some very difficult technical work. To be clear, we are not completely out of the woods yet. We boot. That's good. But we got work ahead of us. Collectively. As a community. To get to a vibrant base, that will allow for innovation. I'm much more confident now, than I have been at any time in the last five years, that we're going to get there as a community. So, very exciting development, and I think you see the number of people that are on Freenode. A lot of folks are interested in this. I think for us as a community it's a real reboot. We owe our debt of gratitude to Garrett and the Illumos project. [21:44] *<GDA>* Thank you very much, Brian. I'm very, very pleased that you and the rest of the crew at Joyent are going to be able to join us, and collaborate to expand upon the great work that is already part of SunOS base. With that, I'm going to go ahead and switch back, because I want to keep moving ahead. On this one slide, the 800 pound gorilla. So I think that this idea that Brian really hit on, is that we have the power to fork. We are not a fork, but what we do is we represent the ability of the community to do that. That's key. [Slide 11, 22:30] In fact, here's my top slide on that. What if the tap is turned off? What if, the upstream, ceases to be cooperative, or just goes away. For a lot of reasons, I don't think that's going to happen. Even if the community around that code-base were to be abandoned, or shut down - or even change it's character in a way that it might be hard to recognise it, the code-base, I expect personally, for that to remain available. That code that is already available, and for it to continue to be updated, on some level of frequency. But in the event, that it were to go away, we believe that with the developers we have, and especially, the growing ecosystem that already just on day one here, seems to be exploding. I think we have critical mass to continue to sustain it. As I said, I'm thrilled that Joyent, and there is a bunch of other people, are a part of that. Of course, if this happens, then we - by definition - become a fork. We are not a fork today, because of the way we track OS/Net. In my mind, in a classical sense, a fork starts from the starting point, and moves away, and becomes something else. So we're more like a project that - we're going to continue to try to work closely with Oracle. As I think that Brian talked about, really the idea is that Illumos is the insurance that the entire community needs, against this sort of scenario of what happens if the tap is turned off. [Slide 12, 24:14] What are some of the major goals of this project. I think we've already talked about some of these. We want to be a self-hosting SunOS derivative. We're not quite there yet, but we're getting there. We've made good strides. Fully open source, of course. That's kind of, I think, a key thing. I already touched on the 100% ABI compatibility with Solaris. So, for those who are listening in, and aren't familiar with the acronym ABI, that's Application Binary Interface, and really what it means, is that your existing applications work without being recompiled. This next, fourth bullet point, I haven't touched on it today, and it's really key. Probably it deserves a little bit of discussion. That is, that we want the things that we put into Illumos to be usable by Oracle. To be able to be taken back into the upstream code from Oracle. This is part of the - we're not a fork today. Working and collaborate in a collaborative relationship with Oracle. So there's a bunch of other consequences that fall out of this. But the key thing is that the code that integrates into Illumos really should be - it should be reasonable for somebody to integrate that back into the Oracle code base. If whatever political or business goals, that were preventing that, were removed. Of course, we don't want to have any corporate dependencies on the Illumos project. I think I've already talked about this. This last bullet point, the basis for other distributions. For people not familiar with the way OpenSolaris distributions are built today, there is typically this bottom piece, called ON. And there is a bunch of other pieces, that are put together, and then these are all constructed together, to create a full operating system. And there's a number of distributions besides the one that Oracle creates, called OpenSolaris. There's Schillix, there's Belenix, and of course, my favourite, Nexenta. This is just a few of them. There's quite a few others. MilaX, EON, and we haven't talked to all of the people producing these distributions, but at least the ones that we have talked to are already engaged in looking at Illumos as their future base line. So they're participating. I'm going to make a brief note here, there is another individual who is a part of the Illumos developer community, who's also working on a completely open, community driven, version of the distribution, formerly known as Indiana. I'm not going to say anything more about that, because that would be stealing his thunder. Hopefully, you'll hear more from him in the coming days or weeks. [Slide 13, 27:10] A little bit here about how the project is organised. Basically, we're going to have two groups, one group is this notion of administrative council, that basically handles non-technical matters. So resource management. We do have servers, we have mailing lists. There is probably matters of evangelism and marketing and all these others things that happen. We wanted to separate the technical from the non-technical. So the people focused on the code, and getting things done, didn't have to be bothered by the day-to-day running of the details. Likewise, the people running the day-to-day details don't have to be all-star developers. Initially, I'm the chairman. It's a benevolent dictatorship until we come up with some other form of rule that works. The idea is to make this as much as possible, reasonable consensus driven, although there will be a smaller group, that actually runs the administrative council. I have already appointed a few members, that may change. Hopefully they will select some additional members, to fill out their own ranks. The idea is a meritocracy, the people who are actually helping to do things, rather than just people who want to stand up and claim credit. [Slide 14, 28:35] The other half of this is the developer council. I had a little tie-in from a joke here. A community member actually, had a nice tagline here, his name is Matthew, you'll see him on IRC as lewellyn. His line was \"if you have a polarising issue, the first thing you have to work out if it's AC or DC\". Thanks to lewellyn for that little tid-bit. It's, again a benevolent dictatorship, and I'm going to take the role as tech lead on the project. I'll probably keep that lead, longer than I will the leadership in the other side, because I really do view myself as a technical individual. Again, the initial members will be appointed. The idea is that this really made up of the developers who have the ability and - not just the ability - but the right to commit, and a consensus driven meritocracy. My hope is that as tech lead, I help define direction, but I only get involved in arbitration if no other alternative, solution can be arrived at via consensus. [29:55] I'm seeing something on my UI here that says that we may be having network trouble. Can somebody indicate on the IRC channel, am I coming across clearly? Ok. Anil's giving the thumbs up. So I'm going to keep going. Maybe it's not too bad. [Slide 15, 30:10] Rules for integration. This is getting down to the nuts and bolts of how we expect to operate. As I think I already mentioned, again ON here is OS/Net. That's that consolidation from the upstream. We have the same kind of guidelines. You still gotta pass your cstyle, lint, you know, test your code, have it reviewed, so forth. We do have some license restrictions, and really these have a lot to do with this goal of making it easy for Oracle to take our code and re-integrate it back into the upstream. Credits \u00b6 Brian Bienvenu (taemun) A. Hettinger (oninoshiko)","title":"Announcement"},{"location":"about/announcement/#project-announcement","text":"","title":"Project Announcement"},{"location":"about/announcement/#introduction","text":"On August 3, 2010, Garrett D'Amore announced the illumos project, \"a community effort of some core Solaris engineers to create a truly open source Solaris by swapping closed source bits of OpenSolaris with open implementations.\" In January, 2012, he reflected on Experiences Starting an Open Source Operating System in a talk at SCALE 10x. Garrett's original slides","title":"Introduction"},{"location":"about/announcement/#transcript","text":"OK, everybody. Thank you for joining us. My name is Garrett D'Amore. Hopefully everyone is hearing this. We had some technology challenges such as, such as it goes in our industry, and I apologise for the late start but here we are anyway. So Illumos. First off I do want to point out before we get started, that there is a Q & A window in the Go2 webinar screen and Anil who is helping me out here, is monitoring that. You can ask questions there and he will forward them to me. We also have a backchannel on IRC if you go to irc.freenode.net and the back channel is #illumos. I-L-L-U-M-O-S, and Anil's monitoring that as well, and he'll let me know if there's pertinent questions I should address. I will try to address those questions at the end, however. [Slide 1, 1:06] So, without further adieu, let's go ahead and continue. So, thanks for joining us. I think that the topic there on the first page slide, hopefully everybody sees it. By the way if you aren't able to see the slides now, we will be posting them up, excuse me Anil have you already posted those? Ok, so Anil with post them momentarily. So, hopefully you can get them, and they'll be on the website at www.illumos.org. Just looking at that font on the slide, and realize the \"I\" really doesn't stand out vary differently from the \"L.\" I apologize for that, it's I-L-L. And our topic is \"Hope and Light Springs Anew.\" So, the name... well first off I hope everyone understands that this presentation is targeted towards the OpenSolaris audience so I didn't really go into a lot of background there. It will become clear as we go on. If you are here asking about Windows or something else you're probably in the wrong conference call. [Slide 2, 2:19] So what's in a name? First \"Illum\" from Latin for \"Light\" and \"OS\" for \"Operating System.\" However even though I printed it out this way on the slide, now we've been spelling it all one word with any unusual spellings, so I-L-L-U-M-O-S, with only the \"I\" capitalized. [Slide 3, 2:41] So, actually what is this project about? Well the first thing is that the project is designed here to solve a key problem, and that is that not all of OpenSolaris is really open source. And there's a lot of other potential concerns in the community, but this one is really kind of a core one, and from solving this, I think a lot of other issues can be solved. So the critical components of OpenSolaris. Well, first off I guess I should say that most of the important parts of OpenSolaris are, for booting at least and for building a foundation block for the OS/Net consolidation, out of that consolidation it's nearly completely open source, except for a few pieces. One of the most striking pieces is this part called \"libc-i18n,\" which is a component you need to build a working C library. It's a substantial percentage of libc is tied up in that libc-i18n, in some cases because it's i18n code, in other cases because of dependencies and well dependencies is probably the best way to put it. The NFS lock manager, of course, there's the crypto framework, a number of really important drivers. mpt I listed here is a pretty famous one its for a pretty popular series of HBAs from LSI. But there's a lot of other drivers that are closed source, and in fact even some key platform code, although that's for the most port an issue for the SPARC port. Most of the critical platform code for x86 is open, in fact I can't think of anything critical that's closed. This list is by no means exhaustive, but it's a good start. So the problem with the fact that not all of this source is open is that it really does present some big challenges to anyone downstream or who depends on OS/Net or consequently OpenSolaris and of course this involves Nexenta, Belinux, Schillix these are all derivative distributions from the original source from Oracle. And this problem is not new to the industry; some years ago Apple had done the community a great favor by opening a bunch of their code in the form of Darwin. However I think you can Google around for MacOS X and Darwin and see the end result of that. And that is, the end result, I think, that we would all like to avoid. [Slide 4, 5:32] So there's a lot of good stuff, with all the other issues going on with the community that's built up around the code. First off there's technology in the code, zfs, dtrace, crossbow, zones, I think everyone who's familiar with OpenSolaris will recognize this stuff, and if you don't, Google will readily fill you in with lots and lots of detail on all of these technologies, and this is just a brief list of some of the big names. There's a lot of others beyond this. And of course the community behind these technologies is made up of a number of just incredible engineers, I've been fortunate to work with some of the brightest people on the planet, I believe, on Solaris and SunOS code. And we are also backed by an outstanding set of enthusiasts, and our eco-system really is quite vibrant, particularly in light of some of the other challenges it continues to be so vibrant. This I think says a lot. And of course the other thing is that it's not all closed. In fact, the vast majority of the code is indeed open. So the problem of, the problem faced to resolve this is actually quite tractable. [Slide 5, 7:06] Technology issues, there it goes, alright. I apologise. OK. So around this effort. I talked a little about the issue of the code. To elaborate a little bit further, what we've done is taken OS/Net, this consolidation which really makes up the kernel and a bunch of critical system utilities and made a child of it, and this is really a source code management type term but what it means is that it has an ancestry relationship with the upstream which in this case is the code from Oracle, and we track the upstream very closely, and we also have the goal of being 100% compatible with the code from Oracle. I say ABI compatible, what that means is that the idea is that you can take an application that is compiled and runs well on Solaris, and the same exact application compiles and runs on Illumos, so that is an important point. We also, the idea is no closed code. There's a fully open libc, I would want to have a fully open kernel, and fully open drivers. As you'll see we are not all the way there yet but we made really good progress, and continue to work on this. The other idea is that this project then becomes a repository where we can take changes from contributors that for a variety of reasons might be unacceptable to Oracle, and I can detail all those later, maybe in Q & A or maybe separately. There's a lot of potential possibilities here, and as long as we don't really break the idea of ABI compatibility with Solaris and we don't diverge needlessly from the upstream ON consolidation, there's a lot of room for innovation. [Slide 6, 9:19] So the focus of Illumos is really ON right now, OS/Net, that's that core consolidation that I talked about. But one of the ideas is that this also can then ultimately build a community that can act as an umbrella for these other projects, and other pieces, that become interesting, once you solve this critical problem of that core foundation. X11, which is basically the graphical windowing system. The desktop components. The C runtime. Some of the distributions. And there is potentially a lot of ways which people can innovate, and contribute. Which unfortunately, in the current community is quite difficult to do. We hope that we can become a lot more of a facilitator in that kind of development and collaboration. [Slide 7, 10:16] So, around this, we hope to build a community. And, I think we actually have really started one pretty strongly, from the people who have already either agreed to participate or are participating. And this community stands independently from the OpenSolaris community. What that means is that we own our own identity, and we can't be shut down, and we're not slaves to any corporate master. And even though Nexenta is a major sponsor, and I'm very grateful that Nexenta is. They're my employer, and they are funding my time on this. But the identity and the project, is owned by the community. And that means we're governed and run by the community. On that topic, I have a few bullet points there about our resources being distributed, the fact that we're going to basically run this as a Meritocracy, with a light hand on governance, which is one of the areas we think we can improve upon from the previous attempts. [Slide 8, 11:28] So there's a large number of people. I started the project, so I guess I'm the de facto \"leader\". But you know, there's actually quite a - it was a dozen when I wrote this, it's probably grown since then. This project started out with just a few developers, that I wanted have real focus on just getting the code done. Without engaging in a lot of conversation. Even with that small, focused group, it's already still growing. And now, today, as of right this minute, we hope to engage a much much broader audience. A we hope to invite, all of you - actually we do invite all of you. So come join us. In this presentation you'll see there's a website you can join, there's mailing lists you can join. A number of the community leaders, a lot of whom you will be familiar with, if you're already a part of this group. In fact, hang on just a minute. Some of them are on this call. And actually we have a couple who have agreed to speak. I'd like to tie in one. Anil's checking on it for me. Just a minute. [12:48] Simon, we're going to go ahead and un-mute your mic. Are you available to talk? Ok, great. So Simon Phipps is one of the - he didn't start out as an existing core member. But he's agreed to help us out, and as you'll see later, he's agreed to take a role in this, and I'm hoping that Simon has some good things to say. *<Simon Phipps, SP>* Hi Garrett. *<GDA>* Simon Phipps, maybe not the best introduction. *<SP>* I'm very pleased that you're doing this, Garrett. You know I've seen a project like this before, when we started OpenJDK there was some concern, that Sun wasn't going to get around to opening all of the Java code, so some community members got together and formed a project called \"IcedTea\", which was downstream of OpenJDK, but to which people could innovate and could fix the non-free parts of OpenJDK. It was the existence of that project, that made OpenJDK a fully free project, and led to it having the existence beyond the sponsorship that Sun put into it. I'm looking at Illumos at the moment, and I think it's exactly the right step to take. It's good that it's downstream of Oracle. If they choose to use it, it could do a great deal of good to their Solaris products. If they choose not to use it, then it's a great place for the community to assemble, and give a future to Solaris. *<GDA>* Ok. Great. And thanks for your support. That was Simon Phipps. Simon currently sits on the board for the Open Source Initiative. I think that's correct, is that correct, Simon? *<SP>* That's correct. I'm on the board of directors of OSI, the Open Source Initiative. At the moment, while we still have one, I'm a member of the OpenSolaris Governing Board, as well. *<GDA>* Ok. And he also writes for Computer World UK. I'm sure you can find his blog pretty easily. Thank you very much Simon. Let's go ahead and move along. One of the points that's on there, before I switch to the next slide, is that I believe that we actually do already have critical mass to drive this project forward. That's one of the real challenges for a project like this. The codebase, when you look at the size of OS/Net, is quite enormous, but the number of people, and people who are actual do-ers rather than talk-ers, who are involved and interested and engaged, already, is - I'm actually astounded, and thrilled to have such a - frankly an illustrious group of contributors involved. I have great hope. Moving forward. [Slide 9, 15:50] We have quite a few community partners. Of course, Nexenta is one of these, and there's a number of these names that you will recognise, if you're familiar with the OpenSolaris community. Google is great at filling each one of these out. I'm not going to present all of them to you. But I'm really pleased that a former colleague of mine at Oracle, is with us, and he has taken a position as Vice President of Engineering at Joyent. Hopefully he's on the line. His name is Brian Cantrill. He's one of the co-creators of DTrace as I understand it. Can we un-mute his mic? We're having some technical issues here, hopefully we'll get Brian in, in a few minutes. In the meantime, I'm going to go ahead and move on. [Slide 10, 16:52] The 800 pound gorilla. This is the question that is probably on a lot of people's minds. The 800 pound gorilla being that company that bought former owner of the Intellectual Property behind most of OpenSolaris, Oracle. The interactions here, it's really important that we understand what these interactions are, and what they're intended to be. The first of these is that Illumos is not a competitor to Solaris. Neither to OpenSolaris. In fact, I have personally invited Oracle to participate as a peer, although they don't get to own it, we would love to have their participation. To the extent that they are allowed to, per whatever arrangements they have with Oracle, welcome the individual employees of Oracle, to participate here as well. We'd love to have a collaborative and cooperative relationship with Oracle. Just as with any of our other corporate partners. From that slide I just had, you can see a few. That slide, by the way, is by no means complete. I hope that it will not be the end statement, either. But we're not going to depend on them. I'm being told now that Brian is available, so I'm going to go ahead and switch back to Brian. [18:12] *<Bryan Cantrill, BC>* Hey Garrett. This is terrific news. A great development for the OpenSolaris community. Looking back, historically, I think we at Sun (I should say 'they' now I guess) - I think that Sun understood the importance of the right to fork the operating system, but I think we've underestimated the importance of the power to fork the operating system. As you know, as we all know, we never quite made it to 100% of the source. And what that, effectively, forbid - not explicitly, I mean we didn't do it by design - but because there were these encumbrances that didn't allow us to open source elements of the operating system, it effectively did not allow for a fork. A fork is a really important check against an open source project. A fork is what allows people to innovate. A fork is what allows people to not get hung up on governance models. It allows them to express their independence from a project. Whilst people had the right, strictly speaking, they didn't have the power, because it was not all open source. Today is a really critical development. It is giving all of us, in the community, the power to fork the system. Not that we want to actually exercise that power in a way that is divisive, but we need to be able to exercise that power in a way that is innovative. I think that is going to allow many of us - now speaking as Joyent - many of us in the community who depend on the innovations in this system for the value that we bring to our customers, it is going to allow all of us to begin to differentiate ourselves in the marketplace, it's going to allow all of us to be able to really innovate to the operating system, and allows us all to collaborate. I think that, speaking for Joyent, we have modifications to the system that we have not been able to integrate for a variety of reasons. We believe with Illumos - with the Illumos project - that we will be able to begin to integrate some of these modifications. Many of them, of course, are small - bugfixes and so on. But things that for a variety of reasons couldn't be taken further upstream. I, personally, and we, Joyent, are thrilled. This is a tremendous, tremendous development. Garrett, you and your team, are to be commended for some very difficult technical work. To be clear, we are not completely out of the woods yet. We boot. That's good. But we got work ahead of us. Collectively. As a community. To get to a vibrant base, that will allow for innovation. I'm much more confident now, than I have been at any time in the last five years, that we're going to get there as a community. So, very exciting development, and I think you see the number of people that are on Freenode. A lot of folks are interested in this. I think for us as a community it's a real reboot. We owe our debt of gratitude to Garrett and the Illumos project. [21:44] *<GDA>* Thank you very much, Brian. I'm very, very pleased that you and the rest of the crew at Joyent are going to be able to join us, and collaborate to expand upon the great work that is already part of SunOS base. With that, I'm going to go ahead and switch back, because I want to keep moving ahead. On this one slide, the 800 pound gorilla. So I think that this idea that Brian really hit on, is that we have the power to fork. We are not a fork, but what we do is we represent the ability of the community to do that. That's key. [Slide 11, 22:30] In fact, here's my top slide on that. What if the tap is turned off? What if, the upstream, ceases to be cooperative, or just goes away. For a lot of reasons, I don't think that's going to happen. Even if the community around that code-base were to be abandoned, or shut down - or even change it's character in a way that it might be hard to recognise it, the code-base, I expect personally, for that to remain available. That code that is already available, and for it to continue to be updated, on some level of frequency. But in the event, that it were to go away, we believe that with the developers we have, and especially, the growing ecosystem that already just on day one here, seems to be exploding. I think we have critical mass to continue to sustain it. As I said, I'm thrilled that Joyent, and there is a bunch of other people, are a part of that. Of course, if this happens, then we - by definition - become a fork. We are not a fork today, because of the way we track OS/Net. In my mind, in a classical sense, a fork starts from the starting point, and moves away, and becomes something else. So we're more like a project that - we're going to continue to try to work closely with Oracle. As I think that Brian talked about, really the idea is that Illumos is the insurance that the entire community needs, against this sort of scenario of what happens if the tap is turned off. [Slide 12, 24:14] What are some of the major goals of this project. I think we've already talked about some of these. We want to be a self-hosting SunOS derivative. We're not quite there yet, but we're getting there. We've made good strides. Fully open source, of course. That's kind of, I think, a key thing. I already touched on the 100% ABI compatibility with Solaris. So, for those who are listening in, and aren't familiar with the acronym ABI, that's Application Binary Interface, and really what it means, is that your existing applications work without being recompiled. This next, fourth bullet point, I haven't touched on it today, and it's really key. Probably it deserves a little bit of discussion. That is, that we want the things that we put into Illumos to be usable by Oracle. To be able to be taken back into the upstream code from Oracle. This is part of the - we're not a fork today. Working and collaborate in a collaborative relationship with Oracle. So there's a bunch of other consequences that fall out of this. But the key thing is that the code that integrates into Illumos really should be - it should be reasonable for somebody to integrate that back into the Oracle code base. If whatever political or business goals, that were preventing that, were removed. Of course, we don't want to have any corporate dependencies on the Illumos project. I think I've already talked about this. This last bullet point, the basis for other distributions. For people not familiar with the way OpenSolaris distributions are built today, there is typically this bottom piece, called ON. And there is a bunch of other pieces, that are put together, and then these are all constructed together, to create a full operating system. And there's a number of distributions besides the one that Oracle creates, called OpenSolaris. There's Schillix, there's Belenix, and of course, my favourite, Nexenta. This is just a few of them. There's quite a few others. MilaX, EON, and we haven't talked to all of the people producing these distributions, but at least the ones that we have talked to are already engaged in looking at Illumos as their future base line. So they're participating. I'm going to make a brief note here, there is another individual who is a part of the Illumos developer community, who's also working on a completely open, community driven, version of the distribution, formerly known as Indiana. I'm not going to say anything more about that, because that would be stealing his thunder. Hopefully, you'll hear more from him in the coming days or weeks. [Slide 13, 27:10] A little bit here about how the project is organised. Basically, we're going to have two groups, one group is this notion of administrative council, that basically handles non-technical matters. So resource management. We do have servers, we have mailing lists. There is probably matters of evangelism and marketing and all these others things that happen. We wanted to separate the technical from the non-technical. So the people focused on the code, and getting things done, didn't have to be bothered by the day-to-day running of the details. Likewise, the people running the day-to-day details don't have to be all-star developers. Initially, I'm the chairman. It's a benevolent dictatorship until we come up with some other form of rule that works. The idea is to make this as much as possible, reasonable consensus driven, although there will be a smaller group, that actually runs the administrative council. I have already appointed a few members, that may change. Hopefully they will select some additional members, to fill out their own ranks. The idea is a meritocracy, the people who are actually helping to do things, rather than just people who want to stand up and claim credit. [Slide 14, 28:35] The other half of this is the developer council. I had a little tie-in from a joke here. A community member actually, had a nice tagline here, his name is Matthew, you'll see him on IRC as lewellyn. His line was \"if you have a polarising issue, the first thing you have to work out if it's AC or DC\". Thanks to lewellyn for that little tid-bit. It's, again a benevolent dictatorship, and I'm going to take the role as tech lead on the project. I'll probably keep that lead, longer than I will the leadership in the other side, because I really do view myself as a technical individual. Again, the initial members will be appointed. The idea is that this really made up of the developers who have the ability and - not just the ability - but the right to commit, and a consensus driven meritocracy. My hope is that as tech lead, I help define direction, but I only get involved in arbitration if no other alternative, solution can be arrived at via consensus. [29:55] I'm seeing something on my UI here that says that we may be having network trouble. Can somebody indicate on the IRC channel, am I coming across clearly? Ok. Anil's giving the thumbs up. So I'm going to keep going. Maybe it's not too bad. [Slide 15, 30:10] Rules for integration. This is getting down to the nuts and bolts of how we expect to operate. As I think I already mentioned, again ON here is OS/Net. That's that consolidation from the upstream. We have the same kind of guidelines. You still gotta pass your cstyle, lint, you know, test your code, have it reviewed, so forth. We do have some license restrictions, and really these have a lot to do with this goal of making it easy for Oracle to take our code and re-integrate it back into the upstream.","title":"Transcript"},{"location":"about/announcement/#credits","text":"Brian Bienvenu (taemun) A. Hettinger (oninoshiko)","title":"Credits"},{"location":"about/distro/","text":"illumos Distributions \u00b6 Introduction \u00b6 Similar to other operating systems, there are many different OS distributions based on the common illumos ecosystem. Some distributions are maintained by enthusiasts, while others are primarily developed by companies with their own priorities and focus. Comparison \u00b6 All illumos-derived systems should include our common technologies . Not all distributions have the latest features, or run on both x86 and SPARC. For major feature differences, the following chart may be helpful. Project Provider Focus Linux Comparison Open Source Packaging x86 SPARC KVM LX OmniOS CE OmniOS Community Association Servers Debian check IPS check check check OpenIndiana OpenIndiana Workstation, Servers Ubuntu check IPS check check SmartOS Joyent Hypervisor CoreOS check pkgsrc check check check NexenStor Nexenta Storage APT check Tribblix Peter Tribble Workstation, Servers Slackware check SVR4 check check check DilOS igork Workstation, Servers check APT check check check check XStreamOS Sonicle Server check v9os MilaX Server check IPS check","title":"Distributions"},{"location":"about/distro/#illumos-distributions","text":"","title":"illumos Distributions"},{"location":"about/distro/#introduction","text":"Similar to other operating systems, there are many different OS distributions based on the common illumos ecosystem. Some distributions are maintained by enthusiasts, while others are primarily developed by companies with their own priorities and focus.","title":"Introduction"},{"location":"about/distro/#comparison","text":"All illumos-derived systems should include our common technologies . Not all distributions have the latest features, or run on both x86 and SPARC. For major feature differences, the following chart may be helpful. Project Provider Focus Linux Comparison Open Source Packaging x86 SPARC KVM LX OmniOS CE OmniOS Community Association Servers Debian check IPS check check check OpenIndiana OpenIndiana Workstation, Servers Ubuntu check IPS check check SmartOS Joyent Hypervisor CoreOS check pkgsrc check check check NexenStor Nexenta Storage APT check Tribblix Peter Tribble Workstation, Servers Slackware check SVR4 check check check DilOS igork Workstation, Servers check APT check check check check XStreamOS Sonicle Server check v9os MilaX Server check IPS check","title":"Comparison"},{"location":"about/faq/","text":"Quick Links \u00b6 Manual pages Mailing lists Bug reporting What is the objective of the illumos project? \u00b6 illumos is a fully open community project to develop a reliable and scalable operating system. It began as a fork of the former OpenSolaris operating system. Our goal is to foster open development of technologies for the 21 st century while building on a twenty-year heritage, but free from the oversight of a single corporate entity and the resulting challenges thereof. While our code base has a long history and many engineering traditions attached to it, our development processes are being reinvented in an attempt to remove barriers while maintaining consistently high code quality. How do I download the software? \u00b6 The source code developed by the project is a fork of the Sun/Oracle code base referred to as \"OS/Net\" or \"ON\" (short for Operating System/Networking). It is the home of the technologies that previously defined OpenSolaris and Solaris, such as the kernel, network stack, filesystems, and device drivers, and all of the basic userland libraries and applications. The illumos code base forms the foundation of distributions . To use the operating system, just download and install one of the distributions. To download the source code, review Building illumos . You can also browse on GitHub or search on OpenGrok . Is illumos free software (open source)? \u00b6 The bulk of the illumos source code is available under the Common Development and Distribution License (CDDL) , an OSI-approved free software license based on the Mozilla Public License (MPL). There are some components with other licenses including BSD and MIT. We also include some software with the GNU General Public License (GPL) or the Lesser/Library General Public License (LGPL). There still remain some binary-only, closed source components that we inherited from Oracle which we are working to replace. Unlike OpenSolaris, we do not require a closed source compiler. Is illumos a community project? \u00b6 Yes! Multiple community groups and interests (including people like you!) are stakeholders in the project, and anyone and everyone is welcome to contribute . illumos was initiated by then-employees of Nexenta in collaboration with former OpenSolaris community members and volunteers. While companies including Nexenta, Joyent, and Delphix sponsor some of the work in illumos, the project is independent of their business decisions. illumos exists as a common base for multiple commercial and community distributions. How do I start contributing? \u00b6 illumos thrives on the efforts of its contributors. Have a look at the guide on How To Contribute if you want to submit code. If you want to help in other ways then have a look at the Mailing Lists . Most of the developers can be found on IRC and you're invited to drop in and say \"hi!\" How do I build illumos? \u00b6 See Building illumos . How do I build a distribution based on illumos? \u00b6 OpenSolaris was historically difficult to build as a distribution because it was assembled by many separate teams at Sun. The illumos community distributions are working to make this easier. Some distributions have documented their build processes. Is illumos compatible with Solaris/OpenSolaris? \u00b6 illumos is very likely to be compatible with Solaris/OpenSolaris binaries and drivers before Oracle closed the gate in 2010. After that, all bets are off. Solaris 10 update 11, and Solaris 11, and beyond, may contain incompatible changes. What changes does illumos maintain? \u00b6 Open internationalization libraries and data files. Open replacements for closed binaries. Code that Oracle may choose to no longer maintain. Community enhancements to critical technologies like DTrace and ZFS. New open technologies. Patches/bug-fixes we have independently developed, including security fixes. Changes to ease community development. ...and more! Do you track Oracle changes? \u00b6 We originally intended to closely follow upstream changes, but became a fork by necessity because Oracle's software is no longer open source. We now represent the open future of the code base after Sun. Will you work on sending illumos changes upstream? \u00b6 We would like Oracle to use changes from illumos, as long as they are willing to abide by the open source license for our code. Where we use code from other free software projects, we also respect their licenses and keep the source open. Why did you announce the project after it was set up and much of the code written? \u00b6 This decision was made for multiple reasons. The signal to noise ratio in the OpenSolaris community had grown low, and announcing the project would have distracted the developers from actual code and contribution. Most vocal members talked about opening the code rather than writing it. illumos chose the opposite. Before the formal announcement, we reached out to developers in the community and solicited their help and participation. And the name illumos? \u00b6 We started off with the codename \"FreeON\", and later realized it is used by an existing project. We finally settled on illumos, after many hours of suggestions and counter-suggestions. illumos (pronounced i-llu-MOS and written in lowercase) ties in with Sun and light. It's the closest to ON we could get!","title":"FAQ"},{"location":"about/faq/#quick-links","text":"Manual pages Mailing lists Bug reporting","title":"Quick Links"},{"location":"about/faq/#what-is-the-objective-of-the-illumos-project","text":"illumos is a fully open community project to develop a reliable and scalable operating system. It began as a fork of the former OpenSolaris operating system. Our goal is to foster open development of technologies for the 21 st century while building on a twenty-year heritage, but free from the oversight of a single corporate entity and the resulting challenges thereof. While our code base has a long history and many engineering traditions attached to it, our development processes are being reinvented in an attempt to remove barriers while maintaining consistently high code quality.","title":"What is the objective of the illumos project?"},{"location":"about/faq/#how-do-i-download-the-software","text":"The source code developed by the project is a fork of the Sun/Oracle code base referred to as \"OS/Net\" or \"ON\" (short for Operating System/Networking). It is the home of the technologies that previously defined OpenSolaris and Solaris, such as the kernel, network stack, filesystems, and device drivers, and all of the basic userland libraries and applications. The illumos code base forms the foundation of distributions . To use the operating system, just download and install one of the distributions. To download the source code, review Building illumos . You can also browse on GitHub or search on OpenGrok .","title":"How do I download the software?"},{"location":"about/faq/#is-illumos-free-software-open-source","text":"The bulk of the illumos source code is available under the Common Development and Distribution License (CDDL) , an OSI-approved free software license based on the Mozilla Public License (MPL). There are some components with other licenses including BSD and MIT. We also include some software with the GNU General Public License (GPL) or the Lesser/Library General Public License (LGPL). There still remain some binary-only, closed source components that we inherited from Oracle which we are working to replace. Unlike OpenSolaris, we do not require a closed source compiler.","title":"Is illumos free software (open source)?"},{"location":"about/faq/#is-illumos-a-community-project","text":"Yes! Multiple community groups and interests (including people like you!) are stakeholders in the project, and anyone and everyone is welcome to contribute . illumos was initiated by then-employees of Nexenta in collaboration with former OpenSolaris community members and volunteers. While companies including Nexenta, Joyent, and Delphix sponsor some of the work in illumos, the project is independent of their business decisions. illumos exists as a common base for multiple commercial and community distributions.","title":"Is illumos a community project?"},{"location":"about/faq/#how-do-i-start-contributing","text":"illumos thrives on the efforts of its contributors. Have a look at the guide on How To Contribute if you want to submit code. If you want to help in other ways then have a look at the Mailing Lists . Most of the developers can be found on IRC and you're invited to drop in and say \"hi!\"","title":"How do I start contributing?"},{"location":"about/faq/#how-do-i-build-illumos","text":"See Building illumos .","title":"How do I build illumos?"},{"location":"about/faq/#how-do-i-build-a-distribution-based-on-illumos","text":"OpenSolaris was historically difficult to build as a distribution because it was assembled by many separate teams at Sun. The illumos community distributions are working to make this easier. Some distributions have documented their build processes.","title":"How do I build a distribution based on illumos?"},{"location":"about/faq/#is-illumos-compatible-with-solarisopensolaris","text":"illumos is very likely to be compatible with Solaris/OpenSolaris binaries and drivers before Oracle closed the gate in 2010. After that, all bets are off. Solaris 10 update 11, and Solaris 11, and beyond, may contain incompatible changes.","title":"Is illumos compatible with Solaris/OpenSolaris?"},{"location":"about/faq/#what-changes-does-illumos-maintain","text":"Open internationalization libraries and data files. Open replacements for closed binaries. Code that Oracle may choose to no longer maintain. Community enhancements to critical technologies like DTrace and ZFS. New open technologies. Patches/bug-fixes we have independently developed, including security fixes. Changes to ease community development. ...and more!","title":"What changes does illumos maintain?"},{"location":"about/faq/#do-you-track-oracle-changes","text":"We originally intended to closely follow upstream changes, but became a fork by necessity because Oracle's software is no longer open source. We now represent the open future of the code base after Sun.","title":"Do you track Oracle changes?"},{"location":"about/faq/#will-you-work-on-sending-illumos-changes-upstream","text":"We would like Oracle to use changes from illumos, as long as they are willing to abide by the open source license for our code. Where we use code from other free software projects, we also respect their licenses and keep the source open.","title":"Will you work on sending illumos changes upstream?"},{"location":"about/faq/#why-did-you-announce-the-project-after-it-was-set-up-and-much-of-the-code-written","text":"This decision was made for multiple reasons. The signal to noise ratio in the OpenSolaris community had grown low, and announcing the project would have distracted the developers from actual code and contribution. Most vocal members talked about opening the code rather than writing it. illumos chose the opposite. Before the formal announcement, we reached out to developers in the community and solicited their help and participation.","title":"Why did you announce the project after it was set up and much of the code written?"},{"location":"about/faq/#and-the-name-illumos","text":"We started off with the codename \"FreeON\", and later realized it is used by an existing project. We finally settled on illumos, after many hours of suggestions and counter-suggestions. illumos (pronounced i-llu-MOS and written in lowercase) ties in with Sun and light. It's the closest to ON we could get!","title":"And the name illumos?"},{"location":"about/features/","text":"Introduction \u00b6 illumos provides a number of advanced features for downstream distributions and users to utilize. OpenZFS \u00b6 The illumos project is part of the community of operating system projects that ships OpenZFS . ZFS provides excellent data integrity, performance, flexibility and ease-of-use you simply can't find in other file systems. ZFS combines traditional concepts like volume management, and file systems with a pooled storage that does for disks what virtual memory did for RAM. ZFS was developed at Sun Microsystems in the early 2000s and released as open source in 2005 as part of the OpenSolaris project. OpenZFS was announced in 2013. For a more detailed history, please see OpenZFS History . ZFS allows you to: Group devices into a single storage pool with various redundancy characteristics Create tiered storage with log and cache devices Create read-only atomic file system snapshots Create writable clones of snapshots Send snapshots as a byte stream -- which you can redirect to a file, or send across the network! Dynamically modify dataset (file system) attributes Delegate dataset management to non-root users or groups ZFS includes online checksumming of every block, on-demand scrubbing of disks, and -- in redundant configurations -- self-healing of bad data with good. ZFS has been ported to Linux , FreeBSD , OS X -- and a Windows port is in progress as of late 2017! Virtualization \u00b6 illumos includes a number of virtualization technologies, including: Zones, a light weight operating system-level virtualization; analogous to \"jails\" or \"containers\" as provided by other systems Hardware virtualization Native Zones \u00b6 Native zones provide an isolated illumos environment to run your applications in, like having a virtual machine without the hypervisor overhead. LX (Linux Emulation) \u00b6 LX-branded zones provide the Linux system call interface, allowing you to run most Linux application binaries without recompiling them for illumos. This facility is available in several illumos distributions, including SmartOS and OmniOS. KVM \u00b6 KVM and QEMU were ported to illumos in 2011, and can be used on Intel CPUs with VMX and EPT support. bhyve \u00b6 Joyent is in the process of porting the bhyve hypervisor from FreeBSD to illumos. The port is available in at least the SmartOS and OmniOS distributions. Introspection and Debugging \u00b6 DTrace \u00b6 DTrace allows for system-wide tracing of a kernel for debugging applications and the operating system, as well as gathering profiling data. DTrace along with MDB allows you to leverage CTF data to inspect userland and kernel structures. Modular Debugger (MDB) \u00b6 MDB, the illumos modular debugger, allows you to inspect running processes, core files, kernel state, and kernel crash dumps. KMDB also allows controlling the execution of a running kernel. Service Management Facility (SMF) \u00b6 SMF helps administrators manage services running on the system. SMF can take care of tracking service dependencies, supervising and restarting processes, disabling perpetually crashing applications, and more. Firewall \u00b6 illumos uses ipfilter for firewalling. Using ipfilter you can create firewalls not just for the host system, but also for zones and hardware virtualized systems. Virtual Networking \u00b6 dladm(1M) allows users to create Virtual NICs, bridges, and in some distributions overlay networks .","title":"Features"},{"location":"about/features/#introduction","text":"illumos provides a number of advanced features for downstream distributions and users to utilize.","title":"Introduction"},{"location":"about/features/#openzfs","text":"The illumos project is part of the community of operating system projects that ships OpenZFS . ZFS provides excellent data integrity, performance, flexibility and ease-of-use you simply can't find in other file systems. ZFS combines traditional concepts like volume management, and file systems with a pooled storage that does for disks what virtual memory did for RAM. ZFS was developed at Sun Microsystems in the early 2000s and released as open source in 2005 as part of the OpenSolaris project. OpenZFS was announced in 2013. For a more detailed history, please see OpenZFS History . ZFS allows you to: Group devices into a single storage pool with various redundancy characteristics Create tiered storage with log and cache devices Create read-only atomic file system snapshots Create writable clones of snapshots Send snapshots as a byte stream -- which you can redirect to a file, or send across the network! Dynamically modify dataset (file system) attributes Delegate dataset management to non-root users or groups ZFS includes online checksumming of every block, on-demand scrubbing of disks, and -- in redundant configurations -- self-healing of bad data with good. ZFS has been ported to Linux , FreeBSD , OS X -- and a Windows port is in progress as of late 2017!","title":"OpenZFS"},{"location":"about/features/#virtualization","text":"illumos includes a number of virtualization technologies, including: Zones, a light weight operating system-level virtualization; analogous to \"jails\" or \"containers\" as provided by other systems Hardware virtualization","title":"Virtualization"},{"location":"about/features/#native-zones","text":"Native zones provide an isolated illumos environment to run your applications in, like having a virtual machine without the hypervisor overhead.","title":"Native Zones"},{"location":"about/features/#lx-linux-emulation","text":"LX-branded zones provide the Linux system call interface, allowing you to run most Linux application binaries without recompiling them for illumos. This facility is available in several illumos distributions, including SmartOS and OmniOS.","title":"LX (Linux Emulation)"},{"location":"about/features/#kvm","text":"KVM and QEMU were ported to illumos in 2011, and can be used on Intel CPUs with VMX and EPT support.","title":"KVM"},{"location":"about/features/#bhyve","text":"Joyent is in the process of porting the bhyve hypervisor from FreeBSD to illumos. The port is available in at least the SmartOS and OmniOS distributions.","title":"bhyve"},{"location":"about/features/#introspection-and-debugging","text":"","title":"Introspection and Debugging"},{"location":"about/features/#dtrace","text":"DTrace allows for system-wide tracing of a kernel for debugging applications and the operating system, as well as gathering profiling data. DTrace along with MDB allows you to leverage CTF data to inspect userland and kernel structures.","title":"DTrace"},{"location":"about/features/#modular-debugger-mdb","text":"MDB, the illumos modular debugger, allows you to inspect running processes, core files, kernel state, and kernel crash dumps. KMDB also allows controlling the execution of a running kernel.","title":"Modular Debugger (MDB)"},{"location":"about/features/#service-management-facility-smf","text":"SMF helps administrators manage services running on the system. SMF can take care of tracking service dependencies, supervising and restarting processes, disabling perpetually crashing applications, and more.","title":"Service Management Facility (SMF)"},{"location":"about/features/#firewall","text":"illumos uses ipfilter for firewalling. Using ipfilter you can create firewalls not just for the host system, but also for zones and hardware virtualized systems.","title":"Firewall"},{"location":"about/features/#virtual-networking","text":"dladm(1M) allows users to create Virtual NICs, bridges, and in some distributions overlay networks .","title":"Virtual Networking"},{"location":"about/history/","text":"A Brief History of Everything^WUNIX \u00b6 In the Second Age of Computing, the UNIX operating system emerged, in pieces, from the minds of Ken Thompson, Dennis Ritchie, Doug McIllroy and bright sparks from AT&Ts Bell Labs. From there, the river diverges almost as much as our metaphors. However, the forks we care about start with BSD and System V UNIX R4, which begat SunOS and Solaris. Other documents detail this history in greater depth (and to a large degree they do not necessarily concern us.) In 2005 Sun Microsystems released Solaris 10 which contains several truly innovative features we continue to rely on to this day. Just as importantly, however, Sun also open-sourced the operating system as OpenSolaris. While there were a few governance missteps along the way, it was a bold move. If you're interested in the history of OpenSolaris, Jim Grisanzio has written an in-depth piece on it . In 2010 Oracle acquired Sun, and silently closed the gate . The source code was no longer updated, communications to the open source community stopped. OpenSolaris was effectively dead. From this, however, project founder Garrett D'Amore took the last drop of the gate and announced illumos in mid-2010. For a longer, more flavorful description of Solaris and illumos history, Bryan Cantrill's Fork Yeah! The Rise and Development of illumos talk from USENIX LISA 2011 should be considered required viewing. (Note: Potentially not suitable for minors.) Since 2010, a number of companies have built their businesses around illumos, or are running on one of the distributions built from it. For a very incomplete list, please see who is using illumos .","title":"Overview"},{"location":"about/history/#a-brief-history-of-everythingwunix","text":"In the Second Age of Computing, the UNIX operating system emerged, in pieces, from the minds of Ken Thompson, Dennis Ritchie, Doug McIllroy and bright sparks from AT&Ts Bell Labs. From there, the river diverges almost as much as our metaphors. However, the forks we care about start with BSD and System V UNIX R4, which begat SunOS and Solaris. Other documents detail this history in greater depth (and to a large degree they do not necessarily concern us.) In 2005 Sun Microsystems released Solaris 10 which contains several truly innovative features we continue to rely on to this day. Just as importantly, however, Sun also open-sourced the operating system as OpenSolaris. While there were a few governance missteps along the way, it was a bold move. If you're interested in the history of OpenSolaris, Jim Grisanzio has written an in-depth piece on it . In 2010 Oracle acquired Sun, and silently closed the gate . The source code was no longer updated, communications to the open source community stopped. OpenSolaris was effectively dead. From this, however, project founder Garrett D'Amore took the last drop of the gate and announced illumos in mid-2010. For a longer, more flavorful description of Solaris and illumos history, Bryan Cantrill's Fork Yeah! The Rise and Development of illumos talk from USENIX LISA 2011 should be considered required viewing. (Note: Potentially not suitable for minors.) Since 2010, a number of companies have built their businesses around illumos, or are running on one of the distributions built from it. For a very incomplete list, please see who is using illumos .","title":"A Brief History of Everything^WUNIX"},{"location":"about/leadership/","text":"Leadership \u00b6 There are two levels of leadership in the illumos project: Members of the Dev Council, and Request To Integrate (RTI) Advocates. Developer Council \u00b6 The Dev Council is a technical steering committee drawn from well-known developers of Solaris, whose role is to make high-level architecture decisions. Member Organization Adam Leventhal Transposit Bryan Cantrill Joyent Garrett D'Amore RackTop Systems Gordon Ross Nexenta Rich Lowe unaffiliated Advocates \u00b6 Advocates are the gatekeepers to the illumos core: they have the ultimate say in what code is accepted, and their primary job is to ensure quality and stability for all illumos users. Advocates are appointed by the illumos Developer Council. Member Handle Organization Expertise Albert Lee trisk SoftNAS Storage, drivers, userland. Chris Siden csiden Delphix ZFS Dan McDonald danmcd Joyent Cryptography, Networking Garrett D'Amore gdamore RackTop Systems Drivers, etc. Gordon Ross gwr Nexenta CIFS/SMB, VFS layer, ZFS ACLs, etc. Hans Rosenfeld Woodstock Joyent Misc. Joshua M. Clulow LeftWing Joyent Misc. Matt Ahrens mahrens Delphix ZFS Rich Lowe richlowe unaffiliated Misc. Robert Mustacchi rmustacc Joyent Virtualization, SMF, PCI, MDB, DTrace, x86 platform, etc. Life as an Advocate \u00b6 Contributors send you patches, build results, test results, check results, review results. If you're happy with all of this, you integrate the change on their behalf. You should have received a diff in hg export or similar format, including a full set of metadata (Reviewed by: lines, authorship, etc.). If you didn't, feel free to ask whoever submitted the patch to submit it in this format, you shouldn't have to go search the list archives for reviewers. Using your judgment \u00b6 The whole reason we have RTI advocates or, if you're not steeped in Sun-ish history, follow a \"pull\" model, is that it provides us with a step in the process where in theory experienced people can exercise their (in theory) better judgment, and everyone can benefit from less breakage. This is 95% of the work involved. Things Advocates Focus On \u00b6 Do you know the areas of the system affected well enough to even have an opinion? If not, you should probably leave this for someone else who might (note that we don't have perfect coverage, so you can't just punt on everything). Is the commit well-formed? The author line should include both a name and a well formed email address, and should match the actual author. The format here is very important for SCM export. Don't just assume it's fine! Is the pbchk output as clean as you want it to be? In general, there should be no noise from any check, however some areas are not clean for the various style checks, you should check this is actually the case (in general, areas that are innately dirty are very dirty, and stand out). Is the user's build clean? Did the user also build with the current shadow compiler? - check the mail_msg file for the compilers that were actually used. Did the submitter test their changes to your satisfaction? Can you think of anything else that should be tested? Ask for it! Did the testing actually test the area changed by the patch? Check! Read the diff. Check that nothing stands out that reviewers may have missed Feel free to run a build yourself, if you're paranoid, but don't feel compelled to.","title":"Leadership"},{"location":"about/leadership/#leadership","text":"There are two levels of leadership in the illumos project: Members of the Dev Council, and Request To Integrate (RTI) Advocates.","title":"Leadership"},{"location":"about/leadership/#developer-council","text":"The Dev Council is a technical steering committee drawn from well-known developers of Solaris, whose role is to make high-level architecture decisions. Member Organization Adam Leventhal Transposit Bryan Cantrill Joyent Garrett D'Amore RackTop Systems Gordon Ross Nexenta Rich Lowe unaffiliated","title":"Developer Council"},{"location":"about/leadership/#advocates","text":"Advocates are the gatekeepers to the illumos core: they have the ultimate say in what code is accepted, and their primary job is to ensure quality and stability for all illumos users. Advocates are appointed by the illumos Developer Council. Member Handle Organization Expertise Albert Lee trisk SoftNAS Storage, drivers, userland. Chris Siden csiden Delphix ZFS Dan McDonald danmcd Joyent Cryptography, Networking Garrett D'Amore gdamore RackTop Systems Drivers, etc. Gordon Ross gwr Nexenta CIFS/SMB, VFS layer, ZFS ACLs, etc. Hans Rosenfeld Woodstock Joyent Misc. Joshua M. Clulow LeftWing Joyent Misc. Matt Ahrens mahrens Delphix ZFS Rich Lowe richlowe unaffiliated Misc. Robert Mustacchi rmustacc Joyent Virtualization, SMF, PCI, MDB, DTrace, x86 platform, etc.","title":"Advocates"},{"location":"about/leadership/#life-as-an-advocate","text":"Contributors send you patches, build results, test results, check results, review results. If you're happy with all of this, you integrate the change on their behalf. You should have received a diff in hg export or similar format, including a full set of metadata (Reviewed by: lines, authorship, etc.). If you didn't, feel free to ask whoever submitted the patch to submit it in this format, you shouldn't have to go search the list archives for reviewers.","title":"Life as an Advocate"},{"location":"about/leadership/#using-your-judgment","text":"The whole reason we have RTI advocates or, if you're not steeped in Sun-ish history, follow a \"pull\" model, is that it provides us with a step in the process where in theory experienced people can exercise their (in theory) better judgment, and everyone can benefit from less breakage. This is 95% of the work involved.","title":"Using your judgment"},{"location":"about/leadership/#things-advocates-focus-on","text":"Do you know the areas of the system affected well enough to even have an opinion? If not, you should probably leave this for someone else who might (note that we don't have perfect coverage, so you can't just punt on everything). Is the commit well-formed? The author line should include both a name and a well formed email address, and should match the actual author. The format here is very important for SCM export. Don't just assume it's fine! Is the pbchk output as clean as you want it to be? In general, there should be no noise from any check, however some areas are not clean for the various style checks, you should check this is actually the case (in general, areas that are innately dirty are very dirty, and stand out). Is the user's build clean? Did the user also build with the current shadow compiler? - check the mail_msg file for the compilers that were actually used. Did the submitter test their changes to your satisfaction? Can you think of anything else that should be tested? Ask for it! Did the testing actually test the area changed by the patch? Check! Read the diff. Check that nothing stands out that reviewers may have missed Feel free to run a build yourself, if you're paranoid, but don't feel compelled to.","title":"Things Advocates Focus On"},{"location":"about/logo-1/","text":"Bare Logo: svg scalable eps scalable png 64px png 166px png 2057px","title":"Logo 1"},{"location":"about/logo-2/","text":"Logo with text, light background: svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90px wide png 139px wide png 267px wide png 3320px wide","title":"Logo 2"},{"location":"about/logo-3/","text":"Logo with text, dark background: svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90 px wide png 139 px wide png 267 px wide png 3320 px wide","title":"Logo 3"},{"location":"about/logo-4/","text":"Logo with Powered By text, light background: png 32 px png 63 px png 26 px","title":"Logo 4"},{"location":"about/logo-5/","text":"Logo with Powered By text, dark background: png 32 px png 63 px","title":"Logo 5"},{"location":"about/logo/","text":"The illumos logo \u00b6 The illumos mark is a trademark, and it is important to note that there are some restrictions on its use. The logo itself was created by Rowan for illumos. Download \u00b6 Zip of all logos. Usage \u00b6 The \"Powered by\" versions may be used on websites, login banners, distribution media, or other situations to indicate that either a service is running on the illumos operating system, or that a distribution is based upon it. Other uses are unacceptable. The other icons may be used for personal use (for example to print a T-shirt). All other use must be approved by Garrett D'Amore. For most uses, the full-color phoenix with the illumos name next to it is preferred. Use the \"large phoenix\" or \"small phoenix\" version according to how much space is available. The phoenix without the illumos name may be used where the name would be inappropriate. Do not change the size or position of any parts of the logo relative to each other. Only use the whole logo as a unit, exactly as it is provided. You may scale the vector formats up or down as required. The PNG format should only be scaled down. In all cases, the proportions must be constrained so the logo is not squeezed or stretched. Do not make the logo so small that it becomes unreadable. Do not alter the colors in the logo. Do not use the logo at an angle, and do not distort or warp it. Generally, maintain a clear space on all four sides of the logo. This space should be equal to approximately 25% of the height of the phoenix. The font used in the logo is Museo Sans. Some versions use Museo Slab, but Museo Sans is preferred. There are two versions of the text, one which is optimized for smaller sizes (where the ratio of the word \"illumos\" to the logo is larger), and one for larger displays (where the text is a bit smaller in proportion). Examples \u00b6 Logo Formats Bare Logo: svg scalable eps scalable png 64px png 166px png 2057px Logo with text, light background: svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90px wide png 139px wide png 267px wide png 3320px wide Logo with text, dark background: svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90 px wide png 139 px wide png 267 px wide png 3320 px wide Logo with Powered By text, light background: png 32 px png 63 px png 26 px Logo with Powered By text, dark background: png 32 px png 63 px These versions are optimized for screen display. If you need an alternate color space (CMYK, or single or two color only), please send an email to Garrett D'Amore .","title":"Logo"},{"location":"about/logo/#the-illumos-logo","text":"The illumos mark is a trademark, and it is important to note that there are some restrictions on its use. The logo itself was created by Rowan for illumos.","title":"The illumos logo"},{"location":"about/logo/#download","text":"Zip of all logos.","title":"Download"},{"location":"about/logo/#usage","text":"The \"Powered by\" versions may be used on websites, login banners, distribution media, or other situations to indicate that either a service is running on the illumos operating system, or that a distribution is based upon it. Other uses are unacceptable. The other icons may be used for personal use (for example to print a T-shirt). All other use must be approved by Garrett D'Amore. For most uses, the full-color phoenix with the illumos name next to it is preferred. Use the \"large phoenix\" or \"small phoenix\" version according to how much space is available. The phoenix without the illumos name may be used where the name would be inappropriate. Do not change the size or position of any parts of the logo relative to each other. Only use the whole logo as a unit, exactly as it is provided. You may scale the vector formats up or down as required. The PNG format should only be scaled down. In all cases, the proportions must be constrained so the logo is not squeezed or stretched. Do not make the logo so small that it becomes unreadable. Do not alter the colors in the logo. Do not use the logo at an angle, and do not distort or warp it. Generally, maintain a clear space on all four sides of the logo. This space should be equal to approximately 25% of the height of the phoenix. The font used in the logo is Museo Sans. Some versions use Museo Slab, but Museo Sans is preferred. There are two versions of the text, one which is optimized for smaller sizes (where the ratio of the word \"illumos\" to the logo is larger), and one for larger displays (where the text is a bit smaller in proportion).","title":"Usage"},{"location":"about/logo/#examples","text":"Logo Formats Bare Logo: svg scalable eps scalable png 64px png 166px png 2057px Logo with text, light background: svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90px wide png 139px wide png 267px wide png 3320px wide Logo with text, dark background: svg scalable optimized for smaller sizes svg scalable optimized for larger sizes eps scalable optimized for smaller sizes eps scalable optimized for larger sizes png 90 px wide png 139 px wide png 267 px wide png 3320 px wide Logo with Powered By text, light background: png 32 px png 63 px png 26 px Logo with Powered By text, dark background: png 32 px png 63 px These versions are optimized for screen display. If you need an alternate color space (CMYK, or single or two color only), please send an email to Garrett D'Amore .","title":"Examples"},{"location":"about/who/","text":"Who uses illumos? \u00b6 Many communities and businesses base their products and services on illumos. In addition to providing the core for projects and products, components of illumos have been ported to other operating systems. If you'd like to be included in this list, please use the documentation contribution process to add details about your organisation! Organizations \u00b6 Organization Description FreeBSD Incorporates ZFS, DTrace, mdb Apple Incorporates DTrace Joyent Public and on-prem cloud, object storage Lucera Finanial infrastructure services Delphix Database virtualization Nexenta Storage appliance EveryCity Managed cloud services Project FIFO On-prem cloud Circonus Monitoring services Pobox Email services Topicbox Mailing list services DanubeCloud On-prem cloud","title":"Who uses illumos?"},{"location":"about/who/#who-uses-illumos","text":"Many communities and businesses base their products and services on illumos. In addition to providing the core for projects and products, components of illumos have been ported to other operating systems. If you'd like to be included in this list, please use the documentation contribution process to add details about your organisation!","title":"Who uses illumos?"},{"location":"about/who/#organizations","text":"Organization Description FreeBSD Incorporates ZFS, DTrace, mdb Apple Incorporates DTrace Joyent Public and on-prem cloud, object storage Lucera Finanial infrastructure services Delphix Database virtualization Nexenta Storage appliance EveryCity Managed cloud services Project FIFO On-prem cloud Circonus Monitoring services Pobox Email services Topicbox Mailing list services DanubeCloud On-prem cloud","title":"Organizations"},{"location":"community/","text":"Community \u00b6 Introduction \u00b6 The illumos community is small but active. We welcome everybody who would like to use the software and participate in the community -- whether you've decades of experience in systems software, or you're just getting started; whether you work for a company that uses illumos, or you just find it personally interesting. We try to be helpful and inclusive! It's not uncommon to see folks on both IRC and the mailing lists discussing a range of issues, both simple and complex. Whether you're just getting started, or you're debugging a difficult problem, you should be able to find the help you need. The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators. If you would like to report an incident, please contact a member of the leadership teams . Mailing Lists \u00b6 Please refer to this page for both illumos project and related community mailing list information. IRC Channels \u00b6 Project Network Channel illumos freenode #illumos SmartOS freenode #smartos OmniOS freenode #omnios OpenIndiana freenode #openindiana OpenZFS freenode #openzfs","title":"Overview"},{"location":"community/#community","text":"","title":"Community"},{"location":"community/#introduction","text":"The illumos community is small but active. We welcome everybody who would like to use the software and participate in the community -- whether you've decades of experience in systems software, or you're just getting started; whether you work for a company that uses illumos, or you just find it personally interesting. We try to be helpful and inclusive! It's not uncommon to see folks on both IRC and the mailing lists discussing a range of issues, both simple and complex. Whether you're just getting started, or you're debugging a difficult problem, you should be able to find the help you need. The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators. If you would like to report an incident, please contact a member of the leadership teams .","title":"Introduction"},{"location":"community/#mailing-lists","text":"Please refer to this page for both illumos project and related community mailing list information.","title":"Mailing Lists"},{"location":"community/#irc-channels","text":"Project Network Channel illumos freenode #illumos SmartOS freenode #smartos OmniOS freenode #omnios OpenIndiana freenode #openindiana OpenZFS freenode #openzfs","title":"IRC Channels"},{"location":"community/events/","text":"Events \u00b6 If you are hosting, or know of an illumos-related event, please use the documentation contribution process to add it to this page! Upcoming \u00b6 FrOSCon 2019 \u00b6 Where: Sankt Augustin, Germany When: 10 th -11 th August 2019 Details: https://www.froscon.de/en/ Past \u00b6 2019 \u00b6 FOSDEM 2019 \u00b6 Where: Brussels, Belgium When: 2 nd -3 rd February 2019 Details: https://fosdem.org/2019/stands/ Location: K/1/A table 8 Who: 2018 \u00b6 FrOSCon 2018 \u00b6 Where: Sankt Augustin, Germany When: 25 + 26 August 2018 Details: https://www.froscon.de/en/ Who: Thomas Merkel Sebastian Wiedenroth Add yourself! CLT 2018 \u00b6 Where: Chemnitz, Germany When: 10 + 11 March 2018 Details: https://chemnitzer.linux-tage.de/2018/en/ Who: Hans Rosenfeld Thomas Merkel Sebastian Wiedenroth FOSDEM 2018 \u00b6 Where: Brussels, Belgium When: 3 + 4 February 2018 Details: https://fosdem.org/2018/ Who: Hans Rosenfeld Thomas Merkel (SmartOS, pkgsrc) Sebastian Wiedenroth (SmartOS, pkgsrc) Jorge Schrauwen (SaltStack SmartOS/illumos support) Thomas Wagner (SFE Project, SpecFiles Extra) Peter Tribble Andy Fiddaman (OmniOS Community Edition) Dominik Hassler (OmniOS Community Edition) 2017 \u00b6 FOSDEM 2017 \u00b6 Where: Brussels, Belgium When: 4 + 5 February 2017 Details: https://archive.fosdem.org/2017/ Who: Hans Rosenfeld Olaf Bohlen (OI/sparc, AI) Jorge Schrauwen (SaltStack SmartOS/illumos support) Sebastian Wiedenroth (pkgsrc, SmartOS) Till Wegm\u00fcller (PXEBoot, NFSRoot, AI, Distro Constructor, pkg5, illumos/OpenPower) Peter Tribble Thomas Merkel Adam \u0160tevko (OI/infrastructure, OI/CI, ansible illumos modules) Alexander Pyhalov Thomas Wagner (SFE, SpecFiles Extra) Our booth is in building K, Level 1, Group A Table 8 2016 \u00b6 FOSDEM 2016 \u00b6 Where: Brussels, Belgium When: 30 + 31 January 2016 Details: https://archive.fosdem.org/2016/ Who: Hans Rosenfeld Jorge Schrauwen Olaf Bohlen (sysidcfg toolset and oi-hipster for sparc) Sebastian Wiedenroth Thomas Merkel Peter Tribble Dan McDonald ( illumos at 5, 12 noon Sunday, Janson ) Thomas Wagner ( http://sfe.opencsw.org/ ) We have our table in building K, Level 1, Group A, Table 7.","title":"Events"},{"location":"community/events/#events","text":"If you are hosting, or know of an illumos-related event, please use the documentation contribution process to add it to this page!","title":"Events"},{"location":"community/events/#upcoming","text":"","title":"Upcoming"},{"location":"community/events/#froscon-2019","text":"Where: Sankt Augustin, Germany When: 10 th -11 th August 2019 Details: https://www.froscon.de/en/","title":"FrOSCon 2019"},{"location":"community/events/#past","text":"","title":"Past"},{"location":"community/events/#2019","text":"","title":"2019"},{"location":"community/events/#fosdem-2019","text":"Where: Brussels, Belgium When: 2 nd -3 rd February 2019 Details: https://fosdem.org/2019/stands/ Location: K/1/A table 8 Who:","title":"FOSDEM 2019"},{"location":"community/events/#2018","text":"","title":"2018"},{"location":"community/events/#froscon-2018","text":"Where: Sankt Augustin, Germany When: 25 + 26 August 2018 Details: https://www.froscon.de/en/ Who: Thomas Merkel Sebastian Wiedenroth Add yourself!","title":"FrOSCon 2018"},{"location":"community/events/#clt-2018","text":"Where: Chemnitz, Germany When: 10 + 11 March 2018 Details: https://chemnitzer.linux-tage.de/2018/en/ Who: Hans Rosenfeld Thomas Merkel Sebastian Wiedenroth","title":"CLT 2018"},{"location":"community/events/#fosdem-2018","text":"Where: Brussels, Belgium When: 3 + 4 February 2018 Details: https://fosdem.org/2018/ Who: Hans Rosenfeld Thomas Merkel (SmartOS, pkgsrc) Sebastian Wiedenroth (SmartOS, pkgsrc) Jorge Schrauwen (SaltStack SmartOS/illumos support) Thomas Wagner (SFE Project, SpecFiles Extra) Peter Tribble Andy Fiddaman (OmniOS Community Edition) Dominik Hassler (OmniOS Community Edition)","title":"FOSDEM 2018"},{"location":"community/events/#2017","text":"","title":"2017"},{"location":"community/events/#fosdem-2017","text":"Where: Brussels, Belgium When: 4 + 5 February 2017 Details: https://archive.fosdem.org/2017/ Who: Hans Rosenfeld Olaf Bohlen (OI/sparc, AI) Jorge Schrauwen (SaltStack SmartOS/illumos support) Sebastian Wiedenroth (pkgsrc, SmartOS) Till Wegm\u00fcller (PXEBoot, NFSRoot, AI, Distro Constructor, pkg5, illumos/OpenPower) Peter Tribble Thomas Merkel Adam \u0160tevko (OI/infrastructure, OI/CI, ansible illumos modules) Alexander Pyhalov Thomas Wagner (SFE, SpecFiles Extra) Our booth is in building K, Level 1, Group A Table 8","title":"FOSDEM 2017"},{"location":"community/events/#2016","text":"","title":"2016"},{"location":"community/events/#fosdem-2016","text":"Where: Brussels, Belgium When: 30 + 31 January 2016 Details: https://archive.fosdem.org/2016/ Who: Hans Rosenfeld Jorge Schrauwen Olaf Bohlen (sysidcfg toolset and oi-hipster for sparc) Sebastian Wiedenroth Thomas Merkel Peter Tribble Dan McDonald ( illumos at 5, 12 noon Sunday, Janson ) Thomas Wagner ( http://sfe.opencsw.org/ ) We have our table in building K, Level 1, Group A, Table 7.","title":"FOSDEM 2016"},{"location":"community/lists/","text":"Mailing Lists \u00b6 The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators. If you would like to report an incident, please contact a member of the leadership teams . General Lists \u00b6 Name Description announce Announcements including new releases, significant milestones, administrative and policy decisions and other news-worthy items. ( Old archives ) developer Developers working on illumos code and those looking to become actively involved. ( Old archives ) discuss General discussion ( Old archives Code Commits, Integration, Bug Tracking \u00b6 Name Description advocates Moderated list for illumos Advocates and submitting RTIs only. ( Old archives ) commits Notifications about each commit made to the illumos source code repository. ( Old archives ) Related Communities \u00b6 Name Description dtrace-discuss All things DTrace openzfs-developer Platform-independent mailing list for ZFS developers to review ZFS code and architecture changes from all platforms. oi-dev OpenIndiana distro developer list openindiana-discuss OpenIndiana distro users list omnios-discuss OmniOS distro users list smartos-discuss SmartOS distro","title":"Mailing Lists"},{"location":"community/lists/#mailing-lists","text":"The Golden Rule Please be respectful and civil in your communications. Harassment and other poor behaviour will not be tolerated, and preventative action will be taken by moderators. If you would like to report an incident, please contact a member of the leadership teams .","title":"Mailing Lists"},{"location":"community/lists/#general-lists","text":"Name Description announce Announcements including new releases, significant milestones, administrative and policy decisions and other news-worthy items. ( Old archives ) developer Developers working on illumos code and those looking to become actively involved. ( Old archives ) discuss General discussion ( Old archives","title":"General Lists"},{"location":"community/lists/#code-commits-integration-bug-tracking","text":"Name Description advocates Moderated list for illumos Advocates and submitting RTIs only. ( Old archives ) commits Notifications about each commit made to the illumos source code repository. ( Old archives )","title":"Code Commits, Integration, Bug Tracking"},{"location":"community/lists/#related-communities","text":"Name Description dtrace-discuss All things DTrace openzfs-developer Platform-independent mailing list for ZFS developers to review ZFS code and architecture changes from all platforms. oi-dev OpenIndiana distro developer list openindiana-discuss OpenIndiana distro users list omnios-discuss OmniOS distro users list smartos-discuss SmartOS distro","title":"Related Communities"},{"location":"community/videos/","text":"Year Presenter Venue Link 2018 Stephen's Machine Room Thoughts on illumos distributions 2017 Peter Tribble flossUK illumos at 6 2017 Various OpenZFS Dev Summit 2016 Bryan Cantrill PapersWeLove Jails and Solaris Zones 2016 Various OpenZFS Dev Summit 2016 Dan McDonald FOSDEM An overview of illumos five years later 2015 Various Surge illumos Day 2015 Various OpenZFS Dev Summit 2014 Matt Ahrens AsiaBSDCon OpenZFS 2014 Various OpenZFS Dev Summit 2014 Various Surge illumos Day 2014 Peter Tribble Tribblix: adventures with illumos 2013 Various OpenZFS Developer Summit 2012 Garrett D'Amore SCALE 10x Developing for illumos 2012 Robert Mustacchi SCALE 10x Using SmartOS as a Hypervisor 2012 Various dtrace.conf 2012 Brendan Gregg DTracing the cloud 2011 Bryan Cantrill LISA 25 Fork Yeah! The Rise and Development of illumos 2011 Various illumos meetup 2011 Bryan Cantrill KVM Forum Porting KVM to illumos 2009 Brendan Gregg KCA DTrace Crash Course 2008 Various dtrace.conf 2008 Jeff Bonwick, Bill Moore SNIA ZFS: The Last Word in Filesystems Many thanks to Deirdr\u00e9 Straughan for recording many of the early OpenSolaris and illumos videos!","title":"Videos"},{"location":"contributing/","text":"Contributing to illumos \u00b6 Overview \u00b6 Committing code to illumos can seem very daunting. To get started, you might consider watching Ryan Zezeski going through fixing a bug in ZFS in this \"illumos Day\" talk, which includes submitting a patch for integration into illumos-gate.git . video slides RTI Process The Request To Integrate (RTI) process is also documented in the illumos Developer's Guide . Finding An Area To Contribute To \u00b6 If you're not sure what you want to work on, you can start by looking at our list of bite-site bugs which should be easy for newcomers to pick up. You can also look at the entire list of issues and see if any with status \"New\" fit your skill set. If you are adding a new feature or addressing a problem not currently on our list of issues , please create a new issue describing it. You need to create an account in the bug tracker in order to be able to file issues. Before you start working on the code, it is advisable to first ask on either the developer mailing list or the IRC channel for advice on the particular area you're interested in. For larger bodies of work, it is worth writing an illumos Project Discussion (IPD) document that describes your plan and seek feedback from advocates and others. Writing The Code \u00b6 Our guide to building illumos covers setting up a build environment and getting the source. To make sure you have a functional build environment, it helps to try at least one build without modifying anything. This also helps you to familiarise yourself with the build system and source tree layout. An unparalleled resource for understanding the operating system is the book, Solaris Internals: Solaris 10 and OpenSolaris Kernel Architecture . We have an OpenGrok source browser and search engine which is very useful for development. Feel free to ask the developer mailing list or the IRC channel for help. We encourage you to \"commit early, commit often\" as you work, using your personal clone of illumos-gate.git. Testing \u00b6 The illumos gate is a core technology leveraged by several commercial vendors that rely on it to be a stable, well-tested platform. As such, changes to illumos require qualified code review from community peers. A reasonable effort must also be made to test each change, to ensure that the change is stable enough for others to rely upon. Your RTI advocate is the ultimate arbiter of whether your testing is sufficient. The scope of required testing depends on the nature of the change and a discussion with your advocate, but in general advocates adopt a \"shrink to fit\" mentality. Here are some examples of reasonable testing based on the collective experience of the current RTI advocates. Your advocate may always ask for more testing depending on the nature of the change. All changes \u00b6 Make sure you test the results of the illumos-gate build with only your changesets applied. To do this, you will need to build the illumos code . It is generally insufficient to test the build results of a downstream fork that contains other non-trivial changes as there may be implicit dependencies that break other consumers of the core illumos gate. If your code has been running in production as part of a downstream distribution of illumos, or has already gone through other testing, please include that information. Your advocate will determine if any additional testing is required for integration. Changing a single program \u00b6 If your change affects only a single binary (e.g., /usr/bin/ls ), it is likely sufficient to copy the binary to a system running a distribution with a reasonable similarity to vanilla illumos-gate and running your tests there. These tests should cover enough functionality to demonstrate the correctness of your changes, and could involve stress tests in addition to functional tests depending on the nature of the change. This assumes that the binary has a trivial set of library dependencies that are reasonably standard across distros. Changing the implementation of a library \u00b6 If your change affects the implementation of a library, but does not change any externally visible interfaces, you should run tests against a reasonable subset of programs that exercise the code in question. As with a single binary, it is likely sufficient to copy this library to a system running a distribution which has identical interfaces to the vanilla illumos-gate. Some core libraries (most notably libc ) are challenging to replace on a live system, so you will likely need to bootstrap a complete new image or boot environment of your distribution in order to be able to test your changes. How to do this depends on your distribution; e.g., OpenIndiana or OmniOS can use onu to update to new packages from a nightly build. Changing the implementation of a driver or adding a new driver \u00b6 If your change affects a single driver, you may or may not be able to get away with copying that driver to a system running an alternate distribution. On one hand, many of the kernel interfaces (e.g., the DDI) are likely identical, but if the core implementation of that distribution has diverged significantly from illumos-gate, you may be asked to bootstrap a complete environment from your vanilla illumos build. Driver tests should demonstrate a reasonable amount of functional and stress testing on appropriate hardware. Changing the core kernel or multiple interconnected binaries \u00b6 If you are making a change to the core kernel (e.g., unix or genunix ), or have a series of changes across a number of libraries, commands, or kernel components, they need to be tested as a cohesive whole. You must bootstrap a usable environment from your illumos-gate build that is sufficient to demonstrate the correctness of your changes. Exactly what \"bootstrapping\" means is dependent on the distribution, but the goal is to run the entirety of the your illumos-gate build (not a combination of downstream and upstream illumos-gate bits) in a testable environment. Not all distros are capable of bootstrapping a vanilla illumos-gate build; check the distribution list and ask on the developer list if you are unsure of how to do this. For example, on OpenIndiana or OmniOS, you can use onu to install the packages produced by a nightly build. On a SmartOS system, you can build a wholly new \"platform image\" and boot a system using it. The scope of testing here will likely be more substantial, and should focus on stability of the system as well as the functionality of the changed component(s). As always, contact your advocate (or the advocates list if you don't yet have someone in mind) if you have more questions about what constitutes sufficient testing for a particular change. You are welcome to ask for help in creating a test plan well in advance of completing the work on you change, so that the advocates can help set expectations and provide feedback throughout the process. Code Review \u00b6 At least one person (other than you, of course) should review your changes. These reviewers should have demonstrated expertise in the area in question or are trusted as knowledgeable by the illumos community at large. If you work for a commercial entity, it is best to include reviewers from outside your company, but this is not required. Your RTI advocate is the ultimate arbiter of whether your review is sufficient. If you don't know how to find adequate review, you may post the changes to the developer mailing list to ask for feedback, or ask the RTI advocates if there is anyone in particular they'd like to see review the code. When seeking review, it is generally best to upload to some web-based review or source hosting system, rather than attach a patch to your list e-mail. The illumos project provides a Review Board instance which you can use with your illumos bug tracker account credentials. Remember to mention the issue ID in the email -- if one does not yet exist, please create one ! Ensuring adequate review \u00b6 It is up to you as a contributor to gather reasonable review to satisfy your RTI advocate that the code is correct and of high quality. Exactly what this means will vary based on the nature and scope of the change, but here are some guidelines that will give the advocates confidence in your changes. As always, trust your avocate and apply \"shrink to fit\". There should be at least one code reviewer (focused on the implementation details) that is different from the advocate (focused on ensuring overall quality of contributions). For non-trivial changes to major technology areas (ZFS, DTrace, etc), at least one of the reviewers should be regarded as a subject matter expert by the community. Changes with significant impact should participate in a public review when appropriate, or otherwise ensure that alternate opinions are represented. When there are disagreements, every attempt should be made to adequately address reviewer's comments. In the event they cannot, it is acceptable to submit an RTI with known dissent. Such disagreements must be noted in the RTI submission with an explanation as to why the review comments were not addressed. When in doubt, more review is generally better. If anything is unclear, or you're stuck on something, you can always ask the advocates for guidance. Submitting A Patch \u00b6 When you have adequate code review and test results for your proposed change, you prepare a \"request to integrate\" (RTI). First, in the issue(s) you created in the bug tracker, make sure you have: Any analysis that lead to the fix; e.g., if you used DTrace or MDB to determine what went wrong it'd be good to include scripts and/or output from your debugging session Your testing plan and results from your testing. This could be simple for simple changes; e.g., \"I ran the updated ls binary and this is the new output\". It could also be more detailed for a complicated bug. Providing the testing notes in the issue allows the advocate to easily see what you did to test, and allows future engineers to better understand how to test their changes in the same area of the system. Once your issue(s) are complete, your RTI e-mail should include: The link to the illumos issue(s) you're fixing, e.g., https://illumos.org/issues/10052 A link to the changes that were reviewed; e.g., a link to your Review Board review The full \"change set description\" (i.e., git whatchanged -v origin/master.. ) including: Issue number(s) and description(s) Reviewed by: First Last <first.last@example.com> lines List of files affected Output of git pbchk (run under bldenv or have /opt/onbld/bin in PATH ) Attach the mail_msg file from a full nightly build, which should be free of warnings Supply information about how the changes were tested (it's sufficient to mention that the testing notes appear in the bug tracker) Attach the actual change as a patch file, as from git format-patch Here is an example change description: 123 Description of the issue in our tracker Reviewed by: Jack <jack@eng.sun.com> Reviewed by: Ohana Matsumae <ohana@kissui.ishikawa.jp> Note You can use git commit --amend to edit the commit message. An Advocate will need to judge whether your code review and testing are adequate for the scope of changes you propose. Note that the advocate's job is not necessarily to review your code, only to judge whether review and testing was adequate. When you are ready, send an email to the illumos advocates mailing list . Though you are welcome to subscribe to the list, it is not required; you can just send mail to advocates@lists.illumos.org . If you're interested in what past RTIs looked like, you can browse past messages . A reasonably complete example issue is 10052 \"dladm show-ether\" should pick one kstat snapshot and stick with it : Bug #10052 in the bug tracker includes both analysis and testing notes The RTI mailing list thread shows the sort of interaction you can expect Note Your email needs to be less than 2MB in size. If your change is large, compress the patch or make it available over HTTP. If your mail_msg is large, something is wrong. You should soon get a reply with additional feedback if needed, or a \"thank you\" for being part of the illumos developer community!","title":"Overview"},{"location":"contributing/#contributing-to-illumos","text":"","title":"Contributing to illumos"},{"location":"contributing/#overview","text":"Committing code to illumos can seem very daunting. To get started, you might consider watching Ryan Zezeski going through fixing a bug in ZFS in this \"illumos Day\" talk, which includes submitting a patch for integration into illumos-gate.git . video slides RTI Process The Request To Integrate (RTI) process is also documented in the illumos Developer's Guide .","title":"Overview"},{"location":"contributing/#finding-an-area-to-contribute-to","text":"If you're not sure what you want to work on, you can start by looking at our list of bite-site bugs which should be easy for newcomers to pick up. You can also look at the entire list of issues and see if any with status \"New\" fit your skill set. If you are adding a new feature or addressing a problem not currently on our list of issues , please create a new issue describing it. You need to create an account in the bug tracker in order to be able to file issues. Before you start working on the code, it is advisable to first ask on either the developer mailing list or the IRC channel for advice on the particular area you're interested in. For larger bodies of work, it is worth writing an illumos Project Discussion (IPD) document that describes your plan and seek feedback from advocates and others.","title":"Finding An Area To Contribute To"},{"location":"contributing/#writing-the-code","text":"Our guide to building illumos covers setting up a build environment and getting the source. To make sure you have a functional build environment, it helps to try at least one build without modifying anything. This also helps you to familiarise yourself with the build system and source tree layout. An unparalleled resource for understanding the operating system is the book, Solaris Internals: Solaris 10 and OpenSolaris Kernel Architecture . We have an OpenGrok source browser and search engine which is very useful for development. Feel free to ask the developer mailing list or the IRC channel for help. We encourage you to \"commit early, commit often\" as you work, using your personal clone of illumos-gate.git.","title":"Writing The Code"},{"location":"contributing/#testing","text":"The illumos gate is a core technology leveraged by several commercial vendors that rely on it to be a stable, well-tested platform. As such, changes to illumos require qualified code review from community peers. A reasonable effort must also be made to test each change, to ensure that the change is stable enough for others to rely upon. Your RTI advocate is the ultimate arbiter of whether your testing is sufficient. The scope of required testing depends on the nature of the change and a discussion with your advocate, but in general advocates adopt a \"shrink to fit\" mentality. Here are some examples of reasonable testing based on the collective experience of the current RTI advocates. Your advocate may always ask for more testing depending on the nature of the change.","title":"Testing"},{"location":"contributing/#all-changes","text":"Make sure you test the results of the illumos-gate build with only your changesets applied. To do this, you will need to build the illumos code . It is generally insufficient to test the build results of a downstream fork that contains other non-trivial changes as there may be implicit dependencies that break other consumers of the core illumos gate. If your code has been running in production as part of a downstream distribution of illumos, or has already gone through other testing, please include that information. Your advocate will determine if any additional testing is required for integration.","title":"All changes"},{"location":"contributing/#changing-a-single-program","text":"If your change affects only a single binary (e.g., /usr/bin/ls ), it is likely sufficient to copy the binary to a system running a distribution with a reasonable similarity to vanilla illumos-gate and running your tests there. These tests should cover enough functionality to demonstrate the correctness of your changes, and could involve stress tests in addition to functional tests depending on the nature of the change. This assumes that the binary has a trivial set of library dependencies that are reasonably standard across distros.","title":"Changing a single program"},{"location":"contributing/#changing-the-implementation-of-a-library","text":"If your change affects the implementation of a library, but does not change any externally visible interfaces, you should run tests against a reasonable subset of programs that exercise the code in question. As with a single binary, it is likely sufficient to copy this library to a system running a distribution which has identical interfaces to the vanilla illumos-gate. Some core libraries (most notably libc ) are challenging to replace on a live system, so you will likely need to bootstrap a complete new image or boot environment of your distribution in order to be able to test your changes. How to do this depends on your distribution; e.g., OpenIndiana or OmniOS can use onu to update to new packages from a nightly build.","title":"Changing the implementation of a library"},{"location":"contributing/#changing-the-implementation-of-a-driver-or-adding-a-new-driver","text":"If your change affects a single driver, you may or may not be able to get away with copying that driver to a system running an alternate distribution. On one hand, many of the kernel interfaces (e.g., the DDI) are likely identical, but if the core implementation of that distribution has diverged significantly from illumos-gate, you may be asked to bootstrap a complete environment from your vanilla illumos build. Driver tests should demonstrate a reasonable amount of functional and stress testing on appropriate hardware.","title":"Changing the implementation of a driver or adding a new driver"},{"location":"contributing/#changing-the-core-kernel-or-multiple-interconnected-binaries","text":"If you are making a change to the core kernel (e.g., unix or genunix ), or have a series of changes across a number of libraries, commands, or kernel components, they need to be tested as a cohesive whole. You must bootstrap a usable environment from your illumos-gate build that is sufficient to demonstrate the correctness of your changes. Exactly what \"bootstrapping\" means is dependent on the distribution, but the goal is to run the entirety of the your illumos-gate build (not a combination of downstream and upstream illumos-gate bits) in a testable environment. Not all distros are capable of bootstrapping a vanilla illumos-gate build; check the distribution list and ask on the developer list if you are unsure of how to do this. For example, on OpenIndiana or OmniOS, you can use onu to install the packages produced by a nightly build. On a SmartOS system, you can build a wholly new \"platform image\" and boot a system using it. The scope of testing here will likely be more substantial, and should focus on stability of the system as well as the functionality of the changed component(s). As always, contact your advocate (or the advocates list if you don't yet have someone in mind) if you have more questions about what constitutes sufficient testing for a particular change. You are welcome to ask for help in creating a test plan well in advance of completing the work on you change, so that the advocates can help set expectations and provide feedback throughout the process.","title":"Changing the core kernel or multiple interconnected binaries"},{"location":"contributing/#code-review","text":"At least one person (other than you, of course) should review your changes. These reviewers should have demonstrated expertise in the area in question or are trusted as knowledgeable by the illumos community at large. If you work for a commercial entity, it is best to include reviewers from outside your company, but this is not required. Your RTI advocate is the ultimate arbiter of whether your review is sufficient. If you don't know how to find adequate review, you may post the changes to the developer mailing list to ask for feedback, or ask the RTI advocates if there is anyone in particular they'd like to see review the code. When seeking review, it is generally best to upload to some web-based review or source hosting system, rather than attach a patch to your list e-mail. The illumos project provides a Review Board instance which you can use with your illumos bug tracker account credentials. Remember to mention the issue ID in the email -- if one does not yet exist, please create one !","title":"Code Review"},{"location":"contributing/#ensuring-adequate-review","text":"It is up to you as a contributor to gather reasonable review to satisfy your RTI advocate that the code is correct and of high quality. Exactly what this means will vary based on the nature and scope of the change, but here are some guidelines that will give the advocates confidence in your changes. As always, trust your avocate and apply \"shrink to fit\". There should be at least one code reviewer (focused on the implementation details) that is different from the advocate (focused on ensuring overall quality of contributions). For non-trivial changes to major technology areas (ZFS, DTrace, etc), at least one of the reviewers should be regarded as a subject matter expert by the community. Changes with significant impact should participate in a public review when appropriate, or otherwise ensure that alternate opinions are represented. When there are disagreements, every attempt should be made to adequately address reviewer's comments. In the event they cannot, it is acceptable to submit an RTI with known dissent. Such disagreements must be noted in the RTI submission with an explanation as to why the review comments were not addressed. When in doubt, more review is generally better. If anything is unclear, or you're stuck on something, you can always ask the advocates for guidance.","title":"Ensuring adequate review"},{"location":"contributing/#submitting-a-patch","text":"When you have adequate code review and test results for your proposed change, you prepare a \"request to integrate\" (RTI). First, in the issue(s) you created in the bug tracker, make sure you have: Any analysis that lead to the fix; e.g., if you used DTrace or MDB to determine what went wrong it'd be good to include scripts and/or output from your debugging session Your testing plan and results from your testing. This could be simple for simple changes; e.g., \"I ran the updated ls binary and this is the new output\". It could also be more detailed for a complicated bug. Providing the testing notes in the issue allows the advocate to easily see what you did to test, and allows future engineers to better understand how to test their changes in the same area of the system. Once your issue(s) are complete, your RTI e-mail should include: The link to the illumos issue(s) you're fixing, e.g., https://illumos.org/issues/10052 A link to the changes that were reviewed; e.g., a link to your Review Board review The full \"change set description\" (i.e., git whatchanged -v origin/master.. ) including: Issue number(s) and description(s) Reviewed by: First Last <first.last@example.com> lines List of files affected Output of git pbchk (run under bldenv or have /opt/onbld/bin in PATH ) Attach the mail_msg file from a full nightly build, which should be free of warnings Supply information about how the changes were tested (it's sufficient to mention that the testing notes appear in the bug tracker) Attach the actual change as a patch file, as from git format-patch Here is an example change description: 123 Description of the issue in our tracker Reviewed by: Jack <jack@eng.sun.com> Reviewed by: Ohana Matsumae <ohana@kissui.ishikawa.jp> Note You can use git commit --amend to edit the commit message. An Advocate will need to judge whether your code review and testing are adequate for the scope of changes you propose. Note that the advocate's job is not necessarily to review your code, only to judge whether review and testing was adequate. When you are ready, send an email to the illumos advocates mailing list . Though you are welcome to subscribe to the list, it is not required; you can just send mail to advocates@lists.illumos.org . If you're interested in what past RTIs looked like, you can browse past messages . A reasonably complete example issue is 10052 \"dladm show-ether\" should pick one kstat snapshot and stick with it : Bug #10052 in the bug tracker includes both analysis and testing notes The RTI mailing list thread shows the sort of interaction you can expect Note Your email needs to be less than 2MB in size. If your change is large, compress the patch or make it available over HTTP. If your mail_msg is large, something is wrong. You should soon get a reply with additional feedback if needed, or a \"thank you\" for being part of the illumos developer community!","title":"Submitting A Patch"},{"location":"contributing/docs/","text":"Contributing Documentation \u00b6 Introduction \u00b6 If you'd like to help expand our documentation, we'd love the assistance. This site is hosted on GitHub and uses mkdocs . Process \u00b6 If you notice an error or see something that can be improved, or you want to write a whole new section, you have a couple options: Local Development \u00b6 Fork the illumos/docs repo and submit a Pull Request. You'll need to install mkdocs , and some of our dependencies on your workstation to help with development and testing. pip install mkdocs pip install mkdocs-material pip install markdown-include We enable a number of extensions. You might want to review the documentation for them. Some of the more useful ones are: https://squidfunk.github.io/mkdocs-material/extensions/admonition/ https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ Online Development \u00b6 Alternatively, you can edit the page directly in GitHub, and submit a Pull Request. Review \u00b6 Your changes will go through a review process and hopefully be merged in! Help Wanted! \u00b6 We've already identified some key pages where we need to improve documentation; have a look at the open issues for the doc repository to see if you can lend a hand.","title":"Documentation"},{"location":"contributing/docs/#contributing-documentation","text":"","title":"Contributing Documentation"},{"location":"contributing/docs/#introduction","text":"If you'd like to help expand our documentation, we'd love the assistance. This site is hosted on GitHub and uses mkdocs .","title":"Introduction"},{"location":"contributing/docs/#process","text":"If you notice an error or see something that can be improved, or you want to write a whole new section, you have a couple options:","title":"Process"},{"location":"contributing/docs/#local-development","text":"Fork the illumos/docs repo and submit a Pull Request. You'll need to install mkdocs , and some of our dependencies on your workstation to help with development and testing. pip install mkdocs pip install mkdocs-material pip install markdown-include We enable a number of extensions. You might want to review the documentation for them. Some of the more useful ones are: https://squidfunk.github.io/mkdocs-material/extensions/admonition/ https://squidfunk.github.io/mkdocs-material/extensions/codehilite/ https://squidfunk.github.io/mkdocs-material/extensions/pymdown/","title":"Local Development"},{"location":"contributing/docs/#online-development","text":"Alternatively, you can edit the page directly in GitHub, and submit a Pull Request.","title":"Online Development"},{"location":"contributing/docs/#review","text":"Your changes will go through a review process and hopefully be merged in!","title":"Review"},{"location":"contributing/docs/#help-wanted","text":"We've already identified some key pages where we need to improve documentation; have a look at the open issues for the doc repository to see if you can lend a hand.","title":"Help Wanted!"},{"location":"contributing/qds/","text":"The Quality Death Spiral \u00b6 Terminology Term Definition FCS First Customer Ship gate Source code repository Put [it] back Committing code to the gate Introduction \u00b6 Jeff Bonwick was the gatekeeper for Solaris 2.5. He gave a talk on Solaris to the Sun Systems Group in September, 1994. It included a section on the Quality Death Spiral -- a timeless phenomenon that remains our omnipresent fear: The following is paraphrasing Jeff's talk. If it's broken, rip it out! \u00b6 FCS quality all the time Put it back today, 20 of your (current) friends will be running it tomorrow Gate breakage grinds other development to a halt The product, not any one project, is what matters Mistakes will happen; negligence cannot FCS quality all the time \u00b6 Why is this so important? Only way to avoid the quality death spiral: People hear the gate is broken Decide not to risk a bringover Fewer people run the latest stuff Less real-life testing New bugs not found Quality drops further Morale tracks quality Downward spiral hard to break Recovery time can be very long Originally sourced from http://hub.opensolaris.org/bin/view/Community+Group+on/qual_death_spiral .","title":"Quality Death Spiral"},{"location":"contributing/qds/#the-quality-death-spiral","text":"Terminology Term Definition FCS First Customer Ship gate Source code repository Put [it] back Committing code to the gate","title":"The Quality Death Spiral"},{"location":"contributing/qds/#introduction","text":"Jeff Bonwick was the gatekeeper for Solaris 2.5. He gave a talk on Solaris to the Sun Systems Group in September, 1994. It included a section on the Quality Death Spiral -- a timeless phenomenon that remains our omnipresent fear: The following is paraphrasing Jeff's talk.","title":"Introduction"},{"location":"contributing/qds/#if-its-broken-rip-it-out","text":"FCS quality all the time Put it back today, 20 of your (current) friends will be running it tomorrow Gate breakage grinds other development to a halt The product, not any one project, is what matters Mistakes will happen; negligence cannot","title":"If it's broken, rip it out!"},{"location":"contributing/qds/#fcs-quality-all-the-time","text":"Why is this so important? Only way to avoid the quality death spiral: People hear the gate is broken Decide not to risk a bringover Fewer people run the latest stuff Less real-life testing New bugs not found Quality drops further Morale tracks quality Downward spiral hard to break Recovery time can be very long Originally sourced from http://hub.opensolaris.org/bin/view/Community+Group+on/qual_death_spiral .","title":"FCS quality all the time"},{"location":"contributing/quality/","text":"So You Want to Develop on illumos \u00b6 Written by Bryan Cantrill Terminology Term Definition FCS First Customer Ship gate Source code repository gatekeeper Release Engineer responsible for ensuring the gate is working putback Committing code to the gate jurassic Server in the Sun Microsystems engineering dept. Introduction \u00b6 So you're new to open source, and/or you're new to illumos. Maybe you have lots of experience developing mission-critical software, maybe you have none. But if you haven't already figured it out, we take quality very seriously around here. Developing illumos is very hard, and it's very important. This is good news, not bad news -- solving easy problems is boring and solving irrelevant problems is, well, irrelevant. But you should be prepared for the fact that you will need to push yourself to deliver the highest quality software. If you haven't already discovered it, illumos -- like any large software system -- has a complete range of software quality within its many subsystems. Immaculate \u00b6 Some illumos subsystems are beautiful works of engineering -- they are squeaky clean, well-designed and well-crafted. These subsystems are a joy to work in but (and here's the catch) by virtue of being well-designed and well-implemented, they generally don't need a whole lot of work. So you'll get to use them, appreciate them, and be inspired by them -- but you probably won't spend much time modifying them. (And because many of these subsystems have been implemented by engineers who are now part of the active illumos community, many of the changes will be done by the original implementor(s) anyway.) Fetid \u00b6 Other illumos subsystems are cobbled-together piles of junk -- reeking garbage barges that have been around longer than anyone remembers, floating from one release to the next. These subsystems have few-to-no comments (or what comments they have are clearly wrong), are poorly designed, needlessly complex, badly implemented and virtually undebuggable. There are often parts that work by accident, and unused or little-used parts that simply never worked at all. They manage to survive for one or more of the following reasons: They work just well enough to not justify the cost of rewriting them The problem they solve isn't important enough to justify the cost of rewriting them The problem they solve is so nasty that the cost of a rewrite is enormous -- or at least it dwarfs the cost of ongoing maintenance If you find yourself having to do work in one of these subsystems, you must exercise extreme caution: you will need to write as many test cases as you can think of to beat the snot out of your modification, and you will need to perform extensive self-review. You can try asking for assistance, but you may quickly discover that no one is available who understands that particular subsystem. Your code reviewers may not be able to help much either -- maybe you'll find one or two people who have had the same misfortune that you find yourself experiencing, but it's more likely that you will have to explain most aspects of the subsystem to your reviewers. You may discover as you work in the subsystem that maintaining it is simply untenable -- it may be time to consider rewriting the subsystem from scratch. (After all, most of the subsystems that are in the first category replaced subsystems that were in the second.) One should not come to this decision too quickly: rewriting a subsystem from scratch is enormously difficult and time-consuming. Still, don't rule it out a priori. Even if you decide not to rewrite such a subsystem, you should improve it while you're there in ways that don't introduce excessive risk. For example, if something took you a while to figure out, don't hesitate to add a block comment to explain your discoveries. And if it was a pain in the ass to debug, you should add the debugging support that you found lacking. This will make it slightly easier on the next engineer -- and it will make it easier on you when you need to debug your own modifications. Grimy \u00b6 Most illumos subsystems, however, don't actually fall neatly into either of these categories -- they are somewhere in the middle. That is, they have parts that are well thought out, or design elements that are sound, but they are also littered with implicit intradependencies within the subsystem or implicit interdependencies with other subsystems. They may have debugging support, but perhaps it is incomplete or out of date. Perhaps the subsystem effectively met its original design goals, but it has been extended to solve a new problem in a way that has left it brittle or overly complex. Many of these subsystems have been fixed to the point that they work reliably -- but they are delicate and they must be modified with care. Due Diligence \u00b6 The majority of work that you will do on existing code will be to subsystems in this last category. You must be very cautious when making changes to these subsystems. Sometimes these subsystems have local experts, but many changes will go beyond their expertise. (After all, part of the problem with these subsystems is that they often weren't designed to accommodate the kind of change you might want to make.) You must extensively test your change to the subsystem. Run your change on your desktop, your laptop, your home machine and every kind of machine you can grab a tip line to. But you can't just be content with booting a machine with your change -- you must beat the hell out of it. Sometimes there is a stress test available that you may run, but this is not a substitute for writing your own tests . You should find any standards tests that might apply to the subsystem and run them. (If you don't know which standards tests might apply to your change, consult the gatekeepers or the C-team.) You should review your own changes extensively. Are you obeying all of the locking rules? What are the locking rules, anyway? Are you building new dependencies into the subsystem? (This can only be answered with extensive, laborious cscope'ing -- you cannot rely on code reviewers to pick up subtle new dependencies.) Review your changes again. Then, print your changes out, take them to a place where you can concentrate, and review them yet again. And when you review your own code, review it not as someone who believes that the code is right, but as someone who is certain that the code is wrong. As you perform your self-review, look for novel angles from which to test your code. Then test and test and test. It can all be summed up by asking yourself one question: have you reviewed and tested your change every way that you know how? You should not even contemplate a putback until your answer to this is an unequivocal YES .. Remember: you are always empowered as an engineer to take more time to test your work. You can -- always take time to do the Right Thing. This is important to avoid the Quality Death Spiral . You must do your part by delivering FCS quality all the time . Does this mean that you should contemplate ritual suicide if you introduce a serious bug? Of course not -- everyone who has made enough modifications to delicate, critical subsystems has introduced a change that has induced expensive downtime somewhere. We know that this will be so because writing system software is just so damned tricky and hard. Indeed, it is because of this truism that you must demand of yourself that you not integrate a change until you are out of ideas of how to test it. Because you will one day introduce a bug of such subtlety that it will seem that no one could have caught it. And what do you do when that awful, black day arrives? Here's a quick coping manual from those of us who have been there: Don't pretend it didn't happen -- you screwed up, but your mother still loves you (unless, of course, her home directory is on jurassic) Don't minimize the problem, shrug it off or otherwise make light of it -- this is serious business, and we take it seriously If someone spent time debugging your bug, thank them If someone was inconvenienced by your bug, apologize to them Take responsibility for your bug -- don't bother to blame other subsystems, the inherent complexity of illumos, your code reviewers, etc. But most importantly, you must ask yourself: what could I have done differently ? If you honestly don't know, ask a community member to help you. We've all been there, and we want to make sure that you are able to learn from it. Once you have an answer, take solace in it; no matter how bad you feel for having introduced a problem, you can know that the experience has improved you as an engineer -- and that's the most anyone can ask for.","title":"On Quality"},{"location":"contributing/quality/#so-you-want-to-develop-on-illumos","text":"Written by Bryan Cantrill Terminology Term Definition FCS First Customer Ship gate Source code repository gatekeeper Release Engineer responsible for ensuring the gate is working putback Committing code to the gate jurassic Server in the Sun Microsystems engineering dept.","title":"So You Want to Develop on illumos"},{"location":"contributing/quality/#introduction","text":"So you're new to open source, and/or you're new to illumos. Maybe you have lots of experience developing mission-critical software, maybe you have none. But if you haven't already figured it out, we take quality very seriously around here. Developing illumos is very hard, and it's very important. This is good news, not bad news -- solving easy problems is boring and solving irrelevant problems is, well, irrelevant. But you should be prepared for the fact that you will need to push yourself to deliver the highest quality software. If you haven't already discovered it, illumos -- like any large software system -- has a complete range of software quality within its many subsystems.","title":"Introduction"},{"location":"contributing/quality/#immaculate","text":"Some illumos subsystems are beautiful works of engineering -- they are squeaky clean, well-designed and well-crafted. These subsystems are a joy to work in but (and here's the catch) by virtue of being well-designed and well-implemented, they generally don't need a whole lot of work. So you'll get to use them, appreciate them, and be inspired by them -- but you probably won't spend much time modifying them. (And because many of these subsystems have been implemented by engineers who are now part of the active illumos community, many of the changes will be done by the original implementor(s) anyway.)","title":"Immaculate"},{"location":"contributing/quality/#fetid","text":"Other illumos subsystems are cobbled-together piles of junk -- reeking garbage barges that have been around longer than anyone remembers, floating from one release to the next. These subsystems have few-to-no comments (or what comments they have are clearly wrong), are poorly designed, needlessly complex, badly implemented and virtually undebuggable. There are often parts that work by accident, and unused or little-used parts that simply never worked at all. They manage to survive for one or more of the following reasons: They work just well enough to not justify the cost of rewriting them The problem they solve isn't important enough to justify the cost of rewriting them The problem they solve is so nasty that the cost of a rewrite is enormous -- or at least it dwarfs the cost of ongoing maintenance If you find yourself having to do work in one of these subsystems, you must exercise extreme caution: you will need to write as many test cases as you can think of to beat the snot out of your modification, and you will need to perform extensive self-review. You can try asking for assistance, but you may quickly discover that no one is available who understands that particular subsystem. Your code reviewers may not be able to help much either -- maybe you'll find one or two people who have had the same misfortune that you find yourself experiencing, but it's more likely that you will have to explain most aspects of the subsystem to your reviewers. You may discover as you work in the subsystem that maintaining it is simply untenable -- it may be time to consider rewriting the subsystem from scratch. (After all, most of the subsystems that are in the first category replaced subsystems that were in the second.) One should not come to this decision too quickly: rewriting a subsystem from scratch is enormously difficult and time-consuming. Still, don't rule it out a priori. Even if you decide not to rewrite such a subsystem, you should improve it while you're there in ways that don't introduce excessive risk. For example, if something took you a while to figure out, don't hesitate to add a block comment to explain your discoveries. And if it was a pain in the ass to debug, you should add the debugging support that you found lacking. This will make it slightly easier on the next engineer -- and it will make it easier on you when you need to debug your own modifications.","title":"Fetid"},{"location":"contributing/quality/#grimy","text":"Most illumos subsystems, however, don't actually fall neatly into either of these categories -- they are somewhere in the middle. That is, they have parts that are well thought out, or design elements that are sound, but they are also littered with implicit intradependencies within the subsystem or implicit interdependencies with other subsystems. They may have debugging support, but perhaps it is incomplete or out of date. Perhaps the subsystem effectively met its original design goals, but it has been extended to solve a new problem in a way that has left it brittle or overly complex. Many of these subsystems have been fixed to the point that they work reliably -- but they are delicate and they must be modified with care.","title":"Grimy"},{"location":"contributing/quality/#due-diligence","text":"The majority of work that you will do on existing code will be to subsystems in this last category. You must be very cautious when making changes to these subsystems. Sometimes these subsystems have local experts, but many changes will go beyond their expertise. (After all, part of the problem with these subsystems is that they often weren't designed to accommodate the kind of change you might want to make.) You must extensively test your change to the subsystem. Run your change on your desktop, your laptop, your home machine and every kind of machine you can grab a tip line to. But you can't just be content with booting a machine with your change -- you must beat the hell out of it. Sometimes there is a stress test available that you may run, but this is not a substitute for writing your own tests . You should find any standards tests that might apply to the subsystem and run them. (If you don't know which standards tests might apply to your change, consult the gatekeepers or the C-team.) You should review your own changes extensively. Are you obeying all of the locking rules? What are the locking rules, anyway? Are you building new dependencies into the subsystem? (This can only be answered with extensive, laborious cscope'ing -- you cannot rely on code reviewers to pick up subtle new dependencies.) Review your changes again. Then, print your changes out, take them to a place where you can concentrate, and review them yet again. And when you review your own code, review it not as someone who believes that the code is right, but as someone who is certain that the code is wrong. As you perform your self-review, look for novel angles from which to test your code. Then test and test and test. It can all be summed up by asking yourself one question: have you reviewed and tested your change every way that you know how? You should not even contemplate a putback until your answer to this is an unequivocal YES .. Remember: you are always empowered as an engineer to take more time to test your work. You can -- always take time to do the Right Thing. This is important to avoid the Quality Death Spiral . You must do your part by delivering FCS quality all the time . Does this mean that you should contemplate ritual suicide if you introduce a serious bug? Of course not -- everyone who has made enough modifications to delicate, critical subsystems has introduced a change that has induced expensive downtime somewhere. We know that this will be so because writing system software is just so damned tricky and hard. Indeed, it is because of this truism that you must demand of yourself that you not integrate a change until you are out of ideas of how to test it. Because you will one day introduce a bug of such subtlety that it will seem that no one could have caught it. And what do you do when that awful, black day arrives? Here's a quick coping manual from those of us who have been there: Don't pretend it didn't happen -- you screwed up, but your mother still loves you (unless, of course, her home directory is on jurassic) Don't minimize the problem, shrug it off or otherwise make light of it -- this is serious business, and we take it seriously If someone spent time debugging your bug, thank them If someone was inconvenienced by your bug, apologize to them Take responsibility for your bug -- don't bother to blame other subsystems, the inherent complexity of illumos, your code reviewers, etc. But most importantly, you must ask yourself: what could I have done differently ? If you honestly don't know, ask a community member to help you. We've all been there, and we want to make sure that you are able to learn from it. Once you have an answer, take solace in it; no matter how bad you feel for having introduced a problem, you can know that the experience has improved you as an engineer -- and that's the most anyone can ask for.","title":"Due Diligence"},{"location":"developers/build/","text":"Building illumos \u00b6 Introduction \u00b6 This document will help prepare you to build the source code for illumos. It assumes some familiarity with development on Unix-like systems. For more detail and background information, please also refer to the illumos Developer's Guide . You need an illumos-based operating system to build illumos. Cross-compilation is not supported. If you don't have one installed, the quickest way to get started is to download either OpenIndiana or OmniOS . Both distributions can be installed in a VM (e.g., VMware Fusion on macOS) or on a physical machine, and can be used to build illumos. All commands in this guide assume you run them as an unprivileged user. sudo will be prepended to commands which need additional (i.e., root ) privileges. On some systems pfexec can be used in place of sudo , provided your user has the correct RBAC profiles . Make sure your system is up-to-date \u00b6 On a freshly installed system, it is a good idea to make sure you have the latest version of all operating system components. On both OmniOS and OpenIndiana, you can update your system by running: sudo pkg update Once the update is complete, you may need to reboot your machine to begin using the new kernel. Installing required packages \u00b6 Once you have an up-to-date illumos system installed and running, you will need to install the basic development tools needed to build illumos. The operating system is currently built with a patched version of GCC 4.4.4. The list of packages to install depends on which distribution you have chosen. OpenIndiana \u00b6 On OpenIndiana, the build-essential package includes the GCC compiler and other tools required to build illumos. In addition, we should install the newer GCC 7 compiler and the Python 3.5 runtime for a complete build. sudo pkg install build-essential \\ runtime/python-35 \\ developer/gcc-7 The patched version of GCC 4.4.4 is installed in /opt/gcc/4.4.4 . OmniOS \u00b6 On OmniOS, the illumos-tools package includes everything you'll need to build illumos, including the optional GCC 7 compiler. Make sure you're running at least OmniOS version r151028 or higher. sudo pkg install pkg:/developer/illumos-tools The patched version of GCC 4.4.4 is installed in /opt/gcc-4.4.4 . Preparing your workspace \u00b6 You can build the software in any directory, but for the purposes of this guide we will assume that you have a directory /code on your system. This directory should be owned by the unprivileged user you will use to build illumos. Getting the source \u00b6 You may use the Git source code management system to retrieve the illumos source code. Git is installed with the other build tools in a previous section. Make sure you have about 6 gigabytes of free space for the source and binaries combined. The repository is available from GitHub using the Git source code control system. The Git repository URI is: https//github.com/illumos/illumos-gate.git To check out the source: cd /code git clone https://github.com/illumos/illumos-gate.git From here on we'll refer to this clone of the repository, i.e., /code/illumos-gate , as your \"workspace\". Getting the closed binaries \u00b6 There are a small handful of illumos components for which source code is not available. Over time, we have replaced most of the closed source components from the Sun era with new open source versions. This work is ongoing. OpenIndiana & OmniOS \u00b6 OmniOS (r151016 or later) and OpenIndiana users have the closed binary files installed in /opt/onbld/closed . The ON_CLOSED_BINS environment variable can be set to refer to this directory without copying it into your workspace. Other Distributions \u00b6 For systems where the closed binaries are not shipped as part of the development tools packages, you can download the closed binary tar files into your local illumos-gate workspace yourself: cd /code/illumos-gate wget -c \\ https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \\ https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2 tar xjvpf on-closed-bins.i386.tar.bz2 tar xjvpf on-closed-bins-nd.i386.tar.bz2 Configuring the build \u00b6 The build is configured using an \"environment file\", a shell script that works like your .bashrc or .profile . This script sets various environment variables that control the build. Some of the variables to set depend on which distribution of illumos you're using. An environment file template is included in illumos-gate.git and can thus be found in your workspace. Make a copy so that we can edit it for use on your particular build machine. cd /code/illumos-gate cp usr/src/tools/env/illumos.sh . vi illumos.sh # use your favourite text editor! The current version of the template is mostly complete, and written such that it tries to guess sensible defaults for most things. For example, git describe is used to set VERSION based on the branch and commit to build git is also used to set CODEMGR_WS to the workspace directory; i.e., /code/illumos-gate in this document. OpenIndiana \u00b6 On OpenIndiana systems, you'll need to add a few more variables to your environment file to get a complete build with packages you can install. Add the following to the bottom of your copy of illumos.sh : # # Set a package version number which is greater than the current OpenIndiana # build number. Note that ONNV_BUILDNUM is ignored if PKGVERS_BRANCH is set: # export PKGVERS_BRANCH=9999.99.0.0 # # Set to current version of Perl shipped with OpenIndiana: # export PERL_VERSION=\"5.22\" export PERL_PKGVERS=\"-522\" # # If you are building on the latest OpenIndiana (2017-03-07 and later), use # OpenJDK 8: # export BLD_JAVA_8= # # Use the copy of the closed binaries that comes with the \"build-essential\" # package: # export ON_CLOSED_BINS=\"/opt/onbld/closed\" Note in particular that PKGVERS_BRANCH must be a higher number than the one currently in use on your OpenIndiana system, so that pkg and onu will prefer your locally built packages to those from the base distribution. You can find out the current branch version with pkg info : $ pkg info osnet-incorporation | grep Branch: Branch: 2018.0.0.18230 OmniOS \u00b6 On OmniOS systems, you have the option of using a complete environment file provided in the developer tool packages. Those files reside in /opt/onbld/env/omnios-* ; one for vanilla illumos-gate.git , and one for the OmniOS-specific downstream fork, illumos-omnios.git . If instead you wish to start with the stock environment file template, you'll need to add the following at the end of your copy of illumos.sh : # Set to the current perl version (this is correct for OmniOS r151028) export PERL_VERSION=5.28 export PERL_ARCH=i86pc-solaris-thread-multi-64int export PERL_PKGVERS= # Set to current python3 version (this is correct for OmniOS r151028) export PYTHON3=/usr/bin/python3.5 export TOOLS_PYTHON=$PYTHON3 export SPRO_ROOT=/opt/sunstudio12.1 export SPRO_VROOT=\"$SPRO_ROOT\" export ONLY_LINT_DEFS=\"-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint\" export ON_CLOSED_BINS=/opt/onbld/closed export __GNUC= export GNUC_ROOT=/opt/gcc-4.4.4/ export PRIMARY_CC=gcc4,/opt/gcc-4.4.4/bin/gcc,gnu export PRIMARY_CCC=gcc4,/opt/gcc-4.4.4/bin/g++,gnu export SHADOW_CCS=gcc7,/opt/gcc-7/bin/gcc,gnu export SHADOW_CCCS=gcc7,/opt/gcc-7/bin/g++,gnu # This will set ONNV_BUILDNUM to match the release on which you are building, allowing ONU. export ONNV_BUILDNUM=`grep '^VERSION=r' /etc/os-release | cut -c10-` export PKGVERS_BRANCH=$ONNV_BUILDNUM.0 You must also make sure you disable the (optional) IPP and SMB printing support by commenting out the following lines in the stock template: # export ENABLE_IPP_PRINTING= # export ENABLE_SMB_PRINTING= If you do need the optional IPP and SMB printing support, you must install and provide Apache, APR, and APR-util, as well as IPP or CUPS headers for SMB printing. Starting the build \u00b6 You are now ready to start the illumos build. The build itself may take anywhere from twenty minutes to a few hours, depending on the performance of your system. It is generally good advice to run the build under a session manager like screen or tmux so that you can detach and reattach without interrupting the build. Run the following command to start the full build: cd /code/illumos-gate time ksh93 usr/src/tools/scripts/nightly.sh illumos.sh The build creates a lot of output, so rather than emit it directly to the terminal it is saved in a log file: log/nightly.log in your workspace. You can follow the log file with tail as the build progresses; e.g., tail -F /code/illumos-gate/log/nightly.log If you only want to see warning or error messages from the build, you might try: tail -F /code/illumos-gate/log/nightly.log | grep -A5 -B5 '(error|warning).*: ' Once the build is complete, the log files (including nightly.log ) are moved to a unique directory including the datestamp; e.g., log/log.2019-02-08.17:50 . A latest symlink is also created, so log/latest/nightly.log always refers to the most recently completed build log. A summary of the build is saved in the log/latest/mail_msg file. If you see any errors in this file, you can find the full context by searching for the same message in the full nightly.log . The mail_msg file should be included when submitting a patch to demonstrate a successful build with no errors or warnings. Performing an incremental build \u00b6 Once you have completed a full nightly build, you can perform an incremental build without discarding files that are already built. This allows you to make some changes to the code and rebuild only the files to which you have made changes. The -i flag to nightly.sh performs an incremental build: cd /code/illumos-gate time ksh93 usr/src/tools/scripts/nightly.sh -i illumos.sh Note Before submitting a patch, you must perform a full (i.e., not incremental) build. Installing your build \u00b6 The build process generates packages that you can install on your system with the developer system update tool, onu . Depending on the NIGHTLY_OPTIONS you chose earlier, you will have packages in one of two locations within your workspace: packages/i386/nightly for a DEBUG build packages/i386/nightly-nd for a non-DEBUG build Once you locate your packages, you can install them with onu ; e.g., for a DEBUG build: sudo /code/illumos-gate/usr/src/tools/proto/root_i386-nd/opt/onbld/bin/onu \\ -t \"$(date -u +nightly-%Y%m%d-%H%MZ)\" \\ -d \"/code/illumos-gate/packages/i386/nightly\" This creates a build environment with a name that includes the date and time in UTC; e.g., nightly-20190415-0333Z . If your installation was successful, you can reboot to try the new bits! You can use beadm(1M) to list or modify the boot environments on your machine. Note For OpenIndiana and OmniOS it is critical that PKGVERS_BRANCH is set correctly in your nightly.sh environment file, or onu will likely fail to correctly install packages. See above on configuring your environment file In case of emergency \u00b6 The illumos project contains a lot of software with a long history. The build system is quite complicated, and not always extremely robust in the face of unexpected changes on the build machine. If you're experiencing a problem with the build that you cannot immediately explain, here are a few things to try: Up-to-date build system \u00b6 Make sure you're running the latest version of your illumos distribution, as described above . If you're hitting a bug in the build tools it might well have been fixed already. Even if this doesn't fix your problem, it's easiest for members of the community to help you out when you're running recent software. Missed Flag Day \u00b6 As people work on the system it is occasionally necessary to make a change that will impact other developers. We try to communicate those changes in \"flag day\" e-mail messages to the developer mailing list . A list of these announcements also appears here on the site . Reach out for help \u00b6 If you're still having trouble, remember that you're not alone! Other members of the community may be hitting the same problem, or they may just know how to help. Members of the community are usually available in IRC or on the mailing lists . When asking for help, it's a good idea to have ready the contents of your mail_msg file, or any other build error output you see on your machine.","title":"Building illumos"},{"location":"developers/build/#building-illumos","text":"","title":"Building illumos"},{"location":"developers/build/#introduction","text":"This document will help prepare you to build the source code for illumos. It assumes some familiarity with development on Unix-like systems. For more detail and background information, please also refer to the illumos Developer's Guide . You need an illumos-based operating system to build illumos. Cross-compilation is not supported. If you don't have one installed, the quickest way to get started is to download either OpenIndiana or OmniOS . Both distributions can be installed in a VM (e.g., VMware Fusion on macOS) or on a physical machine, and can be used to build illumos. All commands in this guide assume you run them as an unprivileged user. sudo will be prepended to commands which need additional (i.e., root ) privileges. On some systems pfexec can be used in place of sudo , provided your user has the correct RBAC profiles .","title":"Introduction"},{"location":"developers/build/#make-sure-your-system-is-up-to-date","text":"On a freshly installed system, it is a good idea to make sure you have the latest version of all operating system components. On both OmniOS and OpenIndiana, you can update your system by running: sudo pkg update Once the update is complete, you may need to reboot your machine to begin using the new kernel.","title":"Make sure your system is up-to-date"},{"location":"developers/build/#installing-required-packages","text":"Once you have an up-to-date illumos system installed and running, you will need to install the basic development tools needed to build illumos. The operating system is currently built with a patched version of GCC 4.4.4. The list of packages to install depends on which distribution you have chosen.","title":"Installing required packages"},{"location":"developers/build/#openindiana","text":"On OpenIndiana, the build-essential package includes the GCC compiler and other tools required to build illumos. In addition, we should install the newer GCC 7 compiler and the Python 3.5 runtime for a complete build. sudo pkg install build-essential \\ runtime/python-35 \\ developer/gcc-7 The patched version of GCC 4.4.4 is installed in /opt/gcc/4.4.4 .","title":"OpenIndiana"},{"location":"developers/build/#omnios","text":"On OmniOS, the illumos-tools package includes everything you'll need to build illumos, including the optional GCC 7 compiler. Make sure you're running at least OmniOS version r151028 or higher. sudo pkg install pkg:/developer/illumos-tools The patched version of GCC 4.4.4 is installed in /opt/gcc-4.4.4 .","title":"OmniOS"},{"location":"developers/build/#preparing-your-workspace","text":"You can build the software in any directory, but for the purposes of this guide we will assume that you have a directory /code on your system. This directory should be owned by the unprivileged user you will use to build illumos.","title":"Preparing your workspace"},{"location":"developers/build/#getting-the-source","text":"You may use the Git source code management system to retrieve the illumos source code. Git is installed with the other build tools in a previous section. Make sure you have about 6 gigabytes of free space for the source and binaries combined. The repository is available from GitHub using the Git source code control system. The Git repository URI is: https//github.com/illumos/illumos-gate.git To check out the source: cd /code git clone https://github.com/illumos/illumos-gate.git From here on we'll refer to this clone of the repository, i.e., /code/illumos-gate , as your \"workspace\".","title":"Getting the source"},{"location":"developers/build/#getting-the-closed-binaries","text":"There are a small handful of illumos components for which source code is not available. Over time, we have replaced most of the closed source components from the Sun era with new open source versions. This work is ongoing.","title":"Getting the closed binaries"},{"location":"developers/build/#openindiana-omnios","text":"OmniOS (r151016 or later) and OpenIndiana users have the closed binary files installed in /opt/onbld/closed . The ON_CLOSED_BINS environment variable can be set to refer to this directory without copying it into your workspace.","title":"OpenIndiana &amp; OmniOS"},{"location":"developers/build/#other-distributions","text":"For systems where the closed binaries are not shipped as part of the development tools packages, you can download the closed binary tar files into your local illumos-gate workspace yourself: cd /code/illumos-gate wget -c \\ https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \\ https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2 tar xjvpf on-closed-bins.i386.tar.bz2 tar xjvpf on-closed-bins-nd.i386.tar.bz2","title":"Other Distributions"},{"location":"developers/build/#configuring-the-build","text":"The build is configured using an \"environment file\", a shell script that works like your .bashrc or .profile . This script sets various environment variables that control the build. Some of the variables to set depend on which distribution of illumos you're using. An environment file template is included in illumos-gate.git and can thus be found in your workspace. Make a copy so that we can edit it for use on your particular build machine. cd /code/illumos-gate cp usr/src/tools/env/illumos.sh . vi illumos.sh # use your favourite text editor! The current version of the template is mostly complete, and written such that it tries to guess sensible defaults for most things. For example, git describe is used to set VERSION based on the branch and commit to build git is also used to set CODEMGR_WS to the workspace directory; i.e., /code/illumos-gate in this document.","title":"Configuring the build"},{"location":"developers/build/#openindiana_1","text":"On OpenIndiana systems, you'll need to add a few more variables to your environment file to get a complete build with packages you can install. Add the following to the bottom of your copy of illumos.sh : # # Set a package version number which is greater than the current OpenIndiana # build number. Note that ONNV_BUILDNUM is ignored if PKGVERS_BRANCH is set: # export PKGVERS_BRANCH=9999.99.0.0 # # Set to current version of Perl shipped with OpenIndiana: # export PERL_VERSION=\"5.22\" export PERL_PKGVERS=\"-522\" # # If you are building on the latest OpenIndiana (2017-03-07 and later), use # OpenJDK 8: # export BLD_JAVA_8= # # Use the copy of the closed binaries that comes with the \"build-essential\" # package: # export ON_CLOSED_BINS=\"/opt/onbld/closed\" Note in particular that PKGVERS_BRANCH must be a higher number than the one currently in use on your OpenIndiana system, so that pkg and onu will prefer your locally built packages to those from the base distribution. You can find out the current branch version with pkg info : $ pkg info osnet-incorporation | grep Branch: Branch: 2018.0.0.18230","title":"OpenIndiana"},{"location":"developers/build/#omnios_1","text":"On OmniOS systems, you have the option of using a complete environment file provided in the developer tool packages. Those files reside in /opt/onbld/env/omnios-* ; one for vanilla illumos-gate.git , and one for the OmniOS-specific downstream fork, illumos-omnios.git . If instead you wish to start with the stock environment file template, you'll need to add the following at the end of your copy of illumos.sh : # Set to the current perl version (this is correct for OmniOS r151028) export PERL_VERSION=5.28 export PERL_ARCH=i86pc-solaris-thread-multi-64int export PERL_PKGVERS= # Set to current python3 version (this is correct for OmniOS r151028) export PYTHON3=/usr/bin/python3.5 export TOOLS_PYTHON=$PYTHON3 export SPRO_ROOT=/opt/sunstudio12.1 export SPRO_VROOT=\"$SPRO_ROOT\" export ONLY_LINT_DEFS=\"-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint\" export ON_CLOSED_BINS=/opt/onbld/closed export __GNUC= export GNUC_ROOT=/opt/gcc-4.4.4/ export PRIMARY_CC=gcc4,/opt/gcc-4.4.4/bin/gcc,gnu export PRIMARY_CCC=gcc4,/opt/gcc-4.4.4/bin/g++,gnu export SHADOW_CCS=gcc7,/opt/gcc-7/bin/gcc,gnu export SHADOW_CCCS=gcc7,/opt/gcc-7/bin/g++,gnu # This will set ONNV_BUILDNUM to match the release on which you are building, allowing ONU. export ONNV_BUILDNUM=`grep '^VERSION=r' /etc/os-release | cut -c10-` export PKGVERS_BRANCH=$ONNV_BUILDNUM.0 You must also make sure you disable the (optional) IPP and SMB printing support by commenting out the following lines in the stock template: # export ENABLE_IPP_PRINTING= # export ENABLE_SMB_PRINTING= If you do need the optional IPP and SMB printing support, you must install and provide Apache, APR, and APR-util, as well as IPP or CUPS headers for SMB printing.","title":"OmniOS"},{"location":"developers/build/#starting-the-build","text":"You are now ready to start the illumos build. The build itself may take anywhere from twenty minutes to a few hours, depending on the performance of your system. It is generally good advice to run the build under a session manager like screen or tmux so that you can detach and reattach without interrupting the build. Run the following command to start the full build: cd /code/illumos-gate time ksh93 usr/src/tools/scripts/nightly.sh illumos.sh The build creates a lot of output, so rather than emit it directly to the terminal it is saved in a log file: log/nightly.log in your workspace. You can follow the log file with tail as the build progresses; e.g., tail -F /code/illumos-gate/log/nightly.log If you only want to see warning or error messages from the build, you might try: tail -F /code/illumos-gate/log/nightly.log | grep -A5 -B5 '(error|warning).*: ' Once the build is complete, the log files (including nightly.log ) are moved to a unique directory including the datestamp; e.g., log/log.2019-02-08.17:50 . A latest symlink is also created, so log/latest/nightly.log always refers to the most recently completed build log. A summary of the build is saved in the log/latest/mail_msg file. If you see any errors in this file, you can find the full context by searching for the same message in the full nightly.log . The mail_msg file should be included when submitting a patch to demonstrate a successful build with no errors or warnings.","title":"Starting the build"},{"location":"developers/build/#performing-an-incremental-build","text":"Once you have completed a full nightly build, you can perform an incremental build without discarding files that are already built. This allows you to make some changes to the code and rebuild only the files to which you have made changes. The -i flag to nightly.sh performs an incremental build: cd /code/illumos-gate time ksh93 usr/src/tools/scripts/nightly.sh -i illumos.sh Note Before submitting a patch, you must perform a full (i.e., not incremental) build.","title":"Performing an incremental build"},{"location":"developers/build/#installing-your-build","text":"The build process generates packages that you can install on your system with the developer system update tool, onu . Depending on the NIGHTLY_OPTIONS you chose earlier, you will have packages in one of two locations within your workspace: packages/i386/nightly for a DEBUG build packages/i386/nightly-nd for a non-DEBUG build Once you locate your packages, you can install them with onu ; e.g., for a DEBUG build: sudo /code/illumos-gate/usr/src/tools/proto/root_i386-nd/opt/onbld/bin/onu \\ -t \"$(date -u +nightly-%Y%m%d-%H%MZ)\" \\ -d \"/code/illumos-gate/packages/i386/nightly\" This creates a build environment with a name that includes the date and time in UTC; e.g., nightly-20190415-0333Z . If your installation was successful, you can reboot to try the new bits! You can use beadm(1M) to list or modify the boot environments on your machine. Note For OpenIndiana and OmniOS it is critical that PKGVERS_BRANCH is set correctly in your nightly.sh environment file, or onu will likely fail to correctly install packages. See above on configuring your environment file","title":"Installing your build"},{"location":"developers/build/#in-case-of-emergency","text":"The illumos project contains a lot of software with a long history. The build system is quite complicated, and not always extremely robust in the face of unexpected changes on the build machine. If you're experiencing a problem with the build that you cannot immediately explain, here are a few things to try:","title":"In case of emergency"},{"location":"developers/build/#up-to-date-build-system","text":"Make sure you're running the latest version of your illumos distribution, as described above . If you're hitting a bug in the build tools it might well have been fixed already. Even if this doesn't fix your problem, it's easiest for members of the community to help you out when you're running recent software.","title":"Up-to-date build system"},{"location":"developers/build/#missed-flag-day","text":"As people work on the system it is occasionally necessary to make a change that will impact other developers. We try to communicate those changes in \"flag day\" e-mail messages to the developer mailing list . A list of these announcements also appears here on the site .","title":"Missed Flag Day"},{"location":"developers/build/#reach-out-for-help","text":"If you're still having trouble, remember that you're not alone! Other members of the community may be hitting the same problem, or they may just know how to help. Members of the community are usually available in IRC or on the mailing lists . When asking for help, it's a good idea to have ready the contents of your mail_msg file, or any other build error output you see on your machine.","title":"Reach out for help"},{"location":"developers/flagdays/","text":"Flag Days \u00b6 The following are notices sent to the developer@ mailing list to attract attention for specific changes, or call out specific actions that developers may need to perform to continue working with the sources. Such messages should also be archived here, for future reference. 2019 \u00b6 2019-02-15 HEADSUP or something:) 2019-02-11 Heads Up: 6885 CTF,Everywhere Part 1 2019-02-01 HEADS UP \u2014 git pbchk might erroneously complain about man pages 2019-01-07 HEADS UP: loader FB console 2018 \u00b6 2018-12-08 heads up/flag day or like:) 2018-11-27 HEADS-UP GCC 7 shadow compiler; no more lint 2018-10-29 Heads-up: Python3 module builds 2018-10-17 Heads-up: libbe.so be_list() function change 2018-10-13 HEADS-UP: Native demangling support Update 2018-10-13 headsup/flag day or something:) 2018-10-04 cw changes 2018-08-29 Flag day for those building gate on OmniOS 2018-12-10 FLAG DAY - can't build gate post-9997 w/o idn headers 2018-04-04 Heads-up! re 1575 untangle libmlrpc Update 2018-01-25 HEADS UP: Removal of 32-bit x86 kernel 2017 \u00b6 2017-03-02 Heads up: 7788 loader: zfs boot should check for provided fstype 2017-03-07 HEADS UP: Removal of on and rpc.rexd 2017-03-10 HEADSUP: updates 7720 & 7715 2017-09-27 Heads Up: Build changes required for UEFI 2016 \u00b6 2016-02-23 HEADS UP: 3661 Sync mDNS with upstream 2016-07-14 Heads-up: 6950 ARC should cache compressed data 2016-08-22 FLAG DAY: EOF of SunSSH 2016-08-31 HEADS UP: illumos-gate debug variant is available in hipster 2016-09-23 Heads Up: Loader Project Phase 1 has Integrated 2016-09-30 FLAG DAY - 5969 update illumos-gate to use python2.7 2016-10-15 HEADS-UP: illumos supports ASLR and other forms of exploit mitigation. 2016-11-09 HEADS UP: new driver for Intel WifiLink 4965/100/1000/2000/5000/6000 2016-12-02 headsup for shell setup and /etc/skel 2016-12-16 HEADS UP illumos GCC 4.4.4-il-4 2015 \u00b6 2015-02-20 Heads-up: Flag day for build machines that provided (only) Apache 1.3 headers. 2015-02-25 HEADS UP: machid commands removed 2015-02-26 HEADS-UP: ctf tools no longer act like strip(1) 2015-02-26 HEADS UP: illumos supports booting from EFI-labeled disks now, including large disks and whole-disk vdevs 2015-03-23 FLAG DAY for Timezone 2015-05-05 FLAG DAY - 4719 affects nightly, package, and poold 2015-05-05 HEADS UP -- illumos-gate can now be built on OmniOS r151014 or later 2015-06-04 Head-up! 5917 User-mode SMB server 2015-07-13 FLAG DAY: make/dmake are now part of illumos 2015-10-17 Heads up: Impact of illumos 5876 (sys/regset.h pollutes name space) Update 2015-10-30 HEADS UP: Java kerberos GUI (gkadmin) gone 2014 \u00b6 2014-01-28 HEADS-UP: GCC is now the default compiler 2014-02-19 HEADS UP: Nightly will no longer bringover from Subversion, build SVR4 packages, or support the old SFW gate 2014-02-19 HEADS UP: nightly now exits non-0 when pretty much anything goes wrong 2014-06-09 HEADS UP: legacy interfaces removed 2014-07-21 HEADS UP: Mandoc integrated 2014-08-15 HEADS UP / FLAG DAY: legacy (K&R) prototypes are gone 2014-08-16 HEADS-UP removal of ntfsprogs and parted 2014-10-18 HEADS UP: libm integrated 2013 \u00b6 2013-08-16 heads up: 3915 build changes, C++ 2012 \u00b6 2012-06-15 Illumos will now build with GCC 4.4.4 + patches 2012-09-21 FLAG DAY: Default GCC version is now 4.4.4 2012-09-22 FLAG DAY: Many more GCC warnings now enabled 2012-10-18 HEADS UP: onbld has switched to Python 2.6 2011 \u00b6 2011-03-04 Heads up: iSCSI UNMAP support 2011-05-14 Heads-up: Resurrect the ZFS \"aclmode\" property 2011-09-08 HEADS UP: Mailing List Behaviour 2010 \u00b6 2010-08-15 HEADS UP: Illumos no longer depends upon the 'extras' pkg repository 2010-08-19 HEADS UP: opensolaris.sh updated & renamed 2010-08-30 HEADS UP: English Locales Available 2010-09-07 HEADS UP: use ssh for hg 2010-09-12 FLAG DAY: signed crypto removed 2010-09-16 HEADS UP: new process when nuking closed bits 2010-09-20 HEADS UP: netservices is gone 2010-10-08 HEADS UP: locale data pushed 2010-11-08 Heads up: perl 5.8.4 removal 2010-11-18 HEADS UP: solistice enterprise agent removed 2010-11-19 HEADS UP: sparc build fixed, niagra crypto removed 2010-12-04 HEADS UP: open source iprb 2010-12-04 HEADS UP: new timegm() and strptime/strftime options 2010-12-15 HEADS UP: new \"sed\" integrated","title":"Flag Days"},{"location":"developers/flagdays/#flag-days","text":"The following are notices sent to the developer@ mailing list to attract attention for specific changes, or call out specific actions that developers may need to perform to continue working with the sources. Such messages should also be archived here, for future reference.","title":"Flag Days"},{"location":"developers/flagdays/#2019","text":"2019-02-15 HEADSUP or something:) 2019-02-11 Heads Up: 6885 CTF,Everywhere Part 1 2019-02-01 HEADS UP \u2014 git pbchk might erroneously complain about man pages 2019-01-07 HEADS UP: loader FB console","title":"2019"},{"location":"developers/flagdays/#2018","text":"2018-12-08 heads up/flag day or like:) 2018-11-27 HEADS-UP GCC 7 shadow compiler; no more lint 2018-10-29 Heads-up: Python3 module builds 2018-10-17 Heads-up: libbe.so be_list() function change 2018-10-13 HEADS-UP: Native demangling support Update 2018-10-13 headsup/flag day or something:) 2018-10-04 cw changes 2018-08-29 Flag day for those building gate on OmniOS 2018-12-10 FLAG DAY - can't build gate post-9997 w/o idn headers 2018-04-04 Heads-up! re 1575 untangle libmlrpc Update 2018-01-25 HEADS UP: Removal of 32-bit x86 kernel","title":"2018"},{"location":"developers/flagdays/#2017","text":"2017-03-02 Heads up: 7788 loader: zfs boot should check for provided fstype 2017-03-07 HEADS UP: Removal of on and rpc.rexd 2017-03-10 HEADSUP: updates 7720 & 7715 2017-09-27 Heads Up: Build changes required for UEFI","title":"2017"},{"location":"developers/flagdays/#2016","text":"2016-02-23 HEADS UP: 3661 Sync mDNS with upstream 2016-07-14 Heads-up: 6950 ARC should cache compressed data 2016-08-22 FLAG DAY: EOF of SunSSH 2016-08-31 HEADS UP: illumos-gate debug variant is available in hipster 2016-09-23 Heads Up: Loader Project Phase 1 has Integrated 2016-09-30 FLAG DAY - 5969 update illumos-gate to use python2.7 2016-10-15 HEADS-UP: illumos supports ASLR and other forms of exploit mitigation. 2016-11-09 HEADS UP: new driver for Intel WifiLink 4965/100/1000/2000/5000/6000 2016-12-02 headsup for shell setup and /etc/skel 2016-12-16 HEADS UP illumos GCC 4.4.4-il-4","title":"2016"},{"location":"developers/flagdays/#2015","text":"2015-02-20 Heads-up: Flag day for build machines that provided (only) Apache 1.3 headers. 2015-02-25 HEADS UP: machid commands removed 2015-02-26 HEADS-UP: ctf tools no longer act like strip(1) 2015-02-26 HEADS UP: illumos supports booting from EFI-labeled disks now, including large disks and whole-disk vdevs 2015-03-23 FLAG DAY for Timezone 2015-05-05 FLAG DAY - 4719 affects nightly, package, and poold 2015-05-05 HEADS UP -- illumos-gate can now be built on OmniOS r151014 or later 2015-06-04 Head-up! 5917 User-mode SMB server 2015-07-13 FLAG DAY: make/dmake are now part of illumos 2015-10-17 Heads up: Impact of illumos 5876 (sys/regset.h pollutes name space) Update 2015-10-30 HEADS UP: Java kerberos GUI (gkadmin) gone","title":"2015"},{"location":"developers/flagdays/#2014","text":"2014-01-28 HEADS-UP: GCC is now the default compiler 2014-02-19 HEADS UP: Nightly will no longer bringover from Subversion, build SVR4 packages, or support the old SFW gate 2014-02-19 HEADS UP: nightly now exits non-0 when pretty much anything goes wrong 2014-06-09 HEADS UP: legacy interfaces removed 2014-07-21 HEADS UP: Mandoc integrated 2014-08-15 HEADS UP / FLAG DAY: legacy (K&R) prototypes are gone 2014-08-16 HEADS-UP removal of ntfsprogs and parted 2014-10-18 HEADS UP: libm integrated","title":"2014"},{"location":"developers/flagdays/#2013","text":"2013-08-16 heads up: 3915 build changes, C++","title":"2013"},{"location":"developers/flagdays/#2012","text":"2012-06-15 Illumos will now build with GCC 4.4.4 + patches 2012-09-21 FLAG DAY: Default GCC version is now 4.4.4 2012-09-22 FLAG DAY: Many more GCC warnings now enabled 2012-10-18 HEADS UP: onbld has switched to Python 2.6","title":"2012"},{"location":"developers/flagdays/#2011","text":"2011-03-04 Heads up: iSCSI UNMAP support 2011-05-14 Heads-up: Resurrect the ZFS \"aclmode\" property 2011-09-08 HEADS UP: Mailing List Behaviour","title":"2011"},{"location":"developers/flagdays/#2010","text":"2010-08-15 HEADS UP: Illumos no longer depends upon the 'extras' pkg repository 2010-08-19 HEADS UP: opensolaris.sh updated & renamed 2010-08-30 HEADS UP: English Locales Available 2010-09-07 HEADS UP: use ssh for hg 2010-09-12 FLAG DAY: signed crypto removed 2010-09-16 HEADS UP: new process when nuking closed bits 2010-09-20 HEADS UP: netservices is gone 2010-10-08 HEADS UP: locale data pushed 2010-11-08 Heads up: perl 5.8.4 removal 2010-11-18 HEADS UP: solistice enterprise agent removed 2010-11-19 HEADS UP: sparc build fixed, niagra crypto removed 2010-12-04 HEADS UP: open source iprb 2010-12-04 HEADS UP: new timegm() and strptime/strftime options 2010-12-15 HEADS UP: new \"sed\" integrated","title":"2010"},{"location":"user-guide/","text":"Getting Started \u00b6 Introduction \u00b6 As illumos is the core of an operating system but not a distribution itself, the easiest way to get started with illumos is to download a distro and start playing. Manual pages \u00b6 As with most Unix-like operating systems, illumos ships with an extensive set of manual pages that describe how the system works. You can view the manual pages on an illumos system using the man command; e.g., $ man ls You can also browse (and link to) the illumos manual pages online ; e.g., ls(1) . Books \u00b6 We provide a number of books relating to illumos technologies. The books are open source, and can be edited in the illumos-docbooks repository. If your goal is to work on illumos itself, the Developer's Guide or the Building illumos page are good places to get started.","title":"Getting Started"},{"location":"user-guide/#getting-started","text":"","title":"Getting Started"},{"location":"user-guide/#introduction","text":"As illumos is the core of an operating system but not a distribution itself, the easiest way to get started with illumos is to download a distro and start playing.","title":"Introduction"},{"location":"user-guide/#manual-pages","text":"As with most Unix-like operating systems, illumos ships with an extensive set of manual pages that describe how the system works. You can view the manual pages on an illumos system using the man command; e.g., $ man ls You can also browse (and link to) the illumos manual pages online ; e.g., ls(1) .","title":"Manual pages"},{"location":"user-guide/#books","text":"We provide a number of books relating to illumos technologies. The books are open source, and can be edited in the illumos-docbooks repository. If your goal is to work on illumos itself, the Developer's Guide or the Building illumos page are good places to get started.","title":"Books"},{"location":"user-guide/bugs/","text":"Bug Trackers \u00b6 Project Description illumos-gate Core. Kernel, userland, drivers, etc. OpenIndiana Distribution-specific SmartOS Bugview Distribution-specific, read-only JIRA mirror SmartOS GitHub Distribution-specific, public issues OmniOS Distribution-specific Joyent pkgsrc Cross-platform packages How to report problems \u00b6 Before creating new issues in the bug tracker, please perform a search to determine if the problem is already known, or resolved in a newer version of the software. You can report a new issue using our issue tracker. A good issue report includes: Steps for reproducing the problem, in as much detail as possible. Information about your system software and hardware. For crashes, the contents of the crash information file from the above section. Please paste any error messages, or the output of ::msgbuf from mdb -k , directly in the bug description. Examples of bug fixing \u00b6 Ryan Zezeski goes through fixing a bug in ZFS in this \"illumos Day\" talk. ( video , slides )","title":"Bug Reporting"},{"location":"user-guide/bugs/#bug-trackers","text":"Project Description illumos-gate Core. Kernel, userland, drivers, etc. OpenIndiana Distribution-specific SmartOS Bugview Distribution-specific, read-only JIRA mirror SmartOS GitHub Distribution-specific, public issues OmniOS Distribution-specific Joyent pkgsrc Cross-platform packages","title":"Bug Trackers"},{"location":"user-guide/bugs/#how-to-report-problems","text":"Before creating new issues in the bug tracker, please perform a search to determine if the problem is already known, or resolved in a newer version of the software. You can report a new issue using our issue tracker. A good issue report includes: Steps for reproducing the problem, in as much detail as possible. Information about your system software and hardware. For crashes, the contents of the crash information file from the above section. Please paste any error messages, or the output of ::msgbuf from mdb -k , directly in the bug description.","title":"How to report problems"},{"location":"user-guide/bugs/#examples-of-bug-fixing","text":"Ryan Zezeski goes through fixing a bug in ZFS in this \"illumos Day\" talk. ( video , slides )","title":"Examples of bug fixing"},{"location":"user-guide/debug-apps/","text":"Inspecting An Application Crash \u00b6 Check your core file configuration: # coreadm This should print something like: global core file pattern: global core file content: default init core file pattern: core init core file content: default global core dumps: disabled per-process core dumps: enabled global setid core dumps: disabled per-process setid core dumps: disabled global core dump logging: disabled If the global core file pattern is empty and per-process core dumps are enabled, an application crash will save a core file named core in the working directory. To print the stack information from the crash: pstack core","title":"Applications"},{"location":"user-guide/debug-apps/#inspecting-an-application-crash","text":"Check your core file configuration: # coreadm This should print something like: global core file pattern: global core file content: default init core file pattern: core init core file content: default global core dumps: disabled per-process core dumps: enabled global setid core dumps: disabled per-process setid core dumps: disabled global core dump logging: disabled If the global core file pattern is empty and per-process core dumps are enabled, an application crash will save a core file named core in the working directory. To print the stack information from the crash: pstack core","title":"Inspecting An Application Crash"},{"location":"user-guide/debug-systems/","text":"Requires Review This page contains incomplete content and needs to be reviewed. Debugging broken systems \u00b6 This page is intended to help users of operating systems derived from the illumos gate to bring problems to the attention of the illumos gate developers. All commands in this guide is presumed to be run as a non-privileged user. pfexec will be prepended to commands which need additional privileges. On some systems, the sudo command is used for this purpose. Help! My System Crashed or Locked Up! \u00b6 You might be reading this because your system suddenly printed a panic message on the console, saved a crash dump, and then rebooted (or the popular alternative: suddenly locked up, showed some disk activity, and then rebooted). Or perhaps your system stopped responding and never recovered. Calm down. We want to know about this problem. When illumos crashes (kernel panics), a crash dump is automatically saved containing information from kernel memory. This can be copied to a file. A developer can use use the crash dump to inspect the state of the system at the time of the crash. You can also generate a crash dump manually to debug a hang. If you are on a live session where no storage is available, you may have to manually copy down crash or hang information. A serial console is preferred for this. Gathering Information from a Crash Dump \u00b6 If you are on an installed system and a crash occurs, a crash dump will normally be saved. If you are on a live system, skip to the next section. Assuming the crash does not recur immediately after the reboot, you can retrieve information from the crash dump by following these instructions. Log in as a user with access to pfexec or sudo (typically the user you created at install) Check your crash dump configuration: pfexec dumpadm This should print something like: Dump content: kernel pages Dump device: /dev/zvol/dsk/rpool/dump (dedicated) Savecore directory: /var/crash/kirin Savecore enabled: no Save compressed: on To extract the crash dump from the dump volume: pfexec mkdir -p /var/crash/`hostname` pfexec savecore cd /var/crash/`hostname` pfexec savecore -vf vmdump.0 With the crash dump extracted, you can now copy the kernel messages and stack information from the crash to a file: echo '::panicinfo\\n::cpuinfo -v\\n::threadlist -v 10\\n::msgbuf\\n*panic_thread::findstack -v\\n::stacks' | mdb 0 > ~/crash.0 Save the crash.0 file in your home directory for reporting the crash. If possible, keep the crash dump files on hand for future examination. If you have available bandwidth and disk space, making this full crash dump accessible to developers is invaluable. Note that due to the nature of the dump, it may contain information you consider confidential. Use your judgment when making it generally available. Notes \u00b6 Configuring your crash dump. The commands \"dumpadm\" and \"coreadm\" and be used to list and alter the location and/or the actual contents of the resulting crash dump. Ensuring a successful crash dump \u00b6 If you do not see a line like \"100% done .... dump succeeded\" on the console (if you have a console) or when you later try to analyze your crash dump via \"savecore -vd\" or \"savecore\" you see a message like \"savecore: bad magic number 0\". You are probably are hitting illumos Bug #1110 and Bug #1369 (disable multi-threaded dump). In this case in order to successfully force a crash dump (if you do not see \"dump succeeded\") you should modify your system to perform a non-threaded crash dump by adding the following line to your /etc/system file \"set dump_plat_mincpu=0\" and then performing a reconfiguration reboot. Forcing a crash dump. \u00b6 In order to force a crash dump form a working system that still has interactive capabilities you can do one of the following: as below \"Gathering Information from a Running System\". as below \"Gathering Information from a Running System, using only NMI (x86)\". issue the command \"savecore -L\" from the command line, this is not be the \"best\" method for debugging an issue. issue the command \"reboot -d\", this is not be the \"best\" method for debugging an issue. Gathering Information from a Running System \u00b6 If you can reproduce the hang or crash, enabling the kernel debugger beforehand is a way to get valuable information about it. The best option, if problem occurs after the system has access to storage, is to use the debugger to save a crash dump. Otherwise, you should record as much diagnostic information as possible from the debugger.. A serial console or some form of lights-out management (LOM) functionality is preferred for interacting with the debugger. To use a serial console, you need an onboard or USB serial port, a null modem cable, and another computer with a serial port, and to boot with the appropriate -B console=ttya or similar option. For a local console, you need a monitor and keyboard. On x86, this must be a PS/2 keyboard or a USB keyboard operating in USB legacy (PS/2 emulation) mode. Enabling verbose boot messages and the kernel debugger (kmdb) on x86 \u00b6 At the GRUB prompt, highlight the boot environment with the arrow keys and press 'e' to edit the commands. Highlight the splashimage line, if it exists, and press 'd' to delete. Highlight the kernel line and press 'e' to edit. Append -kvd -m verbose to the end of the line (and remove console=graphics if it appears after -B) Press 'Enter' when finished, and then press 'b' to boot. Enabling verbose boot messages and the kernel debugger (kmdb) on SPARC: \u00b6 Press 'Stop' ('L1'), then 'A' or send a BREAK on the serial line to interrupt the boot process, if necessary. At the ok prompt, type boot -kvd -m verbose and press 'Enter'. On both platforms \u00b6 Wait for the kmdb> prompt to appear, then type moddebug/W 80000000 and press 'Enter'. Type snooping/W 1 and press 'Enter'. Type :c and press 'Enter'. If the system panics, copy down ::msgbuf , ::status and ::stack . If the system hangs, copy down the last few lines regarding modules on screen, and do one of: On a serial console, send a BREAK on the serial line using your serial communications program. On a local keyboard on SPARC, press 'Stop' ('L1'), then 'A'. On a local keyboard on x86, press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'. Generate an NMI if your system provides this capability (hardware button, service processor command). When you are successful the system should drop you into a kmdb prompt. Use $<systemdump to save a crash dump. The system should automatically reboot when finished. Follow \"Gathering Information About A Crash\", above. If you cannot save a crash dump, and are on a serial console, enter ::msgbuf, ::panicinfo, ::cpuinfo -v and::threadlist -v 10 and record the output. (Or take photos if you're unlucky enough to be at a VGA console).. Gathering Information from a Running System, Using only NMI (x86) \u00b6 In order to force a crash dump form a system that seems hung or frozen e.g. no longer has has interactive capabilities if your system supports NMI (hardware button, service processor command) it might be a good practice to permanently configure the following: Adding the line (as user root) set pcplusmp:apic_panic_on_nmi = 1 to your /etc/system file allows a crash dump to be generated on the receipt by your system of an NMI (non-maskable interrupt). Once this line is added you will have to do a reconfiguration reboot. Note, If you also have the line set pcplusmp:apic_kmdb_on_nmi=1 in your /etc/system file you will not generate a crash dump, but rather go into the kernel debugger as this later directive takes priority over the pcplusmp:apic_panic_on_nmi setting. The above might be a a very good practice as it simplifies forcing a \"crash dump\" (avoids the x86 requirement of keyboard input e.g. press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'.). However this simplification will a) not work on all platforms and b) might even cause issues on a few system types and c) works if your system loads/uses the pcplusmp module (not the apix module). Because of these requirements despite the fact that many admins use this as a default setting it is not the default configuration for fresh installs of the OS. More resources: Debugging, Testing, and Tuning Device Drivers (from the Writing Device Drivers Guide ) Debugging With the Kernel Memory Allocator (from the Modular Debugger Guide ) Diagnosing kernel hangs/panics with kmdb and moddebug by Dan Mick Crash dump analysis on OpenSolaris Solaris 10 crash dumps","title":"Systems"},{"location":"user-guide/debug-systems/#debugging-broken-systems","text":"This page is intended to help users of operating systems derived from the illumos gate to bring problems to the attention of the illumos gate developers. All commands in this guide is presumed to be run as a non-privileged user. pfexec will be prepended to commands which need additional privileges. On some systems, the sudo command is used for this purpose.","title":"Debugging broken systems"},{"location":"user-guide/debug-systems/#help-my-system-crashed-or-locked-up","text":"You might be reading this because your system suddenly printed a panic message on the console, saved a crash dump, and then rebooted (or the popular alternative: suddenly locked up, showed some disk activity, and then rebooted). Or perhaps your system stopped responding and never recovered. Calm down. We want to know about this problem. When illumos crashes (kernel panics), a crash dump is automatically saved containing information from kernel memory. This can be copied to a file. A developer can use use the crash dump to inspect the state of the system at the time of the crash. You can also generate a crash dump manually to debug a hang. If you are on a live session where no storage is available, you may have to manually copy down crash or hang information. A serial console is preferred for this.","title":"Help! My System Crashed or Locked Up!"},{"location":"user-guide/debug-systems/#gathering-information-from-a-crash-dump","text":"If you are on an installed system and a crash occurs, a crash dump will normally be saved. If you are on a live system, skip to the next section. Assuming the crash does not recur immediately after the reboot, you can retrieve information from the crash dump by following these instructions. Log in as a user with access to pfexec or sudo (typically the user you created at install) Check your crash dump configuration: pfexec dumpadm This should print something like: Dump content: kernel pages Dump device: /dev/zvol/dsk/rpool/dump (dedicated) Savecore directory: /var/crash/kirin Savecore enabled: no Save compressed: on To extract the crash dump from the dump volume: pfexec mkdir -p /var/crash/`hostname` pfexec savecore cd /var/crash/`hostname` pfexec savecore -vf vmdump.0 With the crash dump extracted, you can now copy the kernel messages and stack information from the crash to a file: echo '::panicinfo\\n::cpuinfo -v\\n::threadlist -v 10\\n::msgbuf\\n*panic_thread::findstack -v\\n::stacks' | mdb 0 > ~/crash.0 Save the crash.0 file in your home directory for reporting the crash. If possible, keep the crash dump files on hand for future examination. If you have available bandwidth and disk space, making this full crash dump accessible to developers is invaluable. Note that due to the nature of the dump, it may contain information you consider confidential. Use your judgment when making it generally available.","title":"Gathering Information from a Crash Dump"},{"location":"user-guide/debug-systems/#notes","text":"Configuring your crash dump. The commands \"dumpadm\" and \"coreadm\" and be used to list and alter the location and/or the actual contents of the resulting crash dump.","title":"Notes"},{"location":"user-guide/debug-systems/#ensuring-a-successful-crash-dump","text":"If you do not see a line like \"100% done .... dump succeeded\" on the console (if you have a console) or when you later try to analyze your crash dump via \"savecore -vd\" or \"savecore\" you see a message like \"savecore: bad magic number 0\". You are probably are hitting illumos Bug #1110 and Bug #1369 (disable multi-threaded dump). In this case in order to successfully force a crash dump (if you do not see \"dump succeeded\") you should modify your system to perform a non-threaded crash dump by adding the following line to your /etc/system file \"set dump_plat_mincpu=0\" and then performing a reconfiguration reboot.","title":"Ensuring a successful crash dump"},{"location":"user-guide/debug-systems/#forcing-a-crash-dump","text":"In order to force a crash dump form a working system that still has interactive capabilities you can do one of the following: as below \"Gathering Information from a Running System\". as below \"Gathering Information from a Running System, using only NMI (x86)\". issue the command \"savecore -L\" from the command line, this is not be the \"best\" method for debugging an issue. issue the command \"reboot -d\", this is not be the \"best\" method for debugging an issue.","title":"Forcing a crash dump."},{"location":"user-guide/debug-systems/#gathering-information-from-a-running-system","text":"If you can reproduce the hang or crash, enabling the kernel debugger beforehand is a way to get valuable information about it. The best option, if problem occurs after the system has access to storage, is to use the debugger to save a crash dump. Otherwise, you should record as much diagnostic information as possible from the debugger.. A serial console or some form of lights-out management (LOM) functionality is preferred for interacting with the debugger. To use a serial console, you need an onboard or USB serial port, a null modem cable, and another computer with a serial port, and to boot with the appropriate -B console=ttya or similar option. For a local console, you need a monitor and keyboard. On x86, this must be a PS/2 keyboard or a USB keyboard operating in USB legacy (PS/2 emulation) mode.","title":"Gathering Information from a Running System"},{"location":"user-guide/debug-systems/#enabling-verbose-boot-messages-and-the-kernel-debugger-kmdb-on-x86","text":"At the GRUB prompt, highlight the boot environment with the arrow keys and press 'e' to edit the commands. Highlight the splashimage line, if it exists, and press 'd' to delete. Highlight the kernel line and press 'e' to edit. Append -kvd -m verbose to the end of the line (and remove console=graphics if it appears after -B) Press 'Enter' when finished, and then press 'b' to boot.","title":"Enabling verbose boot messages and the kernel debugger (kmdb) on x86"},{"location":"user-guide/debug-systems/#enabling-verbose-boot-messages-and-the-kernel-debugger-kmdb-on-sparc","text":"Press 'Stop' ('L1'), then 'A' or send a BREAK on the serial line to interrupt the boot process, if necessary. At the ok prompt, type boot -kvd -m verbose and press 'Enter'.","title":"Enabling verbose boot messages and the kernel debugger (kmdb) on SPARC:"},{"location":"user-guide/debug-systems/#on-both-platforms","text":"Wait for the kmdb> prompt to appear, then type moddebug/W 80000000 and press 'Enter'. Type snooping/W 1 and press 'Enter'. Type :c and press 'Enter'. If the system panics, copy down ::msgbuf , ::status and ::stack . If the system hangs, copy down the last few lines regarding modules on screen, and do one of: On a serial console, send a BREAK on the serial line using your serial communications program. On a local keyboard on SPARC, press 'Stop' ('L1'), then 'A'. On a local keyboard on x86, press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'. Generate an NMI if your system provides this capability (hardware button, service processor command). When you are successful the system should drop you into a kmdb prompt. Use $<systemdump to save a crash dump. The system should automatically reboot when finished. Follow \"Gathering Information About A Crash\", above. If you cannot save a crash dump, and are on a serial console, enter ::msgbuf, ::panicinfo, ::cpuinfo -v and::threadlist -v 10 and record the output. (Or take photos if you're unlucky enough to be at a VGA console)..","title":"On both platforms"},{"location":"user-guide/debug-systems/#gathering-information-from-a-running-system-using-only-nmi-x86","text":"In order to force a crash dump form a system that seems hung or frozen e.g. no longer has has interactive capabilities if your system supports NMI (hardware button, service processor command) it might be a good practice to permanently configure the following: Adding the line (as user root) set pcplusmp:apic_panic_on_nmi = 1 to your /etc/system file allows a crash dump to be generated on the receipt by your system of an NMI (non-maskable interrupt). Once this line is added you will have to do a reconfiguration reboot. Note, If you also have the line set pcplusmp:apic_kmdb_on_nmi=1 in your /etc/system file you will not generate a crash dump, but rather go into the kernel debugger as this later directive takes priority over the pcplusmp:apic_panic_on_nmi setting. The above might be a a very good practice as it simplifies forcing a \"crash dump\" (avoids the x86 requirement of keyboard input e.g. press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'.). However this simplification will a) not work on all platforms and b) might even cause issues on a few system types and c) works if your system loads/uses the pcplusmp module (not the apix module). Because of these requirements despite the fact that many admins use this as a default setting it is not the default configuration for fresh installs of the OS. More resources: Debugging, Testing, and Tuning Device Drivers (from the Writing Device Drivers Guide ) Debugging With the Kernel Memory Allocator (from the Modular Debugger Guide ) Diagnosing kernel hangs/panics with kmdb and moddebug by Dan Mick Crash dump analysis on OpenSolaris Solaris 10 crash dumps","title":"Gathering Information from a Running System, Using only NMI (x86)"}]}